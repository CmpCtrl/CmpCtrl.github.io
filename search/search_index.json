{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CCG-CORE Library Competition Controls Group, LLC v0.1.0 - 5/4/24 Overview The ccg package is intended to implement much of the functionality common to motorsports data analysis tools. The focus is on implementing a package that is relatively easy to use when building an application. Functional Overview The ccg package is made up of several modules that implement various functionality. Data The modules in the data package implement functionality for dealing with both timeseries data as well as tabular data. Controllers The modules in the controllers package implement functionality related to engine controllers like importing data and defining the control strategy. UI The ui package implements functionality related to the user interface. Including plotting and dashboards. DB The db package implements a driver for a MongoDB to work with the tsdata and and tbldata classes. \u2514\u2500\u2500 \ud83d\udcc1ccg \u2514\u2500\u2500 \ud83d\udcc1controllers \u2514\u2500\u2500 aem.py \u2514\u2500\u2500 link.py \u2514\u2500\u2500 motec.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1data \u2514\u2500\u2500 alloc_data.py \u2514\u2500\u2500 gating.py \u2514\u2500\u2500 tbldata.py \u2514\u2500\u2500 tsdata.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1db \u2514\u2500\u2500 mongo.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1ui \u2514\u2500\u2500 caldata_scripts.js \u2514\u2500\u2500 panel.py \u2514\u2500\u2500 plot.py \u2514\u2500\u2500 plotgo.py \u2514\u2500\u2500 plot_themes.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 util.py \u2514\u2500\u2500 __init__.py","title":"CCG-CORE Library"},{"location":"#ccg-core-library","text":"Competition Controls Group, LLC v0.1.0 - 5/4/24","title":"CCG-CORE Library"},{"location":"#overview","text":"The ccg package is intended to implement much of the functionality common to motorsports data analysis tools. The focus is on implementing a package that is relatively easy to use when building an application.","title":"Overview"},{"location":"#functional-overview","text":"The ccg package is made up of several modules that implement various functionality.","title":"Functional Overview"},{"location":"#data","text":"The modules in the data package implement functionality for dealing with both timeseries data as well as tabular data.","title":"Data"},{"location":"#controllers","text":"The modules in the controllers package implement functionality related to engine controllers like importing data and defining the control strategy.","title":"Controllers"},{"location":"#ui","text":"The ui package implements functionality related to the user interface. Including plotting and dashboards.","title":"UI"},{"location":"#db","text":"The db package implements a driver for a MongoDB to work with the tsdata and and tbldata classes. \u2514\u2500\u2500 \ud83d\udcc1ccg \u2514\u2500\u2500 \ud83d\udcc1controllers \u2514\u2500\u2500 aem.py \u2514\u2500\u2500 link.py \u2514\u2500\u2500 motec.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1data \u2514\u2500\u2500 alloc_data.py \u2514\u2500\u2500 gating.py \u2514\u2500\u2500 tbldata.py \u2514\u2500\u2500 tsdata.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1db \u2514\u2500\u2500 mongo.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 \ud83d\udcc1ui \u2514\u2500\u2500 caldata_scripts.js \u2514\u2500\u2500 panel.py \u2514\u2500\u2500 plot.py \u2514\u2500\u2500 plotgo.py \u2514\u2500\u2500 plot_themes.py \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 util.py \u2514\u2500\u2500 __init__.py","title":"DB"},{"location":"data/","text":"CCG Time Series data module. Attributes SIG_ATTRS module-attribute SIG_ATTRS = { 'data' , 'unit' , 'interp_method' , 'parent' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'data_range' } Classes Frame Collection of Time Series data. Parameters: data ( Sig | list [ Sig ] | None , default: None ) \u2013 TS Data, by default None. References to Sig will be broken. name ( str | None , default: None ) \u2013 Frame name, by default None math_tline ( TLine | None , default: None ) \u2013 TLine for Frame wide math, by default None Attributes: sigs ( dict [ str , Sig ] ) \u2013 dictionary of Sigs tlines ( TLineCollection ) \u2013 Collection of timelines, referenced by Sigs name ( str ) \u2013 Frame Name nsigs ( int ) \u2013 nsamples ( int ) \u2013 tend ( float | None ) \u2013 tstart ( float | None ) \u2013 tline ( TLine | None ) \u2013 Attributes CUTOFF class-attribute instance-attribute CUTOFF = 0.5 sigs instance-attribute sigs : dict [ str , Sig ] = {} tlines instance-attribute tlines = TLineCollection ( self ) name instance-attribute name = name math_tline instance-attribute math_tline = math_tline nsigs property nsigs : int Number of Sigs in collection. nsamples property nsamples : int Cumulative samples (counting unique timelines as well). tend property tend : float | None Latest end time from TLine collection. Returns: float \u2013 Time in unix. tstart property tstart : float | None Earliest start time from TLine collection. Returns: float \u2013 Time in unix. tend_iso property tend_iso : NDArray [ datetime64 ] Latest end time from TLine collection. Returns: float \u2013 Time in iso. tstart_iso property tstart_iso Earliest start time from TLine collection. Returns: float \u2013 Time in iso. tline property tline : TLine | None If frame has only one tline, return it. Functions __init__ __init__ ( data : Sig | list [ Sig ] | None = None , name : str | None = None , math_tline : TLine | None = None ) -> None resample resample ( sample_to : TLine , sigs : str | list [ str ] | None = None , inplace : bool | None = False , prefix : str | None = None , suffix : str | None = None , ** kwargs ) Resample Frame to a sample_to TLine. Parameters: sample_to ( TLine ) \u2013 TLine to resample to sigs ( str | list [ str ] | None , default: None ) \u2013 list of sigs to resample, full frame if None, by default None inplace ( bool | None , default: False ) \u2013 if True, will resample signals and append (id prefix or suffix is not None) or replace inplace. By default False prefix ( str | None , default: None ) \u2013 prefix to signame, by default None suffix ( str | None , default: None ) \u2013 suffix to signame, by default None **kwargs \u2013 Additional arguments passed to Sig.resample() Returns: Frame \u2013 Returns Self if inplace, else a new Frame append append ( item : Sig | Frame | list [ Sig ], append_existing_signals : bool = False , interweave_tlines : bool = False ) Append to CCG Frame in place. sort sort ( remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signals by timeline for monoton increasing. clear clear () Clears frame in place. clean_names clean_names () Cleans signal names. remove remove ( signames : str | list [ str ]) Removes sigs from frame. plot plot () Plot data frame. valid valid ( gatecoll : GateColl , tline : TLine | None = None ) -> Frame Returns a new Frame, invalid data replaced with nan. calc'd on tline or combined TLine if None Parameters: gatecoll ( GateColl ) \u2013 Collection of gating conditions tline ( TLine | None , default: None ) \u2013 TLine to calculate validity on, by default None Returns: Frame \u2013 New instance of Frame from_excel from_excel ( filename : str | Path , tline_col : int | str = None , signame_row : int = None , signame_regex : str = None , filedata : BytesIO | StringIO | bytes = None , sigunit_row : int = None , sigdata_row : int = None ) -> Frame Generate frame from excel file. Parameters: filename ( str | Path ) \u2013 tline_col ( int | str , default: None ) \u2013 Column to use for an index signame_row ( int , default: None ) \u2013 Row with names to parse with _regex signame_regex ( str , default: None ) \u2013 regex string to parse signal names. Use named groups for parameters to pass into Sig instatiation, for example name, units, etc. example here: https://regex101.com/r/bfBrdf/6 filedata ( BytesIO | StringIO | bytes , default: None ) \u2013 string or bytes io. filename will only be used for ext, name, etc. read_filedata read_filedata ( filename : Path , filedata : BytesIO | StringIO | bytes | None = None ) Reads file data for building frame from file __getattr__ __getattr__ ( signame : str ) -> Sig Provides dot notation access to Sigs if their names conform to dot notation. Parameters: signame ( str ) \u2013 Must conform to dot notation (no spaces or special characters, starts with non numeric char, etc.) Returns: Sig \u2013 Reference to Sig in Self __getitem__ __getitem__ ( index : Frame | list [ str ] | set [ str ] | tuple [ str ] | str | slice ) -> Frame | Sig Frame item getter. Parameters: index ( Frame | list [ str ] | slice | set [ str ] | str ) \u2013 Frame, list of Sig names, slice of Returns: Frame | Sig \u2013 New instance of Frame if index is Frame, list[str], slice. Reference to the Sig if str is a sig name. Examples: >>>TEST_LIST = [1.0, 2.0, 3.0] >>>TEST_ARR = np.array(TEST_LIST) >>>TEST_TIME = [0.0, 1.0, 2.0] >>>TEST_TLINE = TLine(TEST_TIME) >>>TEST_SIG = Sig(data=TEST_ARR, tline=TEST_TLINE, name=\"TestSig\") >>>assert frm[\"TestSig\"] == TEST_SIG # The reference to TEST_SIG was broken when appended to frm >>>assert frm[\"TestSig\"] is frm.sigs[\"TestSig\"] # The reference is preserved to the Sig in frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] is not frm # The reference is broken to frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] == frm >>>slicedfrm = frm[0:1.1] # sliced in time, with no step there is no resample >>>assert slicedfrm.tstart == 0.0 >>>assert slicedfrm.tend == 1.0 >>>assert slicedfrm.TestSig.nsamples == 2 # note 2 samples since no step was defined in slice >>>sliced_w_resample = frm[0:1.1:0.1] # Sliced in time, resamples to slice since step was defined. >>>assert sliced_w_resample.tstart == 0.0 >>>assert sliced_w_resample.tend == 1.0 >>>assert sliced_w_resample.TestSig.nsamples == 11 # note 2 samples since no step was defined in slice check_for_alt check_for_alt ( index ) Check for alternate name in case of missing dot notation __contains__ __contains__ ( key ) Checks if key is a signame in frame subset subset ( index : slice , sigs : list [ str ] = None ) Get a subset of frame. Allows slicing by signals and in timeline. __iter__ __iter__ () Iterate. __repr__ __repr__ () -> str Return repr string. __eq__ __eq__ ( other : Self ) -> bool Check equality. Sig CCG Sig class. Contains signal data and timeline. Parameters: data ( Sig | NDArray | list | None , default: None ) \u2013 Data source for the signal. tline ( TLine | None , default: None ) \u2013 Timeline instance for signal. Must be same length as data. name ( str | None , default: None ) \u2013 Signal name, must be unique in a Frame . unit ( str | None , default: None ) \u2013 Optional unit. interp_method ( InterpMethod | None , default: None ) \u2013 interpolation method for signal. parent ( Frame | None , default: None ) \u2013 Reference to the 'Frame' if this is in a frame. connect_gaps ( bool | None , default: None ) \u2013 Option for plotting using Plot data_enum ( SigEnum | None , default: None ) \u2013 Enumeration definition to alias values, used for plotting string data. data_range ( list [ float ] | None , default: None ) \u2013 Used for plot scaling. **kwargs \u2013 Argument for inserting unknown attributes. Attributes parent instance-attribute parent = parent connect_gaps instance-attribute connect_gaps = connect_gaps data_enum instance-attribute data_enum = data_enum base_data instance-attribute base_data = None interp_method instance-attribute interp_method = None tline instance-attribute tline = tline unit instance-attribute unit = unit data_range instance-attribute data_range = data_range name property writable name : str Return signal name. data property writable data : NDArray data getter max property max : NBitBase | None Max value. min property min : NBitBase | None Min value. nsamples property nsamples appx_bytes property appx_bytes Estimated size of data [bytes]. Excludes tline. tstart property tstart Start if tline. tend property tend End of tline. tstart_iso property tstart_iso Start if tline. tend_iso property tend_iso End of tline. period property period apprx period. Functions __init__ __init__ ( data : Sig | npt . NDArray | list | None = None , tline : TLine | None = None , name : str | None = None , unit : str | None = None , interp_method : InterpMethod | None = None , parent : Frame | None = None , connect_gaps : bool | None = None , data_enum : SigEnum | None = None , nsamples : int | None = None , dtype : npt . DTypeLike = None , data_range : list [ float ] | None = None , ** kwargs ) -> None calc_idn calc_idn () Calculate hash for IDN. append append ( sig : Sig , interweave_tlines = False , remove_duplicates = False ) Append sig to signal. convert_units convert_units ( unit : str ) -> Sig Convert units in place as_unit as_unit ( unit : str ) -> Sig return new sig converted to unit sort_tline sort_tline ( inplace = True , remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signal by timeline. Parameters: inplace \u2013 Sorts signal in place, returns None. remove_duplicates \u2013 Will remove duplicate timestamps if signal is also duplicated. Returns: Sig \u2013 self if inplace=True . plot_prep plot_prep () -> Sig Prepare for plotting. Sorts tline and removes duplicates. Inserts NaNs in gaps if connect_gaps=False | None . Applies enum if it exists. interp interp ( points : npt . NDArray | TLine , extrapolate : bool = False ) -> Sig Interpolate signal to points. resample resample ( sample_to : TLine , n_win : int = None , n_ord : int = None , gap_fraction : float = None , interp_gaps = False ) -> Sig Resample with Savitzky Golay filter. Parameters: sample_to ( TLine ) \u2013 TLine to resample to n_win ( int , default: None ) \u2013 window size, should be odd. Is relative to the sample_to index n_ord ( int , default: None ) \u2013 order of the fit gap_fraction ( float , default: None ) \u2013 size of a gap relative to the window size to interpolate between Returns: New resampled Sig \u2013 dot dot ( n_dot : int = 1 , n_win : int = 5 , n_ord : int = 3 ) Calculate Derivative of signal. Returns new sig. valid valid ( gatecoll : GateColl , frame : Frame = None ) Return new signal with invalid data replaced with nan's __len__ __len__ () -> int __repr__ __repr__ () -> str Return string representation. __str__ __str__ () -> str Return readable string. __add__ __add__ ( other ) add, resamples to parent.math_tline if exists. returns Sig. __sub__ __sub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig. __radd__ __radd__ ( other ) add, resamples to parent.math_tline if exists. returns Sig. __rsub__ __rsub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig. __mul__ __mul__ ( other ) multiply(elementwise), resamples to parent.math_tline if exists. returns Sig. __truediv__ __truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Sig. __pow__ __pow__ ( other ) power, resamples to parent.math_tline if exists. returns Sig. __abs__ __abs__ () abs __neg__ __neg__ () neg __eq__ __eq__ ( other ) -> bool Check equality. __getitem__ __getitem__ ( index : int | list [ int ] | slice | npt . NDArray ) Get item of Sig. __setitem__ __setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray | str ) Set item __iter__ __iter__ () Iterate. __next__ __next__ () Next. __deepcopy__ __deepcopy__ ( memo ) Deepcopy of a CCGSig. Referenced frame is removed. TLine CCG Time Line. Attributes __slots__ class-attribute instance-attribute __slots__ = ( '_iso' , '_sg' , '_datetime' , '_unix' , '_idn' , '_dt' , '_period' , '_is_monoton' , 'parent' , '_shape' , '_unix' , '_period' ) parent instance-attribute parent = parent unix property writable unix : NDArray [ float_ ] tline in unix idn property idn return id number. tstart property tstart : float Start time. tend property tend : float End time. tstart_iso property tstart_iso : datetime64 Start time. tend_iso property tend_iso : datetime64 End time. iso property iso : NDArray [ datetime64 ] Array of iso formatted strings. Naive, but in local tz. datetime property datetime : NDArray [ object_ ] Array of datetime.datetime. appx_bytes property appx_bytes Estimated size of data [bytes]. Excludes tline. dt property dt delta t period property period : float apprx period. nsamples property nsamples nsamples is_monotonic_increasing property is_monotonic_increasing Return true if monotonic increasing. Functions __init__ __init__ ( data : TLine | npt . NDArray [ np . object_ ] | npt . NDArray [ np . number ] | npt . NDArray [ np . datetime64 ] | datetime | list = None , tstart : float | datetime = None , tend : float | datetime = None , nsamples : int | tuple [ int ] = None , period : float = None , sg_coef : SgCoef = None , parent : TLineCollection = None ) calc_idn calc_idn () Calculate hash for IDN. __getitem__ __getitem__ ( ind : int | npt . NDArray [ np . int_ | np . bool_ ] | slice ) Index tline. __len__ __len__ () -> int Length of timeline. __repr__ __repr__ () -> str Return string representation. __str__ __str__ () -> str Return readable string. __eq__ __eq__ ( other ) -> bool Check equality. append_to_new append_to_new ( sig : Sig ) Append timeline from sig to tline. Returns new timeline. append_inplace append_inplace ( sig : Sig ) Append to tline in place. Dangerous if shared in a Frame. index_at_time index_at_time ( time : float | datetime ) -> int Get the index of the first tstamp >= time. sort sort () Sort tline. clear_cache clear_cache () Clear the cached values. savgol_coef savgol_coef ( sample_to_index : TLine , n_ord : int , n_win_orig : int , n_dot : int = 0 ) Calculate Savitzky Golay coeficients. TLineCollection Collection of timelines for Frame. Parameters: frame ( Frame ) \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( str | list [ str ] , default: None ) \u2013 required with tlines. If tlines is a list, must be equal length. If single tlines, can be a list. Attributes tlines instance-attribute tlines : dict [ int , TLine ] = {} idns instance-attribute idns : dict [ str , int ] = {} sigs instance-attribute sigs : dict [ int , list [ str ]] = {} frame instance-attribute frame = frame tstart property tstart Earliest tstart in collection. tend property tend Latest tend in collection. tstart_iso property tstart_iso Earliest start time in iso. tend_iso property tend_iso Latest end time in iso. n_tlines property n_tlines Number of tlines in collection. nsamples property nsamples Number of samples in collection. Functions __init__ __init__ ( frame : Frame , tlines : TLine | list [ TLine ] = None , signames : str | list [ str ] = None ) -> None append append ( frameorsig : Sig | Frame = None , tlines : TLine | list [ TLine ] = None , signames : list [ str ] | list [ list [ str ]] = None ) -> TLine Append tline to collection. Parameters: frame \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( list [ str ] | list [ list [ str ]] , default: None ) \u2013 required with tlines. Must be equal length list of lists of signames. Returns: CCGTimeline \u2013 check_sg check_sg ( tline : TLine ) Check for existing _sg coef. get_fastest get_fastest () Return the approximate fastest tline from coll. remove remove ( signame ) Remove timeline for signame from collection. If other signals still use it, it will simply remove the reference. replace replace ( old_tline : int | TLine , new_tline : TLine ) Replace the old_tline with new_tline in place. add_to_sigs add_to_sigs ( tline_idn : int , signame : str | list [ str ]) Add signal name to list. get_apprx_bytes get_apprx_bytes ( tline : TLine ) Gets the approximate size of the tline and its associated signals. Parameters: tline ( TLine ) \u2013 tline to get size for. Returns: Cumulative Bytes of tline and the signals associated with it. \u2013 __getitem__ __getitem__ ( index : str | int ) -> TLine __repr__ __repr__ () -> str Return string repr. __str__ __str__ () String rep. __eq__ __eq__ ( other ) -> bool Check equality. __contains__ __contains__ ( other ) -> bool SigEnum Enumeration definition for CCGSig. Parameters: definition ( dict ) \u2013 Dictionary of conversion values. \"\" is a special key, default for unmatched values if missing, np.nan will be used. Example enumdef = {'v1':1,'v2':2,'':0,} data = np.array(['v1','v2','v3']) testenum = SigEnum(definition=enumdef) testenum.data_to_enum(data) Attributes definition instance-attribute definition = definition Functions __init__ __init__ ( definition : dict ) data_to_enum data_to_enum ( data : npt . NDArray ) Convert base data to enumerated type. enum_to_data enum_to_data ( enum : npt . NDArray ) Convert enumerated data back to base data. SgCoef Store Savitzky Golay coeficients. Attributes __slots__ class-attribute instance-attribute __slots__ = ( 'orig_index' , 'sample_to_index' , 'n_win_orig' , 'n_ord' , 'conv' , 'uniqinvs' , 'n_uniq' , 'inds' ) orig_index instance-attribute orig_index = orig_index sample_to_index instance-attribute sample_to_index = sample_to_index n_win_orig instance-attribute n_win_orig = n_win_orig n_ord instance-attribute n_ord = n_ord conv instance-attribute conv = conv uniqinvs instance-attribute uniqinvs = uniqinvs n_uniq instance-attribute n_uniq = n_uniq inds instance-attribute inds = inds Functions __init__ __init__ ( orig_index : int = None , sample_to_index : int = None , n_win_orig : int = None , n_ord : int = None , conv : npt . NDArray = None , uniqinvs : npt . NDArray = None , n_uniq : int = None , inds : npt . NDArray = None ) clear clear () Clear SgCoef. Functions get_math_tline get_math_tline ( sig1 : Sig , sig2 : Sig | npt . NDArray | float | int ) returns timeline for math. sig1.parent.math_tline if it exits, or fastest. check_overlap check_overlap ( sig1 : Sig | TLine , sig2 : Sig | TLine , interweave_tlines : bool )","title":"Data"},{"location":"data/#ccg.data.tsdata-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.SIG_ATTRS","text":"SIG_ATTRS = { 'data' , 'unit' , 'interp_method' , 'parent' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'data_range' }","title":"SIG_ATTRS"},{"location":"data/#ccg.data.tsdata-classes","text":"","title":"Classes"},{"location":"data/#ccg.data.tsdata.Frame","text":"Collection of Time Series data. Parameters: data ( Sig | list [ Sig ] | None , default: None ) \u2013 TS Data, by default None. References to Sig will be broken. name ( str | None , default: None ) \u2013 Frame name, by default None math_tline ( TLine | None , default: None ) \u2013 TLine for Frame wide math, by default None Attributes: sigs ( dict [ str , Sig ] ) \u2013 dictionary of Sigs tlines ( TLineCollection ) \u2013 Collection of timelines, referenced by Sigs name ( str ) \u2013 Frame Name nsigs ( int ) \u2013 nsamples ( int ) \u2013 tend ( float | None ) \u2013 tstart ( float | None ) \u2013 tline ( TLine | None ) \u2013","title":"Frame"},{"location":"data/#ccg.data.tsdata.Frame-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.Frame.CUTOFF","text":"CUTOFF = 0.5","title":"CUTOFF"},{"location":"data/#ccg.data.tsdata.Frame.sigs","text":"sigs : dict [ str , Sig ] = {}","title":"sigs"},{"location":"data/#ccg.data.tsdata.Frame.tlines","text":"tlines = TLineCollection ( self )","title":"tlines"},{"location":"data/#ccg.data.tsdata.Frame.name","text":"name = name","title":"name"},{"location":"data/#ccg.data.tsdata.Frame.math_tline","text":"math_tline = math_tline","title":"math_tline"},{"location":"data/#ccg.data.tsdata.Frame.nsigs","text":"nsigs : int Number of Sigs in collection.","title":"nsigs"},{"location":"data/#ccg.data.tsdata.Frame.nsamples","text":"nsamples : int Cumulative samples (counting unique timelines as well).","title":"nsamples"},{"location":"data/#ccg.data.tsdata.Frame.tend","text":"tend : float | None Latest end time from TLine collection. Returns: float \u2013 Time in unix.","title":"tend"},{"location":"data/#ccg.data.tsdata.Frame.tstart","text":"tstart : float | None Earliest start time from TLine collection. Returns: float \u2013 Time in unix.","title":"tstart"},{"location":"data/#ccg.data.tsdata.Frame.tend_iso","text":"tend_iso : NDArray [ datetime64 ] Latest end time from TLine collection. Returns: float \u2013 Time in iso.","title":"tend_iso"},{"location":"data/#ccg.data.tsdata.Frame.tstart_iso","text":"tstart_iso Earliest start time from TLine collection. Returns: float \u2013 Time in iso.","title":"tstart_iso"},{"location":"data/#ccg.data.tsdata.Frame.tline","text":"tline : TLine | None If frame has only one tline, return it.","title":"tline"},{"location":"data/#ccg.data.tsdata.Frame-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.Frame.__init__","text":"__init__ ( data : Sig | list [ Sig ] | None = None , name : str | None = None , math_tline : TLine | None = None ) -> None","title":"__init__"},{"location":"data/#ccg.data.tsdata.Frame.resample","text":"resample ( sample_to : TLine , sigs : str | list [ str ] | None = None , inplace : bool | None = False , prefix : str | None = None , suffix : str | None = None , ** kwargs ) Resample Frame to a sample_to TLine. Parameters: sample_to ( TLine ) \u2013 TLine to resample to sigs ( str | list [ str ] | None , default: None ) \u2013 list of sigs to resample, full frame if None, by default None inplace ( bool | None , default: False ) \u2013 if True, will resample signals and append (id prefix or suffix is not None) or replace inplace. By default False prefix ( str | None , default: None ) \u2013 prefix to signame, by default None suffix ( str | None , default: None ) \u2013 suffix to signame, by default None **kwargs \u2013 Additional arguments passed to Sig.resample() Returns: Frame \u2013 Returns Self if inplace, else a new Frame","title":"resample"},{"location":"data/#ccg.data.tsdata.Frame.append","text":"append ( item : Sig | Frame | list [ Sig ], append_existing_signals : bool = False , interweave_tlines : bool = False ) Append to CCG Frame in place.","title":"append"},{"location":"data/#ccg.data.tsdata.Frame.sort","text":"sort ( remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signals by timeline for monoton increasing.","title":"sort"},{"location":"data/#ccg.data.tsdata.Frame.clear","text":"clear () Clears frame in place.","title":"clear"},{"location":"data/#ccg.data.tsdata.Frame.clean_names","text":"clean_names () Cleans signal names.","title":"clean_names"},{"location":"data/#ccg.data.tsdata.Frame.remove","text":"remove ( signames : str | list [ str ]) Removes sigs from frame.","title":"remove"},{"location":"data/#ccg.data.tsdata.Frame.plot","text":"plot () Plot data frame.","title":"plot"},{"location":"data/#ccg.data.tsdata.Frame.valid","text":"valid ( gatecoll : GateColl , tline : TLine | None = None ) -> Frame Returns a new Frame, invalid data replaced with nan. calc'd on tline or combined TLine if None Parameters: gatecoll ( GateColl ) \u2013 Collection of gating conditions tline ( TLine | None , default: None ) \u2013 TLine to calculate validity on, by default None Returns: Frame \u2013 New instance of Frame","title":"valid"},{"location":"data/#ccg.data.tsdata.Frame.from_excel","text":"from_excel ( filename : str | Path , tline_col : int | str = None , signame_row : int = None , signame_regex : str = None , filedata : BytesIO | StringIO | bytes = None , sigunit_row : int = None , sigdata_row : int = None ) -> Frame Generate frame from excel file. Parameters: filename ( str | Path ) \u2013 tline_col ( int | str , default: None ) \u2013 Column to use for an index signame_row ( int , default: None ) \u2013 Row with names to parse with _regex signame_regex ( str , default: None ) \u2013 regex string to parse signal names. Use named groups for parameters to pass into Sig instatiation, for example name, units, etc. example here: https://regex101.com/r/bfBrdf/6 filedata ( BytesIO | StringIO | bytes , default: None ) \u2013 string or bytes io. filename will only be used for ext, name, etc.","title":"from_excel"},{"location":"data/#ccg.data.tsdata.Frame.read_filedata","text":"read_filedata ( filename : Path , filedata : BytesIO | StringIO | bytes | None = None ) Reads file data for building frame from file","title":"read_filedata"},{"location":"data/#ccg.data.tsdata.Frame.__getattr__","text":"__getattr__ ( signame : str ) -> Sig Provides dot notation access to Sigs if their names conform to dot notation. Parameters: signame ( str ) \u2013 Must conform to dot notation (no spaces or special characters, starts with non numeric char, etc.) Returns: Sig \u2013 Reference to Sig in Self","title":"__getattr__"},{"location":"data/#ccg.data.tsdata.Frame.__getitem__","text":"__getitem__ ( index : Frame | list [ str ] | set [ str ] | tuple [ str ] | str | slice ) -> Frame | Sig Frame item getter. Parameters: index ( Frame | list [ str ] | slice | set [ str ] | str ) \u2013 Frame, list of Sig names, slice of Returns: Frame | Sig \u2013 New instance of Frame if index is Frame, list[str], slice. Reference to the Sig if str is a sig name. Examples: >>>TEST_LIST = [1.0, 2.0, 3.0] >>>TEST_ARR = np.array(TEST_LIST) >>>TEST_TIME = [0.0, 1.0, 2.0] >>>TEST_TLINE = TLine(TEST_TIME) >>>TEST_SIG = Sig(data=TEST_ARR, tline=TEST_TLINE, name=\"TestSig\") >>>assert frm[\"TestSig\"] == TEST_SIG # The reference to TEST_SIG was broken when appended to frm >>>assert frm[\"TestSig\"] is frm.sigs[\"TestSig\"] # The reference is preserved to the Sig in frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] is not frm # The reference is broken to frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] == frm >>>slicedfrm = frm[0:1.1] # sliced in time, with no step there is no resample >>>assert slicedfrm.tstart == 0.0 >>>assert slicedfrm.tend == 1.0 >>>assert slicedfrm.TestSig.nsamples == 2 # note 2 samples since no step was defined in slice >>>sliced_w_resample = frm[0:1.1:0.1] # Sliced in time, resamples to slice since step was defined. >>>assert sliced_w_resample.tstart == 0.0 >>>assert sliced_w_resample.tend == 1.0 >>>assert sliced_w_resample.TestSig.nsamples == 11 # note 2 samples since no step was defined in slice","title":"__getitem__"},{"location":"data/#ccg.data.tsdata.Frame.check_for_alt","text":"check_for_alt ( index ) Check for alternate name in case of missing dot notation","title":"check_for_alt"},{"location":"data/#ccg.data.tsdata.Frame.__contains__","text":"__contains__ ( key ) Checks if key is a signame in frame","title":"__contains__"},{"location":"data/#ccg.data.tsdata.Frame.subset","text":"subset ( index : slice , sigs : list [ str ] = None ) Get a subset of frame. Allows slicing by signals and in timeline.","title":"subset"},{"location":"data/#ccg.data.tsdata.Frame.__iter__","text":"__iter__ () Iterate.","title":"__iter__"},{"location":"data/#ccg.data.tsdata.Frame.__repr__","text":"__repr__ () -> str Return repr string.","title":"__repr__"},{"location":"data/#ccg.data.tsdata.Frame.__eq__","text":"__eq__ ( other : Self ) -> bool Check equality.","title":"__eq__"},{"location":"data/#ccg.data.tsdata.Sig","text":"CCG Sig class. Contains signal data and timeline. Parameters: data ( Sig | NDArray | list | None , default: None ) \u2013 Data source for the signal. tline ( TLine | None , default: None ) \u2013 Timeline instance for signal. Must be same length as data. name ( str | None , default: None ) \u2013 Signal name, must be unique in a Frame . unit ( str | None , default: None ) \u2013 Optional unit. interp_method ( InterpMethod | None , default: None ) \u2013 interpolation method for signal. parent ( Frame | None , default: None ) \u2013 Reference to the 'Frame' if this is in a frame. connect_gaps ( bool | None , default: None ) \u2013 Option for plotting using Plot data_enum ( SigEnum | None , default: None ) \u2013 Enumeration definition to alias values, used for plotting string data. data_range ( list [ float ] | None , default: None ) \u2013 Used for plot scaling. **kwargs \u2013 Argument for inserting unknown attributes.","title":"Sig"},{"location":"data/#ccg.data.tsdata.Sig-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.Sig.parent","text":"parent = parent","title":"parent"},{"location":"data/#ccg.data.tsdata.Sig.connect_gaps","text":"connect_gaps = connect_gaps","title":"connect_gaps"},{"location":"data/#ccg.data.tsdata.Sig.data_enum","text":"data_enum = data_enum","title":"data_enum"},{"location":"data/#ccg.data.tsdata.Sig.base_data","text":"base_data = None","title":"base_data"},{"location":"data/#ccg.data.tsdata.Sig.interp_method","text":"interp_method = None","title":"interp_method"},{"location":"data/#ccg.data.tsdata.Sig.tline","text":"tline = tline","title":"tline"},{"location":"data/#ccg.data.tsdata.Sig.unit","text":"unit = unit","title":"unit"},{"location":"data/#ccg.data.tsdata.Sig.data_range","text":"data_range = data_range","title":"data_range"},{"location":"data/#ccg.data.tsdata.Sig.name","text":"name : str Return signal name.","title":"name"},{"location":"data/#ccg.data.tsdata.Sig.data","text":"data : NDArray data getter","title":"data"},{"location":"data/#ccg.data.tsdata.Sig.max","text":"max : NBitBase | None Max value.","title":"max"},{"location":"data/#ccg.data.tsdata.Sig.min","text":"min : NBitBase | None Min value.","title":"min"},{"location":"data/#ccg.data.tsdata.Sig.nsamples","text":"nsamples","title":"nsamples"},{"location":"data/#ccg.data.tsdata.Sig.appx_bytes","text":"appx_bytes Estimated size of data [bytes]. Excludes tline.","title":"appx_bytes"},{"location":"data/#ccg.data.tsdata.Sig.tstart","text":"tstart Start if tline.","title":"tstart"},{"location":"data/#ccg.data.tsdata.Sig.tend","text":"tend End of tline.","title":"tend"},{"location":"data/#ccg.data.tsdata.Sig.tstart_iso","text":"tstart_iso Start if tline.","title":"tstart_iso"},{"location":"data/#ccg.data.tsdata.Sig.tend_iso","text":"tend_iso End of tline.","title":"tend_iso"},{"location":"data/#ccg.data.tsdata.Sig.period","text":"period apprx period.","title":"period"},{"location":"data/#ccg.data.tsdata.Sig-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.Sig.__init__","text":"__init__ ( data : Sig | npt . NDArray | list | None = None , tline : TLine | None = None , name : str | None = None , unit : str | None = None , interp_method : InterpMethod | None = None , parent : Frame | None = None , connect_gaps : bool | None = None , data_enum : SigEnum | None = None , nsamples : int | None = None , dtype : npt . DTypeLike = None , data_range : list [ float ] | None = None , ** kwargs ) -> None","title":"__init__"},{"location":"data/#ccg.data.tsdata.Sig.calc_idn","text":"calc_idn () Calculate hash for IDN.","title":"calc_idn"},{"location":"data/#ccg.data.tsdata.Sig.append","text":"append ( sig : Sig , interweave_tlines = False , remove_duplicates = False ) Append sig to signal.","title":"append"},{"location":"data/#ccg.data.tsdata.Sig.convert_units","text":"convert_units ( unit : str ) -> Sig Convert units in place","title":"convert_units"},{"location":"data/#ccg.data.tsdata.Sig.as_unit","text":"as_unit ( unit : str ) -> Sig return new sig converted to unit","title":"as_unit"},{"location":"data/#ccg.data.tsdata.Sig.sort_tline","text":"sort_tline ( inplace = True , remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signal by timeline. Parameters: inplace \u2013 Sorts signal in place, returns None. remove_duplicates \u2013 Will remove duplicate timestamps if signal is also duplicated. Returns: Sig \u2013 self if inplace=True .","title":"sort_tline"},{"location":"data/#ccg.data.tsdata.Sig.plot_prep","text":"plot_prep () -> Sig Prepare for plotting. Sorts tline and removes duplicates. Inserts NaNs in gaps if connect_gaps=False | None . Applies enum if it exists.","title":"plot_prep"},{"location":"data/#ccg.data.tsdata.Sig.interp","text":"interp ( points : npt . NDArray | TLine , extrapolate : bool = False ) -> Sig Interpolate signal to points.","title":"interp"},{"location":"data/#ccg.data.tsdata.Sig.resample","text":"resample ( sample_to : TLine , n_win : int = None , n_ord : int = None , gap_fraction : float = None , interp_gaps = False ) -> Sig Resample with Savitzky Golay filter. Parameters: sample_to ( TLine ) \u2013 TLine to resample to n_win ( int , default: None ) \u2013 window size, should be odd. Is relative to the sample_to index n_ord ( int , default: None ) \u2013 order of the fit gap_fraction ( float , default: None ) \u2013 size of a gap relative to the window size to interpolate between Returns: New resampled Sig \u2013","title":"resample"},{"location":"data/#ccg.data.tsdata.Sig.dot","text":"dot ( n_dot : int = 1 , n_win : int = 5 , n_ord : int = 3 ) Calculate Derivative of signal. Returns new sig.","title":"dot"},{"location":"data/#ccg.data.tsdata.Sig.valid","text":"valid ( gatecoll : GateColl , frame : Frame = None ) Return new signal with invalid data replaced with nan's","title":"valid"},{"location":"data/#ccg.data.tsdata.Sig.__len__","text":"__len__ () -> int","title":"__len__"},{"location":"data/#ccg.data.tsdata.Sig.__repr__","text":"__repr__ () -> str Return string representation.","title":"__repr__"},{"location":"data/#ccg.data.tsdata.Sig.__str__","text":"__str__ () -> str Return readable string.","title":"__str__"},{"location":"data/#ccg.data.tsdata.Sig.__add__","text":"__add__ ( other ) add, resamples to parent.math_tline if exists. returns Sig.","title":"__add__"},{"location":"data/#ccg.data.tsdata.Sig.__sub__","text":"__sub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig.","title":"__sub__"},{"location":"data/#ccg.data.tsdata.Sig.__radd__","text":"__radd__ ( other ) add, resamples to parent.math_tline if exists. returns Sig.","title":"__radd__"},{"location":"data/#ccg.data.tsdata.Sig.__rsub__","text":"__rsub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig.","title":"__rsub__"},{"location":"data/#ccg.data.tsdata.Sig.__mul__","text":"__mul__ ( other ) multiply(elementwise), resamples to parent.math_tline if exists. returns Sig.","title":"__mul__"},{"location":"data/#ccg.data.tsdata.Sig.__truediv__","text":"__truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Sig.","title":"__truediv__"},{"location":"data/#ccg.data.tsdata.Sig.__pow__","text":"__pow__ ( other ) power, resamples to parent.math_tline if exists. returns Sig.","title":"__pow__"},{"location":"data/#ccg.data.tsdata.Sig.__abs__","text":"__abs__ () abs","title":"__abs__"},{"location":"data/#ccg.data.tsdata.Sig.__neg__","text":"__neg__ () neg","title":"__neg__"},{"location":"data/#ccg.data.tsdata.Sig.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"data/#ccg.data.tsdata.Sig.__getitem__","text":"__getitem__ ( index : int | list [ int ] | slice | npt . NDArray ) Get item of Sig.","title":"__getitem__"},{"location":"data/#ccg.data.tsdata.Sig.__setitem__","text":"__setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray | str ) Set item","title":"__setitem__"},{"location":"data/#ccg.data.tsdata.Sig.__iter__","text":"__iter__ () Iterate.","title":"__iter__"},{"location":"data/#ccg.data.tsdata.Sig.__next__","text":"__next__ () Next.","title":"__next__"},{"location":"data/#ccg.data.tsdata.Sig.__deepcopy__","text":"__deepcopy__ ( memo ) Deepcopy of a CCGSig. Referenced frame is removed.","title":"__deepcopy__"},{"location":"data/#ccg.data.tsdata.TLine","text":"CCG Time Line.","title":"TLine"},{"location":"data/#ccg.data.tsdata.TLine-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.TLine.__slots__","text":"__slots__ = ( '_iso' , '_sg' , '_datetime' , '_unix' , '_idn' , '_dt' , '_period' , '_is_monoton' , 'parent' , '_shape' , '_unix' , '_period' )","title":"__slots__"},{"location":"data/#ccg.data.tsdata.TLine.parent","text":"parent = parent","title":"parent"},{"location":"data/#ccg.data.tsdata.TLine.unix","text":"unix : NDArray [ float_ ] tline in unix","title":"unix"},{"location":"data/#ccg.data.tsdata.TLine.idn","text":"idn return id number.","title":"idn"},{"location":"data/#ccg.data.tsdata.TLine.tstart","text":"tstart : float Start time.","title":"tstart"},{"location":"data/#ccg.data.tsdata.TLine.tend","text":"tend : float End time.","title":"tend"},{"location":"data/#ccg.data.tsdata.TLine.tstart_iso","text":"tstart_iso : datetime64 Start time.","title":"tstart_iso"},{"location":"data/#ccg.data.tsdata.TLine.tend_iso","text":"tend_iso : datetime64 End time.","title":"tend_iso"},{"location":"data/#ccg.data.tsdata.TLine.iso","text":"iso : NDArray [ datetime64 ] Array of iso formatted strings. Naive, but in local tz.","title":"iso"},{"location":"data/#ccg.data.tsdata.TLine.datetime","text":"datetime : NDArray [ object_ ] Array of datetime.datetime.","title":"datetime"},{"location":"data/#ccg.data.tsdata.TLine.appx_bytes","text":"appx_bytes Estimated size of data [bytes]. Excludes tline.","title":"appx_bytes"},{"location":"data/#ccg.data.tsdata.TLine.dt","text":"dt delta t","title":"dt"},{"location":"data/#ccg.data.tsdata.TLine.period","text":"period : float apprx period.","title":"period"},{"location":"data/#ccg.data.tsdata.TLine.nsamples","text":"nsamples nsamples","title":"nsamples"},{"location":"data/#ccg.data.tsdata.TLine.is_monotonic_increasing","text":"is_monotonic_increasing Return true if monotonic increasing.","title":"is_monotonic_increasing"},{"location":"data/#ccg.data.tsdata.TLine-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.TLine.__init__","text":"__init__ ( data : TLine | npt . NDArray [ np . object_ ] | npt . NDArray [ np . number ] | npt . NDArray [ np . datetime64 ] | datetime | list = None , tstart : float | datetime = None , tend : float | datetime = None , nsamples : int | tuple [ int ] = None , period : float = None , sg_coef : SgCoef = None , parent : TLineCollection = None )","title":"__init__"},{"location":"data/#ccg.data.tsdata.TLine.calc_idn","text":"calc_idn () Calculate hash for IDN.","title":"calc_idn"},{"location":"data/#ccg.data.tsdata.TLine.__getitem__","text":"__getitem__ ( ind : int | npt . NDArray [ np . int_ | np . bool_ ] | slice ) Index tline.","title":"__getitem__"},{"location":"data/#ccg.data.tsdata.TLine.__len__","text":"__len__ () -> int Length of timeline.","title":"__len__"},{"location":"data/#ccg.data.tsdata.TLine.__repr__","text":"__repr__ () -> str Return string representation.","title":"__repr__"},{"location":"data/#ccg.data.tsdata.TLine.__str__","text":"__str__ () -> str Return readable string.","title":"__str__"},{"location":"data/#ccg.data.tsdata.TLine.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"data/#ccg.data.tsdata.TLine.append_to_new","text":"append_to_new ( sig : Sig ) Append timeline from sig to tline. Returns new timeline.","title":"append_to_new"},{"location":"data/#ccg.data.tsdata.TLine.append_inplace","text":"append_inplace ( sig : Sig ) Append to tline in place. Dangerous if shared in a Frame.","title":"append_inplace"},{"location":"data/#ccg.data.tsdata.TLine.index_at_time","text":"index_at_time ( time : float | datetime ) -> int Get the index of the first tstamp >= time.","title":"index_at_time"},{"location":"data/#ccg.data.tsdata.TLine.sort","text":"sort () Sort tline.","title":"sort"},{"location":"data/#ccg.data.tsdata.TLine.clear_cache","text":"clear_cache () Clear the cached values.","title":"clear_cache"},{"location":"data/#ccg.data.tsdata.TLine.savgol_coef","text":"savgol_coef ( sample_to_index : TLine , n_ord : int , n_win_orig : int , n_dot : int = 0 ) Calculate Savitzky Golay coeficients.","title":"savgol_coef"},{"location":"data/#ccg.data.tsdata.TLineCollection","text":"Collection of timelines for Frame. Parameters: frame ( Frame ) \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( str | list [ str ] , default: None ) \u2013 required with tlines. If tlines is a list, must be equal length. If single tlines, can be a list.","title":"TLineCollection"},{"location":"data/#ccg.data.tsdata.TLineCollection-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.TLineCollection.tlines","text":"tlines : dict [ int , TLine ] = {}","title":"tlines"},{"location":"data/#ccg.data.tsdata.TLineCollection.idns","text":"idns : dict [ str , int ] = {}","title":"idns"},{"location":"data/#ccg.data.tsdata.TLineCollection.sigs","text":"sigs : dict [ int , list [ str ]] = {}","title":"sigs"},{"location":"data/#ccg.data.tsdata.TLineCollection.frame","text":"frame = frame","title":"frame"},{"location":"data/#ccg.data.tsdata.TLineCollection.tstart","text":"tstart Earliest tstart in collection.","title":"tstart"},{"location":"data/#ccg.data.tsdata.TLineCollection.tend","text":"tend Latest tend in collection.","title":"tend"},{"location":"data/#ccg.data.tsdata.TLineCollection.tstart_iso","text":"tstart_iso Earliest start time in iso.","title":"tstart_iso"},{"location":"data/#ccg.data.tsdata.TLineCollection.tend_iso","text":"tend_iso Latest end time in iso.","title":"tend_iso"},{"location":"data/#ccg.data.tsdata.TLineCollection.n_tlines","text":"n_tlines Number of tlines in collection.","title":"n_tlines"},{"location":"data/#ccg.data.tsdata.TLineCollection.nsamples","text":"nsamples Number of samples in collection.","title":"nsamples"},{"location":"data/#ccg.data.tsdata.TLineCollection-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.TLineCollection.__init__","text":"__init__ ( frame : Frame , tlines : TLine | list [ TLine ] = None , signames : str | list [ str ] = None ) -> None","title":"__init__"},{"location":"data/#ccg.data.tsdata.TLineCollection.append","text":"append ( frameorsig : Sig | Frame = None , tlines : TLine | list [ TLine ] = None , signames : list [ str ] | list [ list [ str ]] = None ) -> TLine Append tline to collection. Parameters: frame \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( list [ str ] | list [ list [ str ]] , default: None ) \u2013 required with tlines. Must be equal length list of lists of signames. Returns: CCGTimeline \u2013","title":"append"},{"location":"data/#ccg.data.tsdata.TLineCollection.check_sg","text":"check_sg ( tline : TLine ) Check for existing _sg coef.","title":"check_sg"},{"location":"data/#ccg.data.tsdata.TLineCollection.get_fastest","text":"get_fastest () Return the approximate fastest tline from coll.","title":"get_fastest"},{"location":"data/#ccg.data.tsdata.TLineCollection.remove","text":"remove ( signame ) Remove timeline for signame from collection. If other signals still use it, it will simply remove the reference.","title":"remove"},{"location":"data/#ccg.data.tsdata.TLineCollection.replace","text":"replace ( old_tline : int | TLine , new_tline : TLine ) Replace the old_tline with new_tline in place.","title":"replace"},{"location":"data/#ccg.data.tsdata.TLineCollection.add_to_sigs","text":"add_to_sigs ( tline_idn : int , signame : str | list [ str ]) Add signal name to list.","title":"add_to_sigs"},{"location":"data/#ccg.data.tsdata.TLineCollection.get_apprx_bytes","text":"get_apprx_bytes ( tline : TLine ) Gets the approximate size of the tline and its associated signals. Parameters: tline ( TLine ) \u2013 tline to get size for. Returns: Cumulative Bytes of tline and the signals associated with it. \u2013","title":"get_apprx_bytes"},{"location":"data/#ccg.data.tsdata.TLineCollection.__getitem__","text":"__getitem__ ( index : str | int ) -> TLine","title":"__getitem__"},{"location":"data/#ccg.data.tsdata.TLineCollection.__repr__","text":"__repr__ () -> str Return string repr.","title":"__repr__"},{"location":"data/#ccg.data.tsdata.TLineCollection.__str__","text":"__str__ () String rep.","title":"__str__"},{"location":"data/#ccg.data.tsdata.TLineCollection.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"data/#ccg.data.tsdata.TLineCollection.__contains__","text":"__contains__ ( other ) -> bool","title":"__contains__"},{"location":"data/#ccg.data.tsdata.SigEnum","text":"Enumeration definition for CCGSig. Parameters: definition ( dict ) \u2013 Dictionary of conversion values. \"\" is a special key, default for unmatched values if missing, np.nan will be used. Example enumdef = {'v1':1,'v2':2,'':0,} data = np.array(['v1','v2','v3']) testenum = SigEnum(definition=enumdef) testenum.data_to_enum(data)","title":"SigEnum"},{"location":"data/#ccg.data.tsdata.SigEnum-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.SigEnum.definition","text":"definition = definition","title":"definition"},{"location":"data/#ccg.data.tsdata.SigEnum-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.SigEnum.__init__","text":"__init__ ( definition : dict )","title":"__init__"},{"location":"data/#ccg.data.tsdata.SigEnum.data_to_enum","text":"data_to_enum ( data : npt . NDArray ) Convert base data to enumerated type.","title":"data_to_enum"},{"location":"data/#ccg.data.tsdata.SigEnum.enum_to_data","text":"enum_to_data ( enum : npt . NDArray ) Convert enumerated data back to base data.","title":"enum_to_data"},{"location":"data/#ccg.data.tsdata.SgCoef","text":"Store Savitzky Golay coeficients.","title":"SgCoef"},{"location":"data/#ccg.data.tsdata.SgCoef-attributes","text":"","title":"Attributes"},{"location":"data/#ccg.data.tsdata.SgCoef.__slots__","text":"__slots__ = ( 'orig_index' , 'sample_to_index' , 'n_win_orig' , 'n_ord' , 'conv' , 'uniqinvs' , 'n_uniq' , 'inds' )","title":"__slots__"},{"location":"data/#ccg.data.tsdata.SgCoef.orig_index","text":"orig_index = orig_index","title":"orig_index"},{"location":"data/#ccg.data.tsdata.SgCoef.sample_to_index","text":"sample_to_index = sample_to_index","title":"sample_to_index"},{"location":"data/#ccg.data.tsdata.SgCoef.n_win_orig","text":"n_win_orig = n_win_orig","title":"n_win_orig"},{"location":"data/#ccg.data.tsdata.SgCoef.n_ord","text":"n_ord = n_ord","title":"n_ord"},{"location":"data/#ccg.data.tsdata.SgCoef.conv","text":"conv = conv","title":"conv"},{"location":"data/#ccg.data.tsdata.SgCoef.uniqinvs","text":"uniqinvs = uniqinvs","title":"uniqinvs"},{"location":"data/#ccg.data.tsdata.SgCoef.n_uniq","text":"n_uniq = n_uniq","title":"n_uniq"},{"location":"data/#ccg.data.tsdata.SgCoef.inds","text":"inds = inds","title":"inds"},{"location":"data/#ccg.data.tsdata.SgCoef-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.SgCoef.__init__","text":"__init__ ( orig_index : int = None , sample_to_index : int = None , n_win_orig : int = None , n_ord : int = None , conv : npt . NDArray = None , uniqinvs : npt . NDArray = None , n_uniq : int = None , inds : npt . NDArray = None )","title":"__init__"},{"location":"data/#ccg.data.tsdata.SgCoef.clear","text":"clear () Clear SgCoef.","title":"clear"},{"location":"data/#ccg.data.tsdata-functions","text":"","title":"Functions"},{"location":"data/#ccg.data.tsdata.get_math_tline","text":"get_math_tline ( sig1 : Sig , sig2 : Sig | npt . NDArray | float | int ) returns timeline for math. sig1.parent.math_tline if it exits, or fastest.","title":"get_math_tline"},{"location":"data/#ccg.data.tsdata.check_overlap","text":"check_overlap ( sig1 : Sig | TLine , sig2 : Sig | TLine , interweave_tlines : bool )","title":"check_overlap"},{"location":"reference/SUMMARY/","text":"ccg controllers aem link motec data alloc_data gating tbldata tsdata db mongo ui panel plot plot_themes plotgo web util","title":"SUMMARY"},{"location":"reference/ccg/","text":"CCG Package Imports: util, ScatterData, Tbl, Tbls, Frame, Sig, TLine, Plot, PlotConfig, GateCollAND, GateCollOR, GateCond, gatecoll_from_dict, gatecoll_from_file, gatecoll_to_dict, Classes Functions","title":"ccg"},{"location":"reference/ccg/#ccg-classes","text":"","title":"Classes"},{"location":"reference/ccg/#ccg-functions","text":"","title":"Functions"},{"location":"reference/ccg/util/","text":"CCG Utility functions. Attributes ZERO_DEPTH_BASES module-attribute ZERO_DEPTH_BASES = ( str , bytes , Number , range , bytearray ) COMPAT_TYPES module-attribute COMPAT_TYPES = [{ 'i' , 'u' , 'f' , 'O' }, { 'U' , 'S' , 'O' }, { 'b' , 'O' }] ENABLE_PROFILE module-attribute ENABLE_PROFILE = False UNIT_CONV module-attribute UNIT_CONV : dict [ str , dict [ str , tuple [ float , float ]]] = { 'unitless' : { '' : ( 1 , 0 ), 'none' : ( 1 , 0 )}, 'distance' : { 'm' : ( 1 , 0 ), 'cm' : ( 0.01 , 0 ), 'mm' : ( 0.001 , 0 ), 'km' : ( 1000 , 0 ), 'in' : ( 0.0254 , 0 ), 'ft' : ( 0.3048 , 0 ), 'mile' : ( 1609.34 , 0 )}, 'pressure' : { 'pa' : ( 1 , 0 ), 'hpa' : ( 100 , 0 ), 'mbar' : ( 100 , 0 ), 'kpa' : ( 1000 , 0 ), 'bar' : ( 100000.0 , 0 ), 'mpa' : ( 1000000.0 , 0 ), 'psi' : ( 6894.76 , 0 ), 'inhg' : ( 3386.39 , 0 ), 'mmhg' : ( 133.322 , 0 )}, 'angular_velocity' : { 'deg/s' : ( 1 , 0 ), 'rpm' : ( 6 , 0 ), 'rev/min' : ( 6 , 0 ), 'krpm' : ( 6000 , 0 )}, 'angle' : { 'deg' : ( 0.01745329 , 0 ), 'rad' : ( 1 , 0 ), 'dbtdc' : ( - 0.01745329 , 0 ), 'datdc' : ( 0.01745329 , 0 ), 'rev' : ( 1.570796 , 0 )}, 'velocity' : { 'm/s' : ( 1 , 0 ), 'mph' : ( 0.44704 , 0 ), 'kph' : ( 0.277778 , 0 )}, 'temperature' : { 'k' : ( 1 , 0 ), 'c' : ( 1 , 273.15 ), 'f' : ( 0.555556 , 459.67 ), '\u00b0k' : ( 1 , 0 ), '\u00b0c' : ( 1 , 273.15 ), '\u00b0f' : ( 0.555556 , 459.67 )}, 'ratio' : { 'ratio' : ( 1 , 0 ), 'percent' : ( 0.01 , 0 ), '%' : ( 0.01 , 0 ), '%trim' : ( 0.01 , 100 ), 'trim' : ( 1 , 1 ), 'la' : ( 1 , 0 )}, 'massflow' : { 'g/s' : ( 1 , 0 ), 'kg/s' : ( 1000 , 0 ), 'lb/hr' : ( 0.125998 , 0 )}} Classes InterpMethod Bases: str , Enum Interp methods enum. Attributes LINEAR class-attribute instance-attribute LINEAR = 'lin' ZOH class-attribute instance-attribute ZOH = 'zoh' NEAREST class-attribute instance-attribute NEAREST = 'near' Functions profile profile ( func ) Dummy for profile decorators. getsize getsize ( obj_0 ) Recursively iterate to sum size of object & members. iscompat iscompat ( dtype1 : npt . DTypeLike , dtype2 : npt . DTypeLike ) -> bool Return True if data types are compatible Parameters: dtype1 ( DTypeLike ) \u2013 dtype2 ( DTypeLike ) \u2013 Returns: bool \u2013 linearinterp linearinterp ( bps : list [ npt . NDArray ], data : npt . NDArray , points : npt . NDArray , extrapolate : bool = False ) -> npt . NDArray [ np . floating ] Nd Linear interpolation Parameters: bps ( list [ NDArray ] ) \u2013 List of arrays of breakpoints data ( NDArray ) \u2013 Data points ( NDArray ) \u2013 New breakpoints to interpolate to extrapolate ( bool , default: False ) \u2013 by default False Returns: NDArray [ floating ] \u2013 monotonic_increasing monotonic_increasing ( value : np . ndarray ) check if value is monotonic increasing hex_to_rgb hex_to_rgb ( hexstr : str ) Return rgb. s2lin s2lin ( col ) Linear from sRGB. lin2s lin2s ( col ) Linear to sRGB. shift_lightness shift_lightness ( hexstr : str , factor ) Shift lightness of color. lum lum ( color : str ) Luminance. rgb2val rgb2val ( color : str ) Return r, g, b values. max_contrast max_contrast ( testcolors : list [ str ] | str , col1 : str , col2 : str ) Choose col1 or col2 to maximize contrast with testcolor. table_colors table_colors ( data : npt . NDArray , colorscale = 'Turbo' , colorscale_center = None , light_font = '#e5e5e5' , dark_font = '#434343' ) Calculate colors for data table. Returns (colors, font_colors). calculate_colors calculate_colors ( data : npt . NDArray , colorscale = 'Turbo' , colorscale_center = None ) -> list Calculate colors for data table. calculate_font_colors calculate_font_colors ( colors : list , light_font = '#e5e5e5' , dark_font = '#434343' ) -> npt . NDArray Calculate font colors for data table. centered_range centered_range ( data : list | npt . NDArray , centerpoint : float ) Return centered range from 2 to 98th percentile rel_path rel_path ( filename : Path | str , rel_to : Path | str = None ) -> str Return string of relative path if possible, else return absolute path. unix_to_iso unix_to_iso ( unix : npt . NDArray [ np . floating ] | float ) -> npt . NDArray [ np . datetime64 ] convert unix timestamp to iso formatted string. In local TZ but naive. datetime_to_unix datetime_to_unix ( array : npt . NDArray [ np . datetime64 ]) -> npt . NDArray [ np . floating ] convert datetime64 to unix timestamp. In local TZ but naive. clean_time_str clean_time_str ( in_str : str | list [ str ] | npt . NDArray , date = datetime . now () . date () . isoformat ()) Clean strings for datetime.strptime np_time_2_seconds np_time_2_seconds ( time : npt . NDArray ) Convert np.datetime64 or np.timedelta64 to floating seconds. merge_dict merge_dict ( orig : dict | list , new : dict | list ) -> None Recursively merge new dict into orig. run_at async run_at ( tstart : datetime , coro : Coroutine , loop : asyncio . AbstractEventLoop , coro_args : dict | None = None , repeat_every : timedelta | None = None ) Run coroutine at tstart. wait_until async wait_until ( tstart : datetime ) Wait until tstart. clean_name clean_name ( name : str ) Clean name for frame or sig name. recursive_get recursive_get ( data : dict , fields : tuple ) Gets fields from dictionary from multiple depths. byte2str byte2str ( bytes_data : bytes ) -> str | bytes Converts bytes to string and drops trailing zeros array_to_list array_to_list ( data : Iterable ) Recursively converts arrays in dict to lists. find_unit find_unit ( unit : str | None ) -> tuple [ float , float , str ] Find unit conversion coef's Parameters: unit ( str | None ) \u2013 Returns: tuple [ float , float , str ] \u2013 Returns Gain, Offset, and Quantity Raises: NotImplementedError \u2013 If unit not in conversion definitions convert_units convert_units ( value : npt . NDArray | list , from_unit : str , to_unit : str ) Unit converter is_pandas is_pandas ( value ) Check if pandas dataframe, avoiding importing the module.","title":"util"},{"location":"reference/ccg/util/#ccg.util-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/util/#ccg.util.ZERO_DEPTH_BASES","text":"ZERO_DEPTH_BASES = ( str , bytes , Number , range , bytearray )","title":"ZERO_DEPTH_BASES"},{"location":"reference/ccg/util/#ccg.util.COMPAT_TYPES","text":"COMPAT_TYPES = [{ 'i' , 'u' , 'f' , 'O' }, { 'U' , 'S' , 'O' }, { 'b' , 'O' }]","title":"COMPAT_TYPES"},{"location":"reference/ccg/util/#ccg.util.ENABLE_PROFILE","text":"ENABLE_PROFILE = False","title":"ENABLE_PROFILE"},{"location":"reference/ccg/util/#ccg.util.UNIT_CONV","text":"UNIT_CONV : dict [ str , dict [ str , tuple [ float , float ]]] = { 'unitless' : { '' : ( 1 , 0 ), 'none' : ( 1 , 0 )}, 'distance' : { 'm' : ( 1 , 0 ), 'cm' : ( 0.01 , 0 ), 'mm' : ( 0.001 , 0 ), 'km' : ( 1000 , 0 ), 'in' : ( 0.0254 , 0 ), 'ft' : ( 0.3048 , 0 ), 'mile' : ( 1609.34 , 0 )}, 'pressure' : { 'pa' : ( 1 , 0 ), 'hpa' : ( 100 , 0 ), 'mbar' : ( 100 , 0 ), 'kpa' : ( 1000 , 0 ), 'bar' : ( 100000.0 , 0 ), 'mpa' : ( 1000000.0 , 0 ), 'psi' : ( 6894.76 , 0 ), 'inhg' : ( 3386.39 , 0 ), 'mmhg' : ( 133.322 , 0 )}, 'angular_velocity' : { 'deg/s' : ( 1 , 0 ), 'rpm' : ( 6 , 0 ), 'rev/min' : ( 6 , 0 ), 'krpm' : ( 6000 , 0 )}, 'angle' : { 'deg' : ( 0.01745329 , 0 ), 'rad' : ( 1 , 0 ), 'dbtdc' : ( - 0.01745329 , 0 ), 'datdc' : ( 0.01745329 , 0 ), 'rev' : ( 1.570796 , 0 )}, 'velocity' : { 'm/s' : ( 1 , 0 ), 'mph' : ( 0.44704 , 0 ), 'kph' : ( 0.277778 , 0 )}, 'temperature' : { 'k' : ( 1 , 0 ), 'c' : ( 1 , 273.15 ), 'f' : ( 0.555556 , 459.67 ), '\u00b0k' : ( 1 , 0 ), '\u00b0c' : ( 1 , 273.15 ), '\u00b0f' : ( 0.555556 , 459.67 )}, 'ratio' : { 'ratio' : ( 1 , 0 ), 'percent' : ( 0.01 , 0 ), '%' : ( 0.01 , 0 ), '%trim' : ( 0.01 , 100 ), 'trim' : ( 1 , 1 ), 'la' : ( 1 , 0 )}, 'massflow' : { 'g/s' : ( 1 , 0 ), 'kg/s' : ( 1000 , 0 ), 'lb/hr' : ( 0.125998 , 0 )}}","title":"UNIT_CONV"},{"location":"reference/ccg/util/#ccg.util-classes","text":"","title":"Classes"},{"location":"reference/ccg/util/#ccg.util.InterpMethod","text":"Bases: str , Enum Interp methods enum.","title":"InterpMethod"},{"location":"reference/ccg/util/#ccg.util.InterpMethod-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/util/#ccg.util.InterpMethod.LINEAR","text":"LINEAR = 'lin'","title":"LINEAR"},{"location":"reference/ccg/util/#ccg.util.InterpMethod.ZOH","text":"ZOH = 'zoh'","title":"ZOH"},{"location":"reference/ccg/util/#ccg.util.InterpMethod.NEAREST","text":"NEAREST = 'near'","title":"NEAREST"},{"location":"reference/ccg/util/#ccg.util-functions","text":"","title":"Functions"},{"location":"reference/ccg/util/#ccg.util.profile","text":"profile ( func ) Dummy for profile decorators.","title":"profile"},{"location":"reference/ccg/util/#ccg.util.getsize","text":"getsize ( obj_0 ) Recursively iterate to sum size of object & members.","title":"getsize"},{"location":"reference/ccg/util/#ccg.util.iscompat","text":"iscompat ( dtype1 : npt . DTypeLike , dtype2 : npt . DTypeLike ) -> bool Return True if data types are compatible Parameters: dtype1 ( DTypeLike ) \u2013 dtype2 ( DTypeLike ) \u2013 Returns: bool \u2013","title":"iscompat"},{"location":"reference/ccg/util/#ccg.util.linearinterp","text":"linearinterp ( bps : list [ npt . NDArray ], data : npt . NDArray , points : npt . NDArray , extrapolate : bool = False ) -> npt . NDArray [ np . floating ] Nd Linear interpolation Parameters: bps ( list [ NDArray ] ) \u2013 List of arrays of breakpoints data ( NDArray ) \u2013 Data points ( NDArray ) \u2013 New breakpoints to interpolate to extrapolate ( bool , default: False ) \u2013 by default False Returns: NDArray [ floating ] \u2013","title":"linearinterp"},{"location":"reference/ccg/util/#ccg.util.monotonic_increasing","text":"monotonic_increasing ( value : np . ndarray ) check if value is monotonic increasing","title":"monotonic_increasing"},{"location":"reference/ccg/util/#ccg.util.hex_to_rgb","text":"hex_to_rgb ( hexstr : str ) Return rgb.","title":"hex_to_rgb"},{"location":"reference/ccg/util/#ccg.util.s2lin","text":"s2lin ( col ) Linear from sRGB.","title":"s2lin"},{"location":"reference/ccg/util/#ccg.util.lin2s","text":"lin2s ( col ) Linear to sRGB.","title":"lin2s"},{"location":"reference/ccg/util/#ccg.util.shift_lightness","text":"shift_lightness ( hexstr : str , factor ) Shift lightness of color.","title":"shift_lightness"},{"location":"reference/ccg/util/#ccg.util.lum","text":"lum ( color : str ) Luminance.","title":"lum"},{"location":"reference/ccg/util/#ccg.util.rgb2val","text":"rgb2val ( color : str ) Return r, g, b values.","title":"rgb2val"},{"location":"reference/ccg/util/#ccg.util.max_contrast","text":"max_contrast ( testcolors : list [ str ] | str , col1 : str , col2 : str ) Choose col1 or col2 to maximize contrast with testcolor.","title":"max_contrast"},{"location":"reference/ccg/util/#ccg.util.table_colors","text":"table_colors ( data : npt . NDArray , colorscale = 'Turbo' , colorscale_center = None , light_font = '#e5e5e5' , dark_font = '#434343' ) Calculate colors for data table. Returns (colors, font_colors).","title":"table_colors"},{"location":"reference/ccg/util/#ccg.util.calculate_colors","text":"calculate_colors ( data : npt . NDArray , colorscale = 'Turbo' , colorscale_center = None ) -> list Calculate colors for data table.","title":"calculate_colors"},{"location":"reference/ccg/util/#ccg.util.calculate_font_colors","text":"calculate_font_colors ( colors : list , light_font = '#e5e5e5' , dark_font = '#434343' ) -> npt . NDArray Calculate font colors for data table.","title":"calculate_font_colors"},{"location":"reference/ccg/util/#ccg.util.centered_range","text":"centered_range ( data : list | npt . NDArray , centerpoint : float ) Return centered range from 2 to 98th percentile","title":"centered_range"},{"location":"reference/ccg/util/#ccg.util.rel_path","text":"rel_path ( filename : Path | str , rel_to : Path | str = None ) -> str Return string of relative path if possible, else return absolute path.","title":"rel_path"},{"location":"reference/ccg/util/#ccg.util.unix_to_iso","text":"unix_to_iso ( unix : npt . NDArray [ np . floating ] | float ) -> npt . NDArray [ np . datetime64 ] convert unix timestamp to iso formatted string. In local TZ but naive.","title":"unix_to_iso"},{"location":"reference/ccg/util/#ccg.util.datetime_to_unix","text":"datetime_to_unix ( array : npt . NDArray [ np . datetime64 ]) -> npt . NDArray [ np . floating ] convert datetime64 to unix timestamp. In local TZ but naive.","title":"datetime_to_unix"},{"location":"reference/ccg/util/#ccg.util.clean_time_str","text":"clean_time_str ( in_str : str | list [ str ] | npt . NDArray , date = datetime . now () . date () . isoformat ()) Clean strings for datetime.strptime","title":"clean_time_str"},{"location":"reference/ccg/util/#ccg.util.np_time_2_seconds","text":"np_time_2_seconds ( time : npt . NDArray ) Convert np.datetime64 or np.timedelta64 to floating seconds.","title":"np_time_2_seconds"},{"location":"reference/ccg/util/#ccg.util.merge_dict","text":"merge_dict ( orig : dict | list , new : dict | list ) -> None Recursively merge new dict into orig.","title":"merge_dict"},{"location":"reference/ccg/util/#ccg.util.run_at","text":"run_at ( tstart : datetime , coro : Coroutine , loop : asyncio . AbstractEventLoop , coro_args : dict | None = None , repeat_every : timedelta | None = None ) Run coroutine at tstart.","title":"run_at"},{"location":"reference/ccg/util/#ccg.util.wait_until","text":"wait_until ( tstart : datetime ) Wait until tstart.","title":"wait_until"},{"location":"reference/ccg/util/#ccg.util.clean_name","text":"clean_name ( name : str ) Clean name for frame or sig name.","title":"clean_name"},{"location":"reference/ccg/util/#ccg.util.recursive_get","text":"recursive_get ( data : dict , fields : tuple ) Gets fields from dictionary from multiple depths.","title":"recursive_get"},{"location":"reference/ccg/util/#ccg.util.byte2str","text":"byte2str ( bytes_data : bytes ) -> str | bytes Converts bytes to string and drops trailing zeros","title":"byte2str"},{"location":"reference/ccg/util/#ccg.util.array_to_list","text":"array_to_list ( data : Iterable ) Recursively converts arrays in dict to lists.","title":"array_to_list"},{"location":"reference/ccg/util/#ccg.util.find_unit","text":"find_unit ( unit : str | None ) -> tuple [ float , float , str ] Find unit conversion coef's Parameters: unit ( str | None ) \u2013 Returns: tuple [ float , float , str ] \u2013 Returns Gain, Offset, and Quantity Raises: NotImplementedError \u2013 If unit not in conversion definitions","title":"find_unit"},{"location":"reference/ccg/util/#ccg.util.convert_units","text":"convert_units ( value : npt . NDArray | list , from_unit : str , to_unit : str ) Unit converter","title":"convert_units"},{"location":"reference/ccg/util/#ccg.util.is_pandas","text":"is_pandas ( value ) Check if pandas dataframe, avoiding importing the module.","title":"is_pandas"},{"location":"reference/ccg/controllers/","text":"","title":"controllers"},{"location":"reference/ccg/controllers/aem/","text":"AEM Data Parsing Classes Functions seg_reader seg_reader ( file : BufferedReader , unpk_format : str , format_names : list [ str ], strt_loc : int = None , data : dict [ str , list ] = None ) -> Sig Read segment from binary file. chan_names chan_names ( file : BufferedReader , strt_loc : int ) Read chan names section sig_reader sig_reader ( file : BufferedReader , start_loc : int , sig_names : list [ str ], units : list [ str ] = None , data : Frame = None , tstart : float = 0 ) read signal data read_data read_data ( filenames : str | tuple [ str ] | list [ str ]) -> Frame Read and parse .ld file. read_cal read_cal ( filename : str ) -> Tbls Read .itssn file","title":"aem"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem-classes","text":"","title":"Classes"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem.seg_reader","text":"seg_reader ( file : BufferedReader , unpk_format : str , format_names : list [ str ], strt_loc : int = None , data : dict [ str , list ] = None ) -> Sig Read segment from binary file.","title":"seg_reader"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem.chan_names","text":"chan_names ( file : BufferedReader , strt_loc : int ) Read chan names section","title":"chan_names"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem.sig_reader","text":"sig_reader ( file : BufferedReader , start_loc : int , sig_names : list [ str ], units : list [ str ] = None , data : Frame = None , tstart : float = 0 ) read signal data","title":"sig_reader"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem.read_data","text":"read_data ( filenames : str | tuple [ str ] | list [ str ]) -> Frame Read and parse .ld file.","title":"read_data"},{"location":"reference/ccg/controllers/aem/#ccg.controllers.aem.read_cal","text":"read_cal ( filename : str ) -> Tbls Read .itssn file","title":"read_cal"},{"location":"reference/ccg/controllers/link/","text":"Functions and classes for working with Link ECU's. Classes FirmwareModel Bases: ABC Base class for M1 firmware model. Attributes reference_tables class-attribute instance-attribute reference_tables = {} fueling_tables class-attribute instance-attribute fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}} fueling_params class-attribute instance-attribute fueling_params = { 'Engine.Cylinders' : 8 } table_data instance-attribute table_data = None tabs instance-attribute tabs = CalDataTabs ( table_data ) warning_dialog instance-attribute warning_dialog = warning_dialog gate instance-attribute gate = None bank_gates instance-attribute bank_gates = [] resampled instance-attribute resampled = None slow_sig instance-attribute slow_sig : str slow_freq property slow_freq return freq of slow signal. n_cyl abstractmethod property n_cyl : int Returns num of cyls n_banks abstractmethod property n_banks : int Returns n_banks data property writable data data fueling_names property fueling_names return names of fueling tables param_names property param_names Return the names of the parameters Functions __init__ __init__ ( caldir : str | Path | None = None , data : str | Path | Frame | None = None , gate : GateColl | str | Path | None = None , warning_dialog : Callable | None = None ) read_gate read_gate ( filename : str | Path ) Read Gate File read_gate_async async read_gate_async ( filename : str | Path ) read_data read_data ( filename : str | Path ) Read data file read_cal read_cal ( dirname : str | Path | None ) Read the calibration data into table_data. read_cal_async async read_cal_async ( dirname : str | Path ) Async cal read Parameters: dirname ( str | Path ) \u2013 Dir of cal files convert_tables convert_tables () Convert tables using configurations in self.fueling_tables. write_cal write_cal ( dirname : Path , pars_to_write : list [ str ]) update_calcd_data abstractmethod update_calcd_data () Update calcs for fitting/plotting. update_scatter_data abstractmethod update_scatter_data () Update scatter data for fitting/plotting. G4xXtreme Bases: FirmwareModel Firmware model for LINK G4X Attributes reference_tables class-attribute instance-attribute reference_tables = {} fueling_tables class-attribute instance-attribute fueling_tables = { 'Fuel Table 1' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'MAP' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 1' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 2' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 3' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 1' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 160 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 2' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 3' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'AFR_Lambda Target' : { 'unit' : '' , 'prec' : 3 , 'range' : [ 0.6 , 2 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'MAP' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'E-Throttle 1 Target' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 0 }}}, 'IAT Fuel Trim' : { 'unit' : '%trim' , 'prec' : 2 , 'range' : [ - 30.0 , 30.0 ], 'axes' : { 'X' : { 'sig' : 'IAT' , 'unit' : '\u00b0C' , 'range' : [ 0 , 150 ], 'prec' : 1 }}}, 'Warm Up Enrichment' : { 'unit' : '%trim' , 'prec' : 2 , 'range' : [ - 30.0 , 30.0 ], 'axes' : { 'X' : { 'sig' : 'ECT' , 'unit' : '\u00b0C' , 'range' : [ - 50 , 200 ], 'prec' : 1 }}}, 'Turbo Speed' : { 'unit' : 'krpm' , 'prec' : 0 , 'range' : [ 0 , 200 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }, 'Y' : { 'sig' : 'pr_comp' , 'unit' : 'ratio' , 'range' : [ 0 , 3 ], 'prec' : 2 }}}, 'pr_comp' : { 'unit' : '' , 'prec' : 3 , 'range' : [ 0.0 , 4.0 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500.0 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Turbo Speed' , 'unit' : 'krpm' , 'range' : [ 0 , 300.0 ], 'prec' : 1 }}}, 'Throttle PR' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }, 'Y' : { 'sig' : 'pr_throttle' , 'unit' : 'ratio' , 'range' : [ 0 , 1 ], 'prec' : 2 }}}, 'maf_nom' : { 'unit' : 'g/s' , 'prec' : 1 , 'range' : [ 0 , 500 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_nom' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'maf_nom' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }}}, 'map_target_1' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_2' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_3' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_scaler' : { 'unit' : 'ratio' , 'prec' : 2 , 'range' : [ 0 , 3 ], 'axes' : { 'X' : { 'sig' : 'Active Boost Table' , 'unit' : '' , 'range' : [ 1 , 3 ], 'prec' : 0 }}}, 'nturbo_target_scaler' : { 'unit' : 'ratio' , 'prec' : 2 , 'range' : [ 0 , 3 ], 'axes' : { 'X' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'pamb_ref' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 50 , 150 ], 'axes' : {}}, 'nturbo_max' : { 'unit' : 'krpm' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : {}}} fueling_params class-attribute instance-attribute fueling_params = {} calcd_sigs class-attribute instance-attribute calcd_sigs = [ 'Fueling.Error.Total' , 'Fuel Table 1.Corrected' , 'Wastegate %DC 1.Corrected' , 'Wastegate %DC 2.Corrected' , 'Wastegate %DC 3.Corrected' , 'Boost Target 2.Corrected' , 'Boost Target 2.Corrected' , 'Boost Target 3.Corrected' , 'Throttle PR.Corrected' , 'Turbo Speed.Corrected' , 'IAT Fuel Trim.Corrected' , 'maf' , 'rho_air' , 'pr_comp' , 'pr_throttle' , 'maf_cor' , 'fmaf_cor' , 'maf' , 'maf_est_cor' ] slow_sig instance-attribute slow_sig = 'Engine Speed' n_cyl property n_cyl n_banks property n_banks displacement property displacement Functions __init__ __init__ ( caldir : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None ) check_substitute_sigs check_substitute_sigs () Try to substitute for some common missing sigs. check_sigs check_sigs () Check that required input sigs are present. update_calcd_data update_calcd_data ( _ = None ) Update calculations for fitting/plotting. update_scatter_data update_scatter_data () Update scatter data for fitting. normalize_cyl_trims normalize_cyl_trims () Functions read_data read_data ( filenames : str | tuple [ str ] | list [ str ]) -> Frame read_link_datafile read_link_datafile ( filename : str | Path ) -> Frame Reads a link formatted data file read_cals read_cals ( dirname : Path | str ) -> Tbls This function is deprecated. Use read_cals_async() instead. Parameters: dirname ( Path ) \u2013 The directory name where the calibration tables are located. Returns: Tbls \u2013 The calibration tables. Notes .. deprecated:: 1.0.0 Use read_cals_async() instead. read_cals_async async read_cals_async ( dirname : str | Path ) -> Tbls Read cal's async Parameters: dirname ( str | Path ) \u2013 Directory of cal files Returns: Tbls \u2013 Table data read_cal_xml_async async read_cal_xml_async ( caltbl : Path ) -> Tbl Read and parse a single cal XML file Parameters: caltbl ( str | Path ) \u2013 path to file Returns: Tbl \u2013 parsed Tbl write_cals write_cals ( dirname : Path , table_data : Tbls , param_names : list [ str ])","title":"link"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link-classes","text":"","title":"Classes"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel","text":"Bases: ABC Base class for M1 firmware model.","title":"FirmwareModel"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.reference_tables","text":"reference_tables = {}","title":"reference_tables"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.fueling_tables","text":"fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.fueling_params","text":"fueling_params = { 'Engine.Cylinders' : 8 }","title":"fueling_params"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.table_data","text":"table_data = None","title":"table_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.tabs","text":"tabs = CalDataTabs ( table_data )","title":"tabs"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.warning_dialog","text":"warning_dialog = warning_dialog","title":"warning_dialog"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.gate","text":"gate = None","title":"gate"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.bank_gates","text":"bank_gates = []","title":"bank_gates"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.resampled","text":"resampled = None","title":"resampled"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.slow_sig","text":"slow_sig : str","title":"slow_sig"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.slow_freq","text":"slow_freq return freq of slow signal.","title":"slow_freq"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.n_cyl","text":"n_cyl : int Returns num of cyls","title":"n_cyl"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.n_banks","text":"n_banks : int Returns n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.data","text":"data data","title":"data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.fueling_names","text":"fueling_names return names of fueling tables","title":"fueling_names"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.param_names","text":"param_names Return the names of the parameters","title":"param_names"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.__init__","text":"__init__ ( caldir : str | Path | None = None , data : str | Path | Frame | None = None , gate : GateColl | str | Path | None = None , warning_dialog : Callable | None = None )","title":"__init__"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.read_gate","text":"read_gate ( filename : str | Path ) Read Gate File","title":"read_gate"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.read_gate_async","text":"read_gate_async ( filename : str | Path )","title":"read_gate_async"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.read_data","text":"read_data ( filename : str | Path ) Read data file","title":"read_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.read_cal","text":"read_cal ( dirname : str | Path | None ) Read the calibration data into table_data.","title":"read_cal"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.read_cal_async","text":"read_cal_async ( dirname : str | Path ) Async cal read Parameters: dirname ( str | Path ) \u2013 Dir of cal files","title":"read_cal_async"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.convert_tables","text":"convert_tables () Convert tables using configurations in self.fueling_tables.","title":"convert_tables"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.write_cal","text":"write_cal ( dirname : Path , pars_to_write : list [ str ])","title":"write_cal"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.update_calcd_data","text":"update_calcd_data () Update calcs for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.FirmwareModel.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting/plotting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme","text":"Bases: FirmwareModel Firmware model for LINK G4X","title":"G4xXtreme"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.reference_tables","text":"reference_tables = {}","title":"reference_tables"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.fueling_tables","text":"fueling_tables = { 'Fuel Table 1' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'MAP' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 1' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 2' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Wastegate %DC 3' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'GP Pressure 2 - Pboost' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 1' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 160 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 2' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'Boost Target 3' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 100 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'AFR_Lambda Target' : { 'unit' : '' , 'prec' : 3 , 'range' : [ 0.6 , 2 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'MAP' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 0 }}}, 'E-Throttle 1 Target' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 0 }}}, 'IAT Fuel Trim' : { 'unit' : '%trim' , 'prec' : 2 , 'range' : [ - 30.0 , 30.0 ], 'axes' : { 'X' : { 'sig' : 'IAT' , 'unit' : '\u00b0C' , 'range' : [ 0 , 150 ], 'prec' : 1 }}}, 'Warm Up Enrichment' : { 'unit' : '%trim' , 'prec' : 2 , 'range' : [ - 30.0 , 30.0 ], 'axes' : { 'X' : { 'sig' : 'ECT' , 'unit' : '\u00b0C' , 'range' : [ - 50 , 200 ], 'prec' : 1 }}}, 'Turbo Speed' : { 'unit' : 'krpm' , 'prec' : 0 , 'range' : [ 0 , 200 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }, 'Y' : { 'sig' : 'pr_comp' , 'unit' : 'ratio' , 'range' : [ 0 , 3 ], 'prec' : 2 }}}, 'pr_comp' : { 'unit' : '' , 'prec' : 3 , 'range' : [ 0.0 , 4.0 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500.0 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Turbo Speed' , 'unit' : 'krpm' , 'range' : [ 0 , 300.0 ], 'prec' : 1 }}}, 'Throttle PR' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , 100 ], 'axes' : { 'X' : { 'sig' : 'maf_cor' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }, 'Y' : { 'sig' : 'pr_throttle' , 'unit' : 'ratio' , 'range' : [ 0 , 1 ], 'prec' : 2 }}}, 'maf_nom' : { 'unit' : 'g/s' , 'prec' : 1 , 'range' : [ 0 , 500 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_nom' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'maf_nom' , 'unit' : 'g/s' , 'range' : [ 0 , 500 ], 'prec' : 1 }}}, 'map_target_1' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_2' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_3' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : { 'X' : { 'sig' : 'Engine Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 10000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'map_target_scaler' : { 'unit' : 'ratio' , 'prec' : 2 , 'range' : [ 0 , 3 ], 'axes' : { 'X' : { 'sig' : 'Active Boost Table' , 'unit' : '' , 'range' : [ 1 , 3 ], 'prec' : 0 }}}, 'nturbo_target_scaler' : { 'unit' : 'ratio' , 'prec' : 2 , 'range' : [ 0 , 3 ], 'axes' : { 'X' : { 'sig' : 'APS (Main)' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }}}, 'pamb_ref' : { 'unit' : 'kPa' , 'prec' : 1 , 'range' : [ 50 , 150 ], 'axes' : {}}, 'nturbo_max' : { 'unit' : 'krpm' , 'prec' : 1 , 'range' : [ 0 , 300 ], 'axes' : {}}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.fueling_params","text":"fueling_params = {}","title":"fueling_params"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.calcd_sigs","text":"calcd_sigs = [ 'Fueling.Error.Total' , 'Fuel Table 1.Corrected' , 'Wastegate %DC 1.Corrected' , 'Wastegate %DC 2.Corrected' , 'Wastegate %DC 3.Corrected' , 'Boost Target 2.Corrected' , 'Boost Target 2.Corrected' , 'Boost Target 3.Corrected' , 'Throttle PR.Corrected' , 'Turbo Speed.Corrected' , 'IAT Fuel Trim.Corrected' , 'maf' , 'rho_air' , 'pr_comp' , 'pr_throttle' , 'maf_cor' , 'fmaf_cor' , 'maf' , 'maf_est_cor' ]","title":"calcd_sigs"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.slow_sig","text":"slow_sig = 'Engine Speed'","title":"slow_sig"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.n_cyl","text":"n_cyl","title":"n_cyl"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.n_banks","text":"n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.displacement","text":"displacement","title":"displacement"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.__init__","text":"__init__ ( caldir : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None )","title":"__init__"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.check_substitute_sigs","text":"check_substitute_sigs () Try to substitute for some common missing sigs.","title":"check_substitute_sigs"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.check_sigs","text":"check_sigs () Check that required input sigs are present.","title":"check_sigs"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.update_calcd_data","text":"update_calcd_data ( _ = None ) Update calculations for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.G4xXtreme.normalize_cyl_trims","text":"normalize_cyl_trims ()","title":"normalize_cyl_trims"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.read_data","text":"read_data ( filenames : str | tuple [ str ] | list [ str ]) -> Frame","title":"read_data"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.read_link_datafile","text":"read_link_datafile ( filename : str | Path ) -> Frame Reads a link formatted data file","title":"read_link_datafile"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.read_cals","text":"read_cals ( dirname : Path | str ) -> Tbls This function is deprecated. Use read_cals_async() instead. Parameters: dirname ( Path ) \u2013 The directory name where the calibration tables are located. Returns: Tbls \u2013 The calibration tables. Notes .. deprecated:: 1.0.0 Use read_cals_async() instead.","title":"read_cals"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.read_cals_async","text":"read_cals_async ( dirname : str | Path ) -> Tbls Read cal's async Parameters: dirname ( str | Path ) \u2013 Directory of cal files Returns: Tbls \u2013 Table data","title":"read_cals_async"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.read_cal_xml_async","text":"read_cal_xml_async ( caltbl : Path ) -> Tbl Read and parse a single cal XML file Parameters: caltbl ( str | Path ) \u2013 path to file Returns: Tbl \u2013 parsed Tbl","title":"read_cal_xml_async"},{"location":"reference/ccg/controllers/link/#ccg.controllers.link.write_cals","text":"write_cals ( dirname : Path , table_data : Tbls , param_names : list [ str ])","title":"write_cals"},{"location":"reference/ccg/controllers/motec/","text":"Functions and classes for working with MoTeC .ld data. Attributes HEADER_FORMAT module-attribute HEADER_FORMAT = '<' + 'IIII20sI24sHHHI8sHHHHI16s16s16s16s64s64s64s64s64s1024sIH64s64s' HEADER_NAMES module-attribute HEADER_NAMES = [ 'file_header_loc' , 'file_dev_loc' , 'file_sig_loc' , 'file_data_loc' , '__unk1' , 'file_event_loc' , '__unk2' , '__unk3' , '__unk4' , '__unk5' , 'dev_sn' , 'dev' , 'dev_ver' , '__unk12' , 'n_sig' , '__unk6' , '__unk7' , 'date' , '__unk8' , 'time' , '__unk9' , 'driver' , 'vehicle' , 'engine' , 'venue' , '__unk10' , 'superlong' , 'pro_log' , '__unk11' , 'session' , 'short_comment' ] EVENT_FORMAT module-attribute EVENT_FORMAT = '<' + '64s64s1024sI' EVENT_NAMES module-attribute EVENT_NAMES = [ 'event_name' , 'session' , 'comment' , 'file_venue_loc' ] VENUE_FORMAT module-attribute VENUE_FORMAT = '<' + '64s1034sI' VENUE_NAMES module-attribute VENUE_NAMES = [ 'venue_name' , '__unk1' , 'file_vehicle_loc' ] VEHICLE_FORMAT module-attribute VEHICLE_FORMAT = '<' + '64s128sI32s32s' VEHICLE_NAMES module-attribute VEHICLE_NAMES = [ 'vehicle_name' , '__unk1' , 'weight' , 'type' , 'comment' ] SIG_FORMAT module-attribute SIG_FORMAT = '<' + 'IIIIHHHHhHHh32s8s12sii' SIG_NAMES module-attribute SIG_NAMES = [ '_prev_loc' , '_next_loc' , '_data_loc' , '_nsamples' , '__counter' , '_data_type' , '_data_type2' , '_freq' , '_zero_off' , '_denom' , '_multi' , '_ndec' , 'short_name' , 'unit' , '__unk1' , '_max' , '_min' ] DEVICE_FORMAT module-attribute DEVICE_FORMAT = '>BBBBBBI' DTYPES_TABLE module-attribute DTYPES_TABLE = { 'str' : 'U' , 'f32' : '<f4' , 'enum' : '|i1' , 'u32' : '<u4' , 's32' : '<i4' } MOTEC_TYPE module-attribute MOTEC_TYPE = dict (( value , key ) for ( key , value ) in items ()) Classes FirmwareModel Bases: ABC Base class for M1 firmware model. Attributes reference_tables class-attribute instance-attribute reference_tables = {} fueling_tables class-attribute instance-attribute fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}} fueling_params class-attribute instance-attribute fueling_params = { 'Engine.Cylinders' : 8 } table_data instance-attribute table_data = None tabs instance-attribute tabs = CalDataTabs () warning_dialog instance-attribute warning_dialog = warning_dialog gate instance-attribute gate = None bank_gates instance-attribute bank_gates = [] resampled instance-attribute resampled = None slow_sig instance-attribute slow_sig : str slow_freq property slow_freq return freq of slow signal. n_cyl abstractmethod property n_cyl Returns num of cyls n_banks abstractmethod property n_banks Returns n_banks data property writable data data fueling_names property fueling_names return names of fueling tables param_names property param_names Return the names of the parameters Functions __init__ __init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None ) read_gate read_gate ( filename : str | Path ) Read Gate File read_data read_data ( filename : str | Path ) Read data file read_cal read_cal ( m1cfg : str | Path ) Read the calibration data into table_data. convert_tables convert_tables () Convert tables using configurations in self.fueling_tables. build_tabs build_tabs () build tabs widget update_calcd_data abstractmethod update_calcd_data () Update calcs for fitting/plotting. update_scatter_data abstractmethod update_scatter_data () Update scatter data for fitting/plotting. LOORRS Bases: FirmwareModel M1 Firmware model for LOORRS_Pro2_Pro4 01.02.0006, March 2019 Attributes reference_tables class-attribute instance-attribute reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim.Main.Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}} fueling_tables class-attribute instance-attribute fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 50 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Primary.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}, 'Inlet.Manifold.Pressure.Estimate.Main' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , inf ], 'axes' : { 'X' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'F' , 'range' : [ - 58 , 482 ], 'prec' : 1 }}}} fueling_params class-attribute instance-attribute fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Cylinders' : 8 , 'Engine.Cylinder #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle PositioLambda.Indiv.Bank 2.AvgLambda.Indiv.Bank 2.Avgn' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' }, 'Fuel.Volume.Trim.Overall' : 0 , 'Ambient.Pressure.Default.Value' : 101.3 } calcd_sigs class-attribute instance-attribute calcd_sigs = [ 'Fueling.Error.Bank 1' , 'Fueling.Error.Bank 2' , 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' , 'Lambda.Indiv.Bank 1.Avg' , 'Lambda.Indiv.Bank 2.Avg' , 'Cylinder.Trim.Avg' ] slow_sig instance-attribute slow_sig = 'Engine.Speed' use_tailpipes instance-attribute use_tailpipes = [ False ] * n_banks n_cyl property n_cyl n_banks property n_banks Functions __init__ __init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None ) check_substitute_sigs check_substitute_sigs () Try to substitute for some common missing sigs. check_sigs check_sigs () Check that required input sigs are present. update_calcd_data update_calcd_data () Update calculations for fitting/plotting. update_scatter_data update_scatter_data () Update scatter data for fitting. normalize_cyl_trims normalize_cyl_trims () Normalizes cyl trims if bp's match. check_axes check_axes () Check if cyl trim axes match build_delta_summary build_delta_summary () Builds tables to review fit. convert_table_to_axes convert_table_to_axes ( table : Tbl , target : Axes ) Convert a table to fit the target axes if possible. tps_from_map tps_from_map ( eng_speed : npt . NDArray , imap : npt . NDArray ) Estimate Throttle.Position from manifold air pressure. DRE_JLM_V2 Bases: FirmwareModel M1 Firmware model for DRE JLM V2 TT Dual Sensors Package Attributes reference_tables class-attribute instance-attribute reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim.Main.Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}} fueling_tables class-attribute instance-attribute fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 50 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Inlet.Manifold.Pressure.Estimate.Main' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , inf ], 'axes' : { 'X' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'F' , 'range' : [ - 58 , 482 ], 'prec' : 1 }}}} fueling_params class-attribute instance-attribute fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Cylinders' : 8 , 'Engine.Cylinder #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle PositioLambda.Indiv.Bank 2.AvgLambda.Indiv.Bank 2.Avgn' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' , 2 : 'Boost Pressure Relative' }, 'Fuel.Volume.Trim.Overall' : 0 , 'Ambient.Pressure.Default.Value' : 101.3 } calcd_sigs class-attribute instance-attribute calcd_sigs = [ 'Fueling.Error.Bank 1' , 'Fueling.Error.Bank 2' , 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' , 'Lambda.Indiv.Bank 1.Avg' , 'Lambda.Indiv.Bank 2.Avg' , 'Cylinder.Trim.Avg' ] slow_sig instance-attribute slow_sig = 'Engine.Speed' use_tailpipes instance-attribute use_tailpipes = [ False ] * n_banks n_cyl property n_cyl n_banks property n_banks Functions __init__ __init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None ) check_substitute_sigs check_substitute_sigs () Try to substitute for some common missing sigs. check_sigs check_sigs () Check that required input sigs are present. update_calcd_data update_calcd_data () Update calculations for fitting/plotting. update_scatter_data update_scatter_data () Update scatter data for fitting. normalize_cyl_trims normalize_cyl_trims () Normalizes cyl trims if bp's match. check_axes check_axes () Check if cyl trim axes match build_delta_summary build_delta_summary () Builds tables to review fit. convert_table_to_axes convert_table_to_axes ( table : Tbl , target : Axes ) Convert a table to fit the target axes if possible. tps_from_map tps_from_map ( eng_speed : npt . NDArray , imap : npt . NDArray ) Estimate Throttle.Position from manifold air pressure. FCM1 Bases: FirmwareModel M1 Firmware model for FCM1 Attributes reference_tables class-attribute instance-attribute reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ NINF , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim Main Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Fuel.Timing.Secondary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}} fueling_tables class-attribute instance-attribute fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'C' , 'range' : [ - 50 , 200 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}} fueling_params class-attribute instance-attribute fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Rotors' : 2 , 'Engine.Rotor #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle Position' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' }} calcd_sigs class-attribute instance-attribute calcd_sigs = [ 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' ] slow_sig instance-attribute slow_sig = 'Engine.Speed' n_cyl property n_cyl n_banks property n_banks Functions __init__ __init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None ) check_substitute_sigs check_substitute_sigs () Try to substitute for some common missing sigs. check_sigs check_sigs () Check that required input sigs are present. update_calcd_data update_calcd_data () Update calculations for fitting/plotting. update_scatter_data update_scatter_data () Update scatter data for fitting. normalize_cyl_trims normalize_cyl_trims () Functions parse_device_data parse_device_data ( dev : dict , data : bytes , det_format : int , det_size : int , dets : list ) -> dict Recursive parsing function for device details dev: device info dictionary data: data to parse in bytes frmDet: section details format szDet: size of details dets: section details looks for keyword 'Mo' device_data_reader device_data_reader ( file : BufferedReader , _event_loc : int , device_loc : int , sig : Sig = None ) -> Sig Reads the device data from file. seg_reader seg_reader ( file : BufferedReader , strt_loc : int , unpk_format : str , format_names : list [ str ], data : Sig = None ) -> Sig Read segment from binary file. Parameters: file ( BufferedReader ) \u2013 open file to read segment from. strt_location \u2013 starting location to read from. format \u2013 format string to unpack data with. format_names ( list [ str ] ) \u2013 attribute names corresponding to format. Names starting with '_' will be ignored. data ( Sig , default: None ) \u2013 optional CCGSig to put data into. Returns: CCGSig with unpacked data. \u2013 sig_reader sig_reader ( file : BufferedReader , strt_loc : int , device : str , file_time : datetime = None , start_time : float | datetime = None ) -> Frame Read signal data from file. read_ld read_ld ( filenames : str | tuple [ str ] | list [ str ]) -> Frame Read and parse .ld file. read_m1cgf read_m1cgf ( filename : str | Path , param_names : list [ str ] = None ) Read .m1cfg xml file to Params. If param_names is not None, only those parameters will be imported. parse_value parse_value ( text : str , d_type : str ) Convert string to appropriate data type. write_m1cfg write_m1cfg ( filename : str | Path , params : Tbls , param_names : list [ str ] = None ) Write .m1cfg xml of params. First converts back to units in orig archive. This works well for Params imported with read_m1cfg. Use param_names to export a subset or params.","title":"motec"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.HEADER_FORMAT","text":"HEADER_FORMAT = '<' + 'IIII20sI24sHHHI8sHHHHI16s16s16s16s64s64s64s64s64s1024sIH64s64s'","title":"HEADER_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.HEADER_NAMES","text":"HEADER_NAMES = [ 'file_header_loc' , 'file_dev_loc' , 'file_sig_loc' , 'file_data_loc' , '__unk1' , 'file_event_loc' , '__unk2' , '__unk3' , '__unk4' , '__unk5' , 'dev_sn' , 'dev' , 'dev_ver' , '__unk12' , 'n_sig' , '__unk6' , '__unk7' , 'date' , '__unk8' , 'time' , '__unk9' , 'driver' , 'vehicle' , 'engine' , 'venue' , '__unk10' , 'superlong' , 'pro_log' , '__unk11' , 'session' , 'short_comment' ]","title":"HEADER_NAMES"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.EVENT_FORMAT","text":"EVENT_FORMAT = '<' + '64s64s1024sI'","title":"EVENT_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.EVENT_NAMES","text":"EVENT_NAMES = [ 'event_name' , 'session' , 'comment' , 'file_venue_loc' ]","title":"EVENT_NAMES"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.VENUE_FORMAT","text":"VENUE_FORMAT = '<' + '64s1034sI'","title":"VENUE_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.VENUE_NAMES","text":"VENUE_NAMES = [ 'venue_name' , '__unk1' , 'file_vehicle_loc' ]","title":"VENUE_NAMES"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.VEHICLE_FORMAT","text":"VEHICLE_FORMAT = '<' + '64s128sI32s32s'","title":"VEHICLE_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.VEHICLE_NAMES","text":"VEHICLE_NAMES = [ 'vehicle_name' , '__unk1' , 'weight' , 'type' , 'comment' ]","title":"VEHICLE_NAMES"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.SIG_FORMAT","text":"SIG_FORMAT = '<' + 'IIIIHHHHhHHh32s8s12sii'","title":"SIG_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.SIG_NAMES","text":"SIG_NAMES = [ '_prev_loc' , '_next_loc' , '_data_loc' , '_nsamples' , '__counter' , '_data_type' , '_data_type2' , '_freq' , '_zero_off' , '_denom' , '_multi' , '_ndec' , 'short_name' , 'unit' , '__unk1' , '_max' , '_min' ]","title":"SIG_NAMES"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DEVICE_FORMAT","text":"DEVICE_FORMAT = '>BBBBBBI'","title":"DEVICE_FORMAT"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DTYPES_TABLE","text":"DTYPES_TABLE = { 'str' : 'U' , 'f32' : '<f4' , 'enum' : '|i1' , 'u32' : '<u4' , 's32' : '<i4' }","title":"DTYPES_TABLE"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.MOTEC_TYPE","text":"MOTEC_TYPE = dict (( value , key ) for ( key , value ) in items ())","title":"MOTEC_TYPE"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec-classes","text":"","title":"Classes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel","text":"Bases: ABC Base class for M1 firmware model.","title":"FirmwareModel"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.reference_tables","text":"reference_tables = {}","title":"reference_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.fueling_tables","text":"fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.fueling_params","text":"fueling_params = { 'Engine.Cylinders' : 8 }","title":"fueling_params"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.table_data","text":"table_data = None","title":"table_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.tabs","text":"tabs = CalDataTabs ()","title":"tabs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.warning_dialog","text":"warning_dialog = warning_dialog","title":"warning_dialog"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.gate","text":"gate = None","title":"gate"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.bank_gates","text":"bank_gates = []","title":"bank_gates"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.resampled","text":"resampled = None","title":"resampled"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.slow_sig","text":"slow_sig : str","title":"slow_sig"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.slow_freq","text":"slow_freq return freq of slow signal.","title":"slow_freq"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.n_cyl","text":"n_cyl Returns num of cyls","title":"n_cyl"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.n_banks","text":"n_banks Returns n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.data","text":"data data","title":"data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.fueling_names","text":"fueling_names return names of fueling tables","title":"fueling_names"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.param_names","text":"param_names Return the names of the parameters","title":"param_names"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.__init__","text":"__init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None )","title":"__init__"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.read_gate","text":"read_gate ( filename : str | Path ) Read Gate File","title":"read_gate"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.read_data","text":"read_data ( filename : str | Path ) Read data file","title":"read_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.read_cal","text":"read_cal ( m1cfg : str | Path ) Read the calibration data into table_data.","title":"read_cal"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.convert_tables","text":"convert_tables () Convert tables using configurations in self.fueling_tables.","title":"convert_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.build_tabs","text":"build_tabs () build tabs widget","title":"build_tabs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.update_calcd_data","text":"update_calcd_data () Update calcs for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FirmwareModel.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting/plotting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS","text":"Bases: FirmwareModel M1 Firmware model for LOORRS_Pro2_Pro4 01.02.0006, March 2019","title":"LOORRS"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.reference_tables","text":"reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim.Main.Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}}","title":"reference_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.fueling_tables","text":"fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Z' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 50 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Primary.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Engine.Load.Normalised' , 'unit' : '%' , 'range' : [ NINF , inf ], 'prec' : 1 }}}, 'Inlet.Manifold.Pressure.Estimate.Main' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , inf ], 'axes' : { 'X' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'F' , 'range' : [ - 58 , 482 ], 'prec' : 1 }}}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.fueling_params","text":"fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Cylinders' : 8 , 'Engine.Cylinder #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle PositioLambda.Indiv.Bank 2.AvgLambda.Indiv.Bank 2.Avgn' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' }, 'Fuel.Volume.Trim.Overall' : 0 , 'Ambient.Pressure.Default.Value' : 101.3 }","title":"fueling_params"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.calcd_sigs","text":"calcd_sigs = [ 'Fueling.Error.Bank 1' , 'Fueling.Error.Bank 2' , 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' , 'Lambda.Indiv.Bank 1.Avg' , 'Lambda.Indiv.Bank 2.Avg' , 'Cylinder.Trim.Avg' ]","title":"calcd_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.slow_sig","text":"slow_sig = 'Engine.Speed'","title":"slow_sig"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.use_tailpipes","text":"use_tailpipes = [ False ] * n_banks","title":"use_tailpipes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.n_cyl","text":"n_cyl","title":"n_cyl"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.n_banks","text":"n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.__init__","text":"__init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None )","title":"__init__"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.check_substitute_sigs","text":"check_substitute_sigs () Try to substitute for some common missing sigs.","title":"check_substitute_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.check_sigs","text":"check_sigs () Check that required input sigs are present.","title":"check_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.update_calcd_data","text":"update_calcd_data () Update calculations for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.normalize_cyl_trims","text":"normalize_cyl_trims () Normalizes cyl trims if bp's match.","title":"normalize_cyl_trims"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.check_axes","text":"check_axes () Check if cyl trim axes match","title":"check_axes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.build_delta_summary","text":"build_delta_summary () Builds tables to review fit.","title":"build_delta_summary"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.convert_table_to_axes","text":"convert_table_to_axes ( table : Tbl , target : Axes ) Convert a table to fit the target axes if possible.","title":"convert_table_to_axes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.LOORRS.tps_from_map","text":"tps_from_map ( eng_speed : npt . NDArray , imap : npt . NDArray ) Estimate Throttle.Position from manifold air pressure.","title":"tps_from_map"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2","text":"Bases: FirmwareModel M1 Firmware model for DRE JLM V2 TT Dual Sensors Package","title":"DRE_JLM_V2"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.reference_tables","text":"reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim.Main.Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}}","title":"reference_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.fueling_tables","text":"fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Cylinder #.Trim' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 100 , 50 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'kPa' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Inlet.Manifold.Pressure.Estimate.Main' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 0 , inf ], 'axes' : { 'X' : { 'sig' : 'Throttle.Position' , 'unit' : '%' , 'range' : [ 0 , 100 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 0 }, 'Z' : { 'sig' : 'Ambient.Pressure' , 'unit' : 'kPa' , 'range' : [ 5 , 110 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'F' , 'range' : [ - 58 , 482 ], 'prec' : 1 }}}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.fueling_params","text":"fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Cylinders' : 8 , 'Engine.Cylinder #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle PositioLambda.Indiv.Bank 2.AvgLambda.Indiv.Bank 2.Avgn' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' , 2 : 'Boost Pressure Relative' }, 'Fuel.Volume.Trim.Overall' : 0 , 'Ambient.Pressure.Default.Value' : 101.3 }","title":"fueling_params"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.calcd_sigs","text":"calcd_sigs = [ 'Fueling.Error.Bank 1' , 'Fueling.Error.Bank 2' , 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' , 'Lambda.Indiv.Bank 1.Avg' , 'Lambda.Indiv.Bank 2.Avg' , 'Cylinder.Trim.Avg' ]","title":"calcd_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.slow_sig","text":"slow_sig = 'Engine.Speed'","title":"slow_sig"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.use_tailpipes","text":"use_tailpipes = [ False ] * n_banks","title":"use_tailpipes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.n_cyl","text":"n_cyl","title":"n_cyl"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.n_banks","text":"n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.__init__","text":"__init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None )","title":"__init__"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.check_substitute_sigs","text":"check_substitute_sigs () Try to substitute for some common missing sigs.","title":"check_substitute_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.check_sigs","text":"check_sigs () Check that required input sigs are present.","title":"check_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.update_calcd_data","text":"update_calcd_data () Update calculations for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.normalize_cyl_trims","text":"normalize_cyl_trims () Normalizes cyl trims if bp's match.","title":"normalize_cyl_trims"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.check_axes","text":"check_axes () Check if cyl trim axes match","title":"check_axes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.build_delta_summary","text":"build_delta_summary () Builds tables to review fit.","title":"build_delta_summary"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.convert_table_to_axes","text":"convert_table_to_axes ( table : Tbl , target : Axes ) Convert a table to fit the target axes if possible.","title":"convert_table_to_axes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.DRE_JLM_V2.tps_from_map","text":"tps_from_map ( eng_speed : npt . NDArray , imap : npt . NDArray ) Estimate Throttle.Position from manifold air pressure.","title":"tps_from_map"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1","text":"Bases: FirmwareModel M1 Firmware model for FCM1","title":"FCM1"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.reference_tables","text":"reference_tables = { 'Fuel.Mixture Aim.Main' : { 'unit' : 'LA' , 'prec' : 2 , 'range' : [ 0.01 , 5 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ NINF , inf ], 'prec' : 1 }, 'Z' : { 'sig' : 'Driver.Fuel.Mixture Aim Main Switch' , 'unit' : '' , 'range' : [ 'A' , 'B' ], 'prec' : 0 }}}, 'Fuel.Timing.Primary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Fuel.Timing.Secondary.Main' : { 'unit' : 'dBTDC' , 'prec' : 1 , 'range' : [ 0 , 1440 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}}","title":"reference_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.fueling_tables","text":"fueling_tables = { 'Engine.Efficiency.Value' : { 'unit' : '%' , 'prec' : 1 , 'range' : [ 10 , 200 ], 'axes' : { 'X' : { 'sig' : 'Engine.Speed' , 'unit' : 'rpm' , 'range' : [ 0 , 30000 ], 'prec' : 1 }, 'Y' : { 'sig' : 'Inlet.Manifold.Pressure' , 'unit' : 'mbar' , 'range' : [ 0 , inf ], 'prec' : 1 }}}, 'Coolant.Temperature.Fuel Volume Compensation' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 50 , 50 ], 'axes' : { 'X' : { 'sig' : 'Coolant.Temperature' , 'unit' : 'C' , 'range' : [ - 50 , 200 ], 'prec' : 1 }}}, 'Fuel.Volume.Trim.Overall' : { 'unit' : '%Trim' , 'prec' : 1 , 'range' : [ - 99.9 , inf ]}}","title":"fueling_tables"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.fueling_params","text":"fueling_params = { 'Fuel.Efficiency.Mode' : { 0 : 'Manifold Air Density' , 1 : 'Ambient Air Density' , 2 : 'Airbox Air Density' }, 'Inlet.Manifold.Pressure.Mode' : { 0 : 'Automatic' , 1 : 'Estimate' , 2 : 'Sensor' }, 'Engine.Rotors' : 2 , 'Engine.Rotor #.Bank' : 1 , 'Engine.Load.Normalised.Mode' : { 0 : 'Normal' , 1 : 'Inlet Manifold Pressure' , 2 : 'Throttle Position' }, 'Inlet.Manifold.Pressure.Estimate.Mode' : { 0 : 'Ambient Pressure Relative' , 1 : '100kPa Relative' }}","title":"fueling_params"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.calcd_sigs","text":"calcd_sigs = [ 'Fueling.Error.Total' , 'Engine.Efficiency.Value.Corrected' ]","title":"calcd_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.slow_sig","text":"slow_sig = 'Engine.Speed'","title":"slow_sig"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.n_cyl","text":"n_cyl","title":"n_cyl"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.n_banks","text":"n_banks","title":"n_banks"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.__init__","text":"__init__ ( m1cfg : str | Path = None , data : str | Path | Frame = None , gate : GateColl | str | Path = None , warning_dialog : Callable = None )","title":"__init__"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.check_substitute_sigs","text":"check_substitute_sigs () Try to substitute for some common missing sigs.","title":"check_substitute_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.check_sigs","text":"check_sigs () Check that required input sigs are present.","title":"check_sigs"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.update_calcd_data","text":"update_calcd_data () Update calculations for fitting/plotting.","title":"update_calcd_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.update_scatter_data","text":"update_scatter_data () Update scatter data for fitting.","title":"update_scatter_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.FCM1.normalize_cyl_trims","text":"normalize_cyl_trims ()","title":"normalize_cyl_trims"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec-functions","text":"","title":"Functions"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.parse_device_data","text":"parse_device_data ( dev : dict , data : bytes , det_format : int , det_size : int , dets : list ) -> dict Recursive parsing function for device details dev: device info dictionary data: data to parse in bytes frmDet: section details format szDet: size of details dets: section details looks for keyword 'Mo'","title":"parse_device_data"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.device_data_reader","text":"device_data_reader ( file : BufferedReader , _event_loc : int , device_loc : int , sig : Sig = None ) -> Sig Reads the device data from file.","title":"device_data_reader"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.seg_reader","text":"seg_reader ( file : BufferedReader , strt_loc : int , unpk_format : str , format_names : list [ str ], data : Sig = None ) -> Sig Read segment from binary file. Parameters: file ( BufferedReader ) \u2013 open file to read segment from. strt_location \u2013 starting location to read from. format \u2013 format string to unpack data with. format_names ( list [ str ] ) \u2013 attribute names corresponding to format. Names starting with '_' will be ignored. data ( Sig , default: None ) \u2013 optional CCGSig to put data into. Returns: CCGSig with unpacked data. \u2013","title":"seg_reader"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.sig_reader","text":"sig_reader ( file : BufferedReader , strt_loc : int , device : str , file_time : datetime = None , start_time : float | datetime = None ) -> Frame Read signal data from file.","title":"sig_reader"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.read_ld","text":"read_ld ( filenames : str | tuple [ str ] | list [ str ]) -> Frame Read and parse .ld file.","title":"read_ld"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.read_m1cgf","text":"read_m1cgf ( filename : str | Path , param_names : list [ str ] = None ) Read .m1cfg xml file to Params. If param_names is not None, only those parameters will be imported.","title":"read_m1cgf"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.parse_value","text":"parse_value ( text : str , d_type : str ) Convert string to appropriate data type.","title":"parse_value"},{"location":"reference/ccg/controllers/motec/#ccg.controllers.motec.write_m1cfg","text":"write_m1cfg ( filename : str | Path , params : Tbls , param_names : list [ str ] = None ) Write .m1cfg xml of params. First converts back to units in orig archive. This works well for Params imported with read_m1cfg. Use param_names to export a subset or params.","title":"write_m1cfg"},{"location":"reference/ccg/data/","text":"","title":"data"},{"location":"reference/ccg/data/alloc_data/","text":"Attributes F_OVER_ALLOC module-attribute F_OVER_ALLOC = 1.2 NSAMPLES_DEFAULT module-attribute NSAMPLES_DEFAULT = ( 1000 ) NSAMPLES_MIN module-attribute NSAMPLES_MIN = 10 Classes AllocData Data class for pre-allocating npt.NDArray. Attributes: data ( NDArray ) \u2013 Data dtype ( DTypeLike ) \u2013 Data Type alloc ( tuple [ int ] ) \u2013 Allocated size Attributes __slots__ class-attribute instance-attribute __slots__ = ( 'data' , '_shape' , 'dtype' , '_n' , 'alloc' , '_nsamples' ) data instance-attribute data : NDArray | None = None dtype instance-attribute dtype = dtype alloc instance-attribute alloc = alloc shape property writable shape : tuple Shape of data appx_bytes property appx_bytes : int Approximate size of obj in bytes. nsamples property nsamples : int Number of samples. Functions __init__ __init__ ( data : npt . NDArray | AllocData | None = None , shape : tuple | None = None , dtype : npt . DTypeLike | None = None ) reallocate reallocate ( shape : tuple | list , dtype : npt . DTypeLike , allow_dtype_change = False ) -> None Allocate or reallocate self.data. Shape and dtype are for the intended data. append append ( data : npt . NDArray | AllocData ) Append data to self. replace replace ( data : npt . NDArray | AllocData ) Replace data without re-allocating if data fits and is the same type. tobytes tobytes () -> bytes Returns bytes representation of data __getitem__ __getitem__ ( index = None ) -> npt . NDArray Getter function. __setitem__ __setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray ) Set item func __iter__ __iter__ () __next__ __next__ () Functions","title":"alloc_data"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.F_OVER_ALLOC","text":"F_OVER_ALLOC = 1.2","title":"F_OVER_ALLOC"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.NSAMPLES_DEFAULT","text":"NSAMPLES_DEFAULT = ( 1000 )","title":"NSAMPLES_DEFAULT"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.NSAMPLES_MIN","text":"NSAMPLES_MIN = 10","title":"NSAMPLES_MIN"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data-classes","text":"","title":"Classes"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData","text":"Data class for pre-allocating npt.NDArray. Attributes: data ( NDArray ) \u2013 Data dtype ( DTypeLike ) \u2013 Data Type alloc ( tuple [ int ] ) \u2013 Allocated size","title":"AllocData"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__slots__","text":"__slots__ = ( 'data' , '_shape' , 'dtype' , '_n' , 'alloc' , '_nsamples' )","title":"__slots__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.data","text":"data : NDArray | None = None","title":"data"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.dtype","text":"dtype = dtype","title":"dtype"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.alloc","text":"alloc = alloc","title":"alloc"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.shape","text":"shape : tuple Shape of data","title":"shape"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.appx_bytes","text":"appx_bytes : int Approximate size of obj in bytes.","title":"appx_bytes"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.nsamples","text":"nsamples : int Number of samples.","title":"nsamples"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__init__","text":"__init__ ( data : npt . NDArray | AllocData | None = None , shape : tuple | None = None , dtype : npt . DTypeLike | None = None )","title":"__init__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.reallocate","text":"reallocate ( shape : tuple | list , dtype : npt . DTypeLike , allow_dtype_change = False ) -> None Allocate or reallocate self.data. Shape and dtype are for the intended data.","title":"reallocate"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.append","text":"append ( data : npt . NDArray | AllocData ) Append data to self.","title":"append"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.replace","text":"replace ( data : npt . NDArray | AllocData ) Replace data without re-allocating if data fits and is the same type.","title":"replace"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.tobytes","text":"tobytes () -> bytes Returns bytes representation of data","title":"tobytes"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__getitem__","text":"__getitem__ ( index = None ) -> npt . NDArray Getter function.","title":"__getitem__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__setitem__","text":"__setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray ) Set item func","title":"__setitem__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__iter__","text":"__iter__ ()","title":"__iter__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data.AllocData.__next__","text":"__next__ ()","title":"__next__"},{"location":"reference/ccg/data/alloc_data/#ccg.data.alloc_data-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/gating/","text":"Classes GateCond Gating condition for validating data in signals or frames. Attributes signame instance-attribute signame = signame min_limit instance-attribute min_limit = min_limit max_limit instance-attribute max_limit = max_limit enable_delay instance-attribute enable_delay = enable_delay disable_delay instance-attribute disable_delay = disable_delay unit instance-attribute unit = unit last_res instance-attribute last_res = None Functions __init__ __init__ ( signame : str , min_limit : npt . NBitBase | None = None , max_limit : npt . NBitBase | None = None , enable_delay : float | None = None , disable_delay : float | None = None , unit : str | None = None ) valid valid ( frameorsig : Frame | Sig , tline : TLine ) -> npt . NDArray [ np . bool_ ] Returns boolean array on tline with results of gate condition. validate validate ( frameorsig : Frame | Sig , tline : TLine = None , interp_gaps = False ) Calculate validity and return Sig of results. build_plot build_plot ( frameorsig : Frame | Sig , tline : TLine ) -> Plot Plot a gate condition validity. __repr__ __repr__ () -> str GateColl Bases: ABC Baseclass for gate collections. Attributes conds instance-attribute conds = conditions sigs property sigs return list of sigs used in gatecoll. Functions __init__ __init__ ( conditions : list [ GateCond | GateColl ] = None ) valid valid ( frameorsig : Frame | Sig , tline : TLine ) Calculate validity for collection. Returns bool array. validate validate ( frameorsig : Frame | Sig , tline : TLine | None = None ) Calculate validity for collection. returns sig get_combined_tline get_combined_tline ( frameorsig : Frame | Sig ) Get a combined tline for gate collection. edges edges ( frameorsig : Frame | Sig , tline : TLine = None ) -> tuple [ npt . NDArray , npt . NDArray ] Returns tuple of tline values at rising and falling edges of validity trace. to_file to_file ( filename : str | Path ) Store gate collection definition to config file. from_file from_file ( filename : str | Path | bytes ) Read gate collection from file. Returns a new coll. build_plot build_plot ( frameorsig : Frame | Sig , tline : TLine = None , def_plot : Plot = None ) -> Plot Plot a gate collection validity. append append ( cond : GateColl | GateCond ) Append condition to collection __iter__ __iter__ () iter __repr__ __repr__ () -> str GateCollAND Bases: GateColl Collection of GateCond and'd together. GateCollOR Bases: GateColl Collection of GateCond or'd together. Functions gatecoll_from_file gatecoll_from_file ( filename : str | Path | bytes ) Read gate collection from config file. gatecoll_to_dict gatecoll_to_dict ( coll : GateColl ) -> dict Recursive gate condition collection to dict. gatecoll_from_dict gatecoll_from_dict ( data : dict ) -> GateCollAND | GateCollOR Gate condition collection from dict.","title":"gating"},{"location":"reference/ccg/data/gating/#ccg.data.gating-classes","text":"","title":"Classes"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond","text":"Gating condition for validating data in signals or frames.","title":"GateCond"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.signame","text":"signame = signame","title":"signame"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.min_limit","text":"min_limit = min_limit","title":"min_limit"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.max_limit","text":"max_limit = max_limit","title":"max_limit"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.enable_delay","text":"enable_delay = enable_delay","title":"enable_delay"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.disable_delay","text":"disable_delay = disable_delay","title":"disable_delay"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.unit","text":"unit = unit","title":"unit"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.last_res","text":"last_res = None","title":"last_res"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.__init__","text":"__init__ ( signame : str , min_limit : npt . NBitBase | None = None , max_limit : npt . NBitBase | None = None , enable_delay : float | None = None , disable_delay : float | None = None , unit : str | None = None )","title":"__init__"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.valid","text":"valid ( frameorsig : Frame | Sig , tline : TLine ) -> npt . NDArray [ np . bool_ ] Returns boolean array on tline with results of gate condition.","title":"valid"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.validate","text":"validate ( frameorsig : Frame | Sig , tline : TLine = None , interp_gaps = False ) Calculate validity and return Sig of results.","title":"validate"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.build_plot","text":"build_plot ( frameorsig : Frame | Sig , tline : TLine ) -> Plot Plot a gate condition validity.","title":"build_plot"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCond.__repr__","text":"__repr__ () -> str","title":"__repr__"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl","text":"Bases: ABC Baseclass for gate collections.","title":"GateColl"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.conds","text":"conds = conditions","title":"conds"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.sigs","text":"sigs return list of sigs used in gatecoll.","title":"sigs"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.__init__","text":"__init__ ( conditions : list [ GateCond | GateColl ] = None )","title":"__init__"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.valid","text":"valid ( frameorsig : Frame | Sig , tline : TLine ) Calculate validity for collection. Returns bool array.","title":"valid"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.validate","text":"validate ( frameorsig : Frame | Sig , tline : TLine | None = None ) Calculate validity for collection. returns sig","title":"validate"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.get_combined_tline","text":"get_combined_tline ( frameorsig : Frame | Sig ) Get a combined tline for gate collection.","title":"get_combined_tline"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.edges","text":"edges ( frameorsig : Frame | Sig , tline : TLine = None ) -> tuple [ npt . NDArray , npt . NDArray ] Returns tuple of tline values at rising and falling edges of validity trace.","title":"edges"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.to_file","text":"to_file ( filename : str | Path ) Store gate collection definition to config file.","title":"to_file"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.from_file","text":"from_file ( filename : str | Path | bytes ) Read gate collection from file. Returns a new coll.","title":"from_file"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.build_plot","text":"build_plot ( frameorsig : Frame | Sig , tline : TLine = None , def_plot : Plot = None ) -> Plot Plot a gate collection validity.","title":"build_plot"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.append","text":"append ( cond : GateColl | GateCond ) Append condition to collection","title":"append"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.__iter__","text":"__iter__ () iter","title":"__iter__"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateColl.__repr__","text":"__repr__ () -> str","title":"__repr__"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCollAND","text":"Bases: GateColl Collection of GateCond and'd together.","title":"GateCollAND"},{"location":"reference/ccg/data/gating/#ccg.data.gating.GateCollOR","text":"Bases: GateColl Collection of GateCond or'd together.","title":"GateCollOR"},{"location":"reference/ccg/data/gating/#ccg.data.gating-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/gating/#ccg.data.gating.gatecoll_from_file","text":"gatecoll_from_file ( filename : str | Path | bytes ) Read gate collection from config file.","title":"gatecoll_from_file"},{"location":"reference/ccg/data/gating/#ccg.data.gating.gatecoll_to_dict","text":"gatecoll_to_dict ( coll : GateColl ) -> dict Recursive gate condition collection to dict.","title":"gatecoll_to_dict"},{"location":"reference/ccg/data/gating/#ccg.data.gating.gatecoll_from_dict","text":"gatecoll_from_dict ( data : dict ) -> GateCollAND | GateCollOR Gate condition collection from dict.","title":"gatecoll_from_dict"},{"location":"reference/ccg/data/tbldata/","text":"CCG Table data module. Classes Axis CCG Parameter axis. Attributes name instance-attribute name = name unit instance-attribute unit = unit interp_method instance-attribute interp_method = interp_method parent instance-attribute parent = parent data_range instance-attribute data_range = data_range data property writable data data. precision property writable precision Return the number of decimals. diff property diff : NDArray [ float_ ] difference. is_monotonic_increasing property is_monotonic_increasing : bool Check if axis is monotonic. n_bps property n_bps : int Number of breakpoints. min property min min bp max property max max bp Functions __init__ __init__ ( data : npt . NDArray | list | Axis = None , name : str = None , unit : str = None , data_range : list = None , precision : int = None , interp_method : ccg . util . InterpMethod = '' , parent : Axes = None ) convert_units convert_units ( unit : str ) Convert units. as_unit as_unit ( unit : str ) Return copy converted to unit. bins bins ( values : npt . NDArray | float , extrap : bool = True ) Return bin and interpolation factor of values. __len__ __len__ () -> int Length. to_dict to_dict () -> dict to dictionary. __repr__ __repr__ () -> str repr __getitem__ __getitem__ ( index ) __setitem__ __setitem__ ( index , value ) Triggers interp in parent axes if applicable. __json__ __json__ () make serializable __eq__ __eq__ ( other : Axis ) -> bool equality Axes CCG Parameter Axis collection. Attributes interpolate_on_change instance-attribute interpolate_on_change = None axes instance-attribute axes : list [ Axis ] = [] parent instance-attribute parent = parent shape property shape : tuple Shape of axes bps table_shape property table_shape : tuple Shape of the expected data table. first axis is in cols (to match ecu standards), second in rows, beyond that they are stacked rows. grid property grid Return a meshgrid of the axis bps. n_dim property n_dim : int Number of Dimensions. n_bps property n_bps : int Number of breakpoints. Functions __init__ __init__ ( axes_data : list [ Axis ] | Axis | list [ dict ] | Axes = None , parent : Tbl = None , interpolate_on_change : bool = None ) append append ( axis : list [ Axis ] | Axis | list [ dict ] | Axes ) Append axis to Axes. Will not interp. __iter__ __iter__ () Iterate over Axes. to_dict to_dict () -> dict to dictionary. __repr__ __repr__ () -> str repr __getattr__ __getattr__ ( key : str ) -> Axis __getitem__ __getitem__ ( key ) -> Axis | list [ Axis ] __setitem__ __setitem__ ( key : str | int , value : Axis ) Handle interpolation if needed. __json__ __json__ () make serializable __eq__ __eq__ ( other : Axes ) equal __contains__ __contains__ ( key ) Check if key is an axis name in axes index index ( key : str ) return axis index by name ScatterData Class for storing scatter data to plot with a parameter. Attributes data instance-attribute data = data name instance-attribute name = name color instance-attribute color = data color_label instance-attribute color_label = color_name color_unit instance-attribute color_unit = '' time instance-attribute time = time ndim property ndim weight property writable weight Weight color_range property writable color_range Return Color Range color_precision property writable color_precision Return the number of decimals. Functions __init__ __init__ ( data : list [ npt . NDArray | Sig ], name : str = None , color : npt . NDArray = None , weight : npt . NDArray | float = None , color_name : str = None , color_unit : str = None , color_range : list [ float ] = None , time : npt . NDArray = None ) color_from_density color_from_density () clean clean ( sort = False ) remove any nan's to_dict to_dict () to dict __json__ __json__ () to json __repr__ __repr__ () repr Tbl CCG Parameter. Attributes count instance-attribute count = None name instance-attribute name = name unit instance-attribute unit = unit data_range instance-attribute data_range = data_range f_orig instance-attribute f_orig = f_orig created instance-attribute created = now () interp_on_axis_change property writable interp_on_axis_change Interpolate on axis change scatter_data property writable scatter_data : list [ ScatterData ] Scatter data data property writable data Return the table data. delta property delta : NDArray Delta to original table. delta_perc property delta_perc : NDArray [ floating ] Percent delta to original table. f_smooth property writable f_smooth Return f_smooth precision property writable precision Return the number of decimals. locked property writable locked locked periodic property writable periodic Return periodic constraints. axes property writable axes : Axes returns the axes. shape property shape shape dtype property dtype dtype motec_shape property writable motec_shape shape of base motec table orig property orig Return copy of original param. min property min min value max property max max value n_dim property n_dim : int Number of Dimensions. grid property grid Axes BPs grid. Functions __init__ __init__ ( data : npt . NDArray | Tbl | list = None , axes : Axes | list = None , name : str = None , unit : str = None , data_range : list = None , precision : int = None , interp_on_axis_change : bool = True , archive : dict = None , scatter_data : ScatterData | list [ ScatterData ] = None , f_smooth : list [ float ] = None , f_orig : float = None , locked : npt . NDArray | list = None , periodic : list [ bool ] = None ) check_shape check_shape ( data : npt . NDArray , axes : Axes , name : str = None ) Check that shape is compatible, else raise ValueError. snapshot snapshot ( name : str = None ) Archive current value. convert_units convert_units ( unit : str ) Convert units in place. as_unit as_unit ( unit : str ) Return copy converted to unit. data_color data_color ( colorscale = 'Turbo' , light_font = '#e5e5e5' , dark_font = '#434343' ) Get colors for table, makes use of plotly colorscales. prev prev () -> Tbl Return previous state of this param. undo undo ( nsteps : int = None ) -> None Restore prev state of data and axes by nsteps. -1 is oldest undo. clear_archive clear_archive () Clear archive. interp interp ( new_bps : Axes | npt . NDArray | Frame | Sig , extrapolate : bool = False ) Return data interpolated at new_bps. Parameters: new_bps ( Axes | NDArray | Frame | Sig ) \u2013 If new_bps is an ndarray it must be nsamples x nd, and the result will be nsamples, If new_bps is an Axes, it must have the same number of dimensions as the param. If new_bps is a Frame, it looks for signals matching axis names. extrapolate ( bool , default: False ) \u2013 saturate to bounds if False Returns: interpolated data, size of nsamples, if new_bps is ndarray or size of axes if new_bps is axes. \u2013 plot plot () -> Plot Generate plot fit fit ( saturate = False ) Fit param if scatter data is present. to_dict to_dict ( include_archive : bool = True , include_scatter : bool = True ) -> dict To dict to_file to_file ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file to_file_async async to_file_async ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file asynchronously from_file_async async classmethod from_file_async ( filename : str | Path ) Asynchronously load Tbl from file. Parameters: filename ( str | Path ) \u2013 The name of the file from which to load the data. If the file extension is not \".tbl.json\", it will be added. Returns: cls \u2013 An instance of Tbl, initialized with the data loaded from the file. Notes This method is asynchronous and should be awaited. from_file classmethod from_file ( filename : str | Path ) Synchronously load Tbl from file. Parameters: filename ( str | Path ) \u2013 The name of the file from which to load the data. If the file extension is not \".tbl.json\", it will be added. Returns: cls \u2013 An instance of Tbl, initialized with the data loaded from the file. __add__ __add__ ( other ) add, interpolate other if its a Param. returns new Param. __sub__ __sub__ ( other ) subtract, interpolate other if its a Param. returns new Param. __iadd__ __iadd__ ( other ) add, interpolate other if its a Param. in place. __isub__ __isub__ ( other ) subtract, interpolate other if its a Param. in place. __radd__ __radd__ ( other ) add, resamples to parent.math_tline if exists. returns new Param. __rsub__ __rsub__ ( other ) subtract, interpolate other if its a Param. returns new Param. __mul__ __mul__ ( other ) multiply(elementwise), interpolate other if its a Param. returns new Param. __truediv__ __truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Param. __imul__ __imul__ ( other ) multiply(elementwise), interpolate other if its a Param. returns new Param. __itruediv__ __itruediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Param. __pow__ __pow__ ( other ) power, resamples to parent.math_tline if exists. returns Param. __abs__ __abs__ () abs __neg__ __neg__ () neg __eq__ __eq__ ( other : Tbl ) -> bool Returns True if basics match. __repr__ __repr__ () -> str repr __getitem__ __getitem__ ( index : list [ list ] | Axes | npt . NDArray | str | Frame ) __json__ __json__ () make serializable Tbls Collection of Param. Attributes name instance-attribute name = None tbls instance-attribute tbls : dict [ str , Tbl ] = {} Functions __init__ __init__ ( params : Tbls | Tbl | list [ Tbl | dict ] | None = None , name : str | None = None ) append append ( params : list [ Tbl ] | Tbls | Tbl | list [ dict ]) -> Self append params to self. Keeps ref. to_dict to_dict ( include_archive : bool = True , include_scatter : bool = True ) -> dict to dict to_file to_file ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file to_file_async async to_file_async ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Asynchronously save to file Parameters: filename ( str | Path ) \u2013 The path of the file to write to. include_archive ( bool , default: False ) \u2013 Whether to include archive data, by default False include_scatter ( bool , default: False ) \u2013 Whether to include scatter data, by default False Returns: Path \u2013 The path to the file that was written. from_file classmethod from_file ( filename : str | Path , filedata : bytes | None = None ) -> 'Tbls' Read Tbls from file. Parameters: filename ( str | Path ) \u2013 The path to the file to read from. filedata ( bytes | None , default: None ) \u2013 The file data, if already loaded, by default None Returns: Tbls \u2013 The Tbls instance with tbl's loaded from file. from_file_async async classmethod from_file_async ( filename : str | Path ) -> Self Async tbls from file Parameters: filename ( str | Path ) \u2013 path Returns: Tbls \u2013 Tbls with tbl's from file __repr__ __repr__ () repr __getattr__ __getattr__ ( key : str ) -> Tbl __getitem__ __getitem__ ( key : str | list [ str ]) __setitem__ __setitem__ ( key : str , value : Tbl ) setitem __json__ __json__ () make serializable __iter__ __iter__ () iter Functions fit fit ( par : Tbl , data : ScatterData ) -> np . ndarray nd linear interpolation fitting calc_prec calc_prec ( data : npt . NDArray ) -> int Calc Precision. scatter_density scatter_density ( scatter_data : ScatterData , n_bins : int | list [ list ] = 50 ) Find the density in an nD scatter","title":"tbldata"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata-classes","text":"","title":"Classes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis","text":"CCG Parameter axis.","title":"Axis"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.name","text":"name = name","title":"name"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.unit","text":"unit = unit","title":"unit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.interp_method","text":"interp_method = interp_method","title":"interp_method"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.parent","text":"parent = parent","title":"parent"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.data_range","text":"data_range = data_range","title":"data_range"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.data","text":"data data.","title":"data"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.precision","text":"precision Return the number of decimals.","title":"precision"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.diff","text":"diff : NDArray [ float_ ] difference.","title":"diff"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.is_monotonic_increasing","text":"is_monotonic_increasing : bool Check if axis is monotonic.","title":"is_monotonic_increasing"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.n_bps","text":"n_bps : int Number of breakpoints.","title":"n_bps"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.min","text":"min min bp","title":"min"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.max","text":"max max bp","title":"max"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__init__","text":"__init__ ( data : npt . NDArray | list | Axis = None , name : str = None , unit : str = None , data_range : list = None , precision : int = None , interp_method : ccg . util . InterpMethod = '' , parent : Axes = None )","title":"__init__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.convert_units","text":"convert_units ( unit : str ) Convert units.","title":"convert_units"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.as_unit","text":"as_unit ( unit : str ) Return copy converted to unit.","title":"as_unit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.bins","text":"bins ( values : npt . NDArray | float , extrap : bool = True ) Return bin and interpolation factor of values.","title":"bins"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__len__","text":"__len__ () -> int Length.","title":"__len__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.to_dict","text":"to_dict () -> dict to dictionary.","title":"to_dict"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__repr__","text":"__repr__ () -> str repr","title":"__repr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__getitem__","text":"__getitem__ ( index )","title":"__getitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__setitem__","text":"__setitem__ ( index , value ) Triggers interp in parent axes if applicable.","title":"__setitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__json__","text":"__json__ () make serializable","title":"__json__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axis.__eq__","text":"__eq__ ( other : Axis ) -> bool equality","title":"__eq__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes","text":"CCG Parameter Axis collection.","title":"Axes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.interpolate_on_change","text":"interpolate_on_change = None","title":"interpolate_on_change"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.axes","text":"axes : list [ Axis ] = []","title":"axes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.parent","text":"parent = parent","title":"parent"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.shape","text":"shape : tuple Shape of axes bps","title":"shape"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.table_shape","text":"table_shape : tuple Shape of the expected data table. first axis is in cols (to match ecu standards), second in rows, beyond that they are stacked rows.","title":"table_shape"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.grid","text":"grid Return a meshgrid of the axis bps.","title":"grid"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.n_dim","text":"n_dim : int Number of Dimensions.","title":"n_dim"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.n_bps","text":"n_bps : int Number of breakpoints.","title":"n_bps"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__init__","text":"__init__ ( axes_data : list [ Axis ] | Axis | list [ dict ] | Axes = None , parent : Tbl = None , interpolate_on_change : bool = None )","title":"__init__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.append","text":"append ( axis : list [ Axis ] | Axis | list [ dict ] | Axes ) Append axis to Axes. Will not interp.","title":"append"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__iter__","text":"__iter__ () Iterate over Axes.","title":"__iter__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.to_dict","text":"to_dict () -> dict to dictionary.","title":"to_dict"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__repr__","text":"__repr__ () -> str repr","title":"__repr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__getattr__","text":"__getattr__ ( key : str ) -> Axis","title":"__getattr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__getitem__","text":"__getitem__ ( key ) -> Axis | list [ Axis ]","title":"__getitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__setitem__","text":"__setitem__ ( key : str | int , value : Axis ) Handle interpolation if needed.","title":"__setitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__json__","text":"__json__ () make serializable","title":"__json__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__eq__","text":"__eq__ ( other : Axes ) equal","title":"__eq__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.__contains__","text":"__contains__ ( key ) Check if key is an axis name in axes","title":"__contains__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Axes.index","text":"index ( key : str ) return axis index by name","title":"index"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData","text":"Class for storing scatter data to plot with a parameter.","title":"ScatterData"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.data","text":"data = data","title":"data"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.name","text":"name = name","title":"name"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color","text":"color = data","title":"color"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color_label","text":"color_label = color_name","title":"color_label"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color_unit","text":"color_unit = ''","title":"color_unit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.time","text":"time = time","title":"time"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.ndim","text":"ndim","title":"ndim"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.weight","text":"weight Weight","title":"weight"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color_range","text":"color_range Return Color Range","title":"color_range"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color_precision","text":"color_precision Return the number of decimals.","title":"color_precision"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.__init__","text":"__init__ ( data : list [ npt . NDArray | Sig ], name : str = None , color : npt . NDArray = None , weight : npt . NDArray | float = None , color_name : str = None , color_unit : str = None , color_range : list [ float ] = None , time : npt . NDArray = None )","title":"__init__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.color_from_density","text":"color_from_density ()","title":"color_from_density"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.clean","text":"clean ( sort = False ) remove any nan's","title":"clean"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.to_dict","text":"to_dict () to dict","title":"to_dict"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.__json__","text":"__json__ () to json","title":"__json__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.ScatterData.__repr__","text":"__repr__ () repr","title":"__repr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl","text":"CCG Parameter.","title":"Tbl"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.count","text":"count = None","title":"count"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.name","text":"name = name","title":"name"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.unit","text":"unit = unit","title":"unit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.data_range","text":"data_range = data_range","title":"data_range"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.f_orig","text":"f_orig = f_orig","title":"f_orig"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.created","text":"created = now ()","title":"created"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.interp_on_axis_change","text":"interp_on_axis_change Interpolate on axis change","title":"interp_on_axis_change"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.scatter_data","text":"scatter_data : list [ ScatterData ] Scatter data","title":"scatter_data"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.data","text":"data Return the table data.","title":"data"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.delta","text":"delta : NDArray Delta to original table.","title":"delta"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.delta_perc","text":"delta_perc : NDArray [ floating ] Percent delta to original table.","title":"delta_perc"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.f_smooth","text":"f_smooth Return f_smooth","title":"f_smooth"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.precision","text":"precision Return the number of decimals.","title":"precision"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.locked","text":"locked locked","title":"locked"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.periodic","text":"periodic Return periodic constraints.","title":"periodic"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.axes","text":"axes : Axes returns the axes.","title":"axes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.shape","text":"shape shape","title":"shape"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.dtype","text":"dtype dtype","title":"dtype"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.motec_shape","text":"motec_shape shape of base motec table","title":"motec_shape"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.orig","text":"orig Return copy of original param.","title":"orig"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.min","text":"min min value","title":"min"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.max","text":"max max value","title":"max"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.n_dim","text":"n_dim : int Number of Dimensions.","title":"n_dim"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.grid","text":"grid Axes BPs grid.","title":"grid"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__init__","text":"__init__ ( data : npt . NDArray | Tbl | list = None , axes : Axes | list = None , name : str = None , unit : str = None , data_range : list = None , precision : int = None , interp_on_axis_change : bool = True , archive : dict = None , scatter_data : ScatterData | list [ ScatterData ] = None , f_smooth : list [ float ] = None , f_orig : float = None , locked : npt . NDArray | list = None , periodic : list [ bool ] = None )","title":"__init__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.check_shape","text":"check_shape ( data : npt . NDArray , axes : Axes , name : str = None ) Check that shape is compatible, else raise ValueError.","title":"check_shape"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.snapshot","text":"snapshot ( name : str = None ) Archive current value.","title":"snapshot"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.convert_units","text":"convert_units ( unit : str ) Convert units in place.","title":"convert_units"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.as_unit","text":"as_unit ( unit : str ) Return copy converted to unit.","title":"as_unit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.data_color","text":"data_color ( colorscale = 'Turbo' , light_font = '#e5e5e5' , dark_font = '#434343' ) Get colors for table, makes use of plotly colorscales.","title":"data_color"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.prev","text":"prev () -> Tbl Return previous state of this param.","title":"prev"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.undo","text":"undo ( nsteps : int = None ) -> None Restore prev state of data and axes by nsteps. -1 is oldest undo.","title":"undo"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.clear_archive","text":"clear_archive () Clear archive.","title":"clear_archive"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.interp","text":"interp ( new_bps : Axes | npt . NDArray | Frame | Sig , extrapolate : bool = False ) Return data interpolated at new_bps. Parameters: new_bps ( Axes | NDArray | Frame | Sig ) \u2013 If new_bps is an ndarray it must be nsamples x nd, and the result will be nsamples, If new_bps is an Axes, it must have the same number of dimensions as the param. If new_bps is a Frame, it looks for signals matching axis names. extrapolate ( bool , default: False ) \u2013 saturate to bounds if False Returns: interpolated data, size of nsamples, if new_bps is ndarray or size of axes if new_bps is axes. \u2013","title":"interp"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.plot","text":"plot () -> Plot Generate plot","title":"plot"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.fit","text":"fit ( saturate = False ) Fit param if scatter data is present.","title":"fit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.to_dict","text":"to_dict ( include_archive : bool = True , include_scatter : bool = True ) -> dict To dict","title":"to_dict"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.to_file","text":"to_file ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file","title":"to_file"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.to_file_async","text":"to_file_async ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file asynchronously","title":"to_file_async"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.from_file_async","text":"from_file_async ( filename : str | Path ) Asynchronously load Tbl from file. Parameters: filename ( str | Path ) \u2013 The name of the file from which to load the data. If the file extension is not \".tbl.json\", it will be added. Returns: cls \u2013 An instance of Tbl, initialized with the data loaded from the file. Notes This method is asynchronous and should be awaited.","title":"from_file_async"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.from_file","text":"from_file ( filename : str | Path ) Synchronously load Tbl from file. Parameters: filename ( str | Path ) \u2013 The name of the file from which to load the data. If the file extension is not \".tbl.json\", it will be added. Returns: cls \u2013 An instance of Tbl, initialized with the data loaded from the file.","title":"from_file"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__add__","text":"__add__ ( other ) add, interpolate other if its a Param. returns new Param.","title":"__add__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__sub__","text":"__sub__ ( other ) subtract, interpolate other if its a Param. returns new Param.","title":"__sub__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__iadd__","text":"__iadd__ ( other ) add, interpolate other if its a Param. in place.","title":"__iadd__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__isub__","text":"__isub__ ( other ) subtract, interpolate other if its a Param. in place.","title":"__isub__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__radd__","text":"__radd__ ( other ) add, resamples to parent.math_tline if exists. returns new Param.","title":"__radd__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__rsub__","text":"__rsub__ ( other ) subtract, interpolate other if its a Param. returns new Param.","title":"__rsub__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__mul__","text":"__mul__ ( other ) multiply(elementwise), interpolate other if its a Param. returns new Param.","title":"__mul__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__truediv__","text":"__truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Param.","title":"__truediv__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__imul__","text":"__imul__ ( other ) multiply(elementwise), interpolate other if its a Param. returns new Param.","title":"__imul__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__itruediv__","text":"__itruediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Param.","title":"__itruediv__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__pow__","text":"__pow__ ( other ) power, resamples to parent.math_tline if exists. returns Param.","title":"__pow__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__abs__","text":"__abs__ () abs","title":"__abs__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__neg__","text":"__neg__ () neg","title":"__neg__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__eq__","text":"__eq__ ( other : Tbl ) -> bool Returns True if basics match.","title":"__eq__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__repr__","text":"__repr__ () -> str repr","title":"__repr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__getitem__","text":"__getitem__ ( index : list [ list ] | Axes | npt . NDArray | str | Frame )","title":"__getitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbl.__json__","text":"__json__ () make serializable","title":"__json__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls","text":"Collection of Param.","title":"Tbls"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.name","text":"name = None","title":"name"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.tbls","text":"tbls : dict [ str , Tbl ] = {}","title":"tbls"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__init__","text":"__init__ ( params : Tbls | Tbl | list [ Tbl | dict ] | None = None , name : str | None = None )","title":"__init__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.append","text":"append ( params : list [ Tbl ] | Tbls | Tbl | list [ dict ]) -> Self append params to self. Keeps ref.","title":"append"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.to_dict","text":"to_dict ( include_archive : bool = True , include_scatter : bool = True ) -> dict to dict","title":"to_dict"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.to_file","text":"to_file ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Save to file","title":"to_file"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.to_file_async","text":"to_file_async ( filename : str | Path , include_archive : bool = False , include_scatter : bool = False ) Asynchronously save to file Parameters: filename ( str | Path ) \u2013 The path of the file to write to. include_archive ( bool , default: False ) \u2013 Whether to include archive data, by default False include_scatter ( bool , default: False ) \u2013 Whether to include scatter data, by default False Returns: Path \u2013 The path to the file that was written.","title":"to_file_async"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.from_file","text":"from_file ( filename : str | Path , filedata : bytes | None = None ) -> 'Tbls' Read Tbls from file. Parameters: filename ( str | Path ) \u2013 The path to the file to read from. filedata ( bytes | None , default: None ) \u2013 The file data, if already loaded, by default None Returns: Tbls \u2013 The Tbls instance with tbl's loaded from file.","title":"from_file"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.from_file_async","text":"from_file_async ( filename : str | Path ) -> Self Async tbls from file Parameters: filename ( str | Path ) \u2013 path Returns: Tbls \u2013 Tbls with tbl's from file","title":"from_file_async"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__repr__","text":"__repr__ () repr","title":"__repr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__getattr__","text":"__getattr__ ( key : str ) -> Tbl","title":"__getattr__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__getitem__","text":"__getitem__ ( key : str | list [ str ])","title":"__getitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__setitem__","text":"__setitem__ ( key : str , value : Tbl ) setitem","title":"__setitem__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__json__","text":"__json__ () make serializable","title":"__json__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.Tbls.__iter__","text":"__iter__ () iter","title":"__iter__"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.fit","text":"fit ( par : Tbl , data : ScatterData ) -> np . ndarray nd linear interpolation fitting","title":"fit"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.calc_prec","text":"calc_prec ( data : npt . NDArray ) -> int Calc Precision.","title":"calc_prec"},{"location":"reference/ccg/data/tbldata/#ccg.data.tbldata.scatter_density","text":"scatter_density ( scatter_data : ScatterData , n_bins : int | list [ list ] = 50 ) Find the density in an nD scatter","title":"scatter_density"},{"location":"reference/ccg/data/tsdata/","text":"CCG Time Series data module. Attributes SIG_ATTRS module-attribute SIG_ATTRS = { 'data' , 'unit' , 'interp_method' , 'parent' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'data_range' } Classes Frame Collection of Time Series data. Parameters: data ( Sig | list [ Sig ] | None , default: None ) \u2013 TS Data, by default None. References to Sig will be broken. name ( str | None , default: None ) \u2013 Frame name, by default None math_tline ( TLine | None , default: None ) \u2013 TLine for Frame wide math, by default None Attributes: sigs ( dict [ str , Sig ] ) \u2013 dictionary of Sigs tlines ( TLineCollection ) \u2013 Collection of timelines, referenced by Sigs name ( str ) \u2013 Frame Name nsigs ( int ) \u2013 nsamples ( int ) \u2013 tend ( float | None ) \u2013 tstart ( float | None ) \u2013 tline ( TLine | None ) \u2013 Attributes CUTOFF class-attribute instance-attribute CUTOFF = 0.5 sigs instance-attribute sigs : dict [ str , Sig ] = {} tlines instance-attribute tlines = TLineCollection ( self ) name instance-attribute name = name math_tline instance-attribute math_tline = math_tline nsigs property nsigs : int Number of Sigs in collection. nsamples property nsamples : int Cumulative samples (counting unique timelines as well). tend property tend : float | None Latest end time from TLine collection. Returns: float \u2013 Time in unix. tstart property tstart : float | None Earliest start time from TLine collection. Returns: float \u2013 Time in unix. tend_iso property tend_iso : NDArray [ datetime64 ] Latest end time from TLine collection. Returns: float \u2013 Time in iso. tstart_iso property tstart_iso Earliest start time from TLine collection. Returns: float \u2013 Time in iso. tline property tline : TLine | None If frame has only one tline, return it. Functions __init__ __init__ ( data : Sig | list [ Sig ] | None = None , name : str | None = None , math_tline : TLine | None = None ) -> None resample resample ( sample_to : TLine , sigs : str | list [ str ] | None = None , inplace : bool | None = False , prefix : str | None = None , suffix : str | None = None , ** kwargs ) Resample Frame to a sample_to TLine. Parameters: sample_to ( TLine ) \u2013 TLine to resample to sigs ( str | list [ str ] | None , default: None ) \u2013 list of sigs to resample, full frame if None, by default None inplace ( bool | None , default: False ) \u2013 if True, will resample signals and append (id prefix or suffix is not None) or replace inplace. By default False prefix ( str | None , default: None ) \u2013 prefix to signame, by default None suffix ( str | None , default: None ) \u2013 suffix to signame, by default None **kwargs \u2013 Additional arguments passed to Sig.resample() Returns: Frame \u2013 Returns Self if inplace, else a new Frame append append ( item : Sig | Frame | list [ Sig ], append_existing_signals : bool = False , interweave_tlines : bool = False ) Append to CCG Frame in place. sort sort ( remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signals by timeline for monoton increasing. clear clear () Clears frame in place. clean_names clean_names () Cleans signal names. remove remove ( signames : str | list [ str ]) Removes sigs from frame. plot plot () Plot data frame. valid valid ( gatecoll : GateColl , tline : TLine | None = None ) -> Frame Returns a new Frame, invalid data replaced with nan. calc'd on tline or combined TLine if None Parameters: gatecoll ( GateColl ) \u2013 Collection of gating conditions tline ( TLine | None , default: None ) \u2013 TLine to calculate validity on, by default None Returns: Frame \u2013 New instance of Frame from_excel from_excel ( filename : str | Path , tline_col : int | str = None , signame_row : int = None , signame_regex : str = None , filedata : BytesIO | StringIO | bytes = None , sigunit_row : int = None , sigdata_row : int = None ) -> Frame Generate frame from excel file. Parameters: filename ( str | Path ) \u2013 tline_col ( int | str , default: None ) \u2013 Column to use for an index signame_row ( int , default: None ) \u2013 Row with names to parse with _regex signame_regex ( str , default: None ) \u2013 regex string to parse signal names. Use named groups for parameters to pass into Sig instatiation, for example name, units, etc. example here: https://regex101.com/r/bfBrdf/6 filedata ( BytesIO | StringIO | bytes , default: None ) \u2013 string or bytes io. filename will only be used for ext, name, etc. read_filedata read_filedata ( filename : Path , filedata : BytesIO | StringIO | bytes | None = None ) Reads file data for building frame from file __getattr__ __getattr__ ( signame : str ) -> Sig Provides dot notation access to Sigs if their names conform to dot notation. Parameters: signame ( str ) \u2013 Must conform to dot notation (no spaces or special characters, starts with non numeric char, etc.) Returns: Sig \u2013 Reference to Sig in Self __getitem__ __getitem__ ( index : Frame | list [ str ] | set [ str ] | tuple [ str ] | str | slice ) -> Frame | Sig Frame item getter. Parameters: index ( Frame | list [ str ] | slice | set [ str ] | str ) \u2013 Frame, list of Sig names, slice of Returns: Frame | Sig \u2013 New instance of Frame if index is Frame, list[str], slice. Reference to the Sig if str is a sig name. Examples: >>>TEST_LIST = [1.0, 2.0, 3.0] >>>TEST_ARR = np.array(TEST_LIST) >>>TEST_TIME = [0.0, 1.0, 2.0] >>>TEST_TLINE = TLine(TEST_TIME) >>>TEST_SIG = Sig(data=TEST_ARR, tline=TEST_TLINE, name=\"TestSig\") >>>assert frm[\"TestSig\"] == TEST_SIG # The reference to TEST_SIG was broken when appended to frm >>>assert frm[\"TestSig\"] is frm.sigs[\"TestSig\"] # The reference is preserved to the Sig in frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] is not frm # The reference is broken to frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] == frm >>>slicedfrm = frm[0:1.1] # sliced in time, with no step there is no resample >>>assert slicedfrm.tstart == 0.0 >>>assert slicedfrm.tend == 1.0 >>>assert slicedfrm.TestSig.nsamples == 2 # note 2 samples since no step was defined in slice >>>sliced_w_resample = frm[0:1.1:0.1] # Sliced in time, resamples to slice since step was defined. >>>assert sliced_w_resample.tstart == 0.0 >>>assert sliced_w_resample.tend == 1.0 >>>assert sliced_w_resample.TestSig.nsamples == 11 # note 2 samples since no step was defined in slice check_for_alt check_for_alt ( index ) Check for alternate name in case of missing dot notation __contains__ __contains__ ( key ) Checks if key is a signame in frame subset subset ( index : slice , sigs : list [ str ] = None ) Get a subset of frame. Allows slicing by signals and in timeline. __iter__ __iter__ () Iterate. __repr__ __repr__ () -> str Return repr string. __eq__ __eq__ ( other : Self ) -> bool Check equality. Sig CCG Sig class. Contains signal data and timeline. Parameters: data ( Sig | NDArray | list | None , default: None ) \u2013 Data source for the signal. tline ( TLine | None , default: None ) \u2013 Timeline instance for signal. Must be same length as data. name ( str | None , default: None ) \u2013 Signal name, must be unique in a Frame . unit ( str | None , default: None ) \u2013 Optional unit. interp_method ( InterpMethod | None , default: None ) \u2013 interpolation method for signal. parent ( Frame | None , default: None ) \u2013 Reference to the 'Frame' if this is in a frame. connect_gaps ( bool | None , default: None ) \u2013 Option for plotting using Plot data_enum ( SigEnum | None , default: None ) \u2013 Enumeration definition to alias values, used for plotting string data. data_range ( list [ float ] | None , default: None ) \u2013 Used for plot scaling. **kwargs \u2013 Argument for inserting unknown attributes. Attributes parent instance-attribute parent = parent connect_gaps instance-attribute connect_gaps = connect_gaps data_enum instance-attribute data_enum = data_enum base_data instance-attribute base_data = None interp_method instance-attribute interp_method = None tline instance-attribute tline = tline unit instance-attribute unit = unit data_range instance-attribute data_range = data_range name property writable name : str Return signal name. data property writable data : NDArray data getter max property max : NBitBase | None Max value. min property min : NBitBase | None Min value. nsamples property nsamples appx_bytes property appx_bytes Estimated size of data [bytes]. Excludes tline. tstart property tstart Start if tline. tend property tend End of tline. tstart_iso property tstart_iso Start if tline. tend_iso property tend_iso End of tline. period property period apprx period. Functions __init__ __init__ ( data : Sig | npt . NDArray | list | None = None , tline : TLine | None = None , name : str | None = None , unit : str | None = None , interp_method : InterpMethod | None = None , parent : Frame | None = None , connect_gaps : bool | None = None , data_enum : SigEnum | None = None , nsamples : int | None = None , dtype : npt . DTypeLike = None , data_range : list [ float ] | None = None , ** kwargs ) -> None calc_idn calc_idn () Calculate hash for IDN. append append ( sig : Sig , interweave_tlines = False , remove_duplicates = False ) Append sig to signal. convert_units convert_units ( unit : str ) -> Sig Convert units in place as_unit as_unit ( unit : str ) -> Sig return new sig converted to unit sort_tline sort_tline ( inplace = True , remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signal by timeline. Parameters: inplace \u2013 Sorts signal in place, returns None. remove_duplicates \u2013 Will remove duplicate timestamps if signal is also duplicated. Returns: Sig \u2013 self if inplace=True . plot_prep plot_prep () -> Sig Prepare for plotting. Sorts tline and removes duplicates. Inserts NaNs in gaps if connect_gaps=False | None . Applies enum if it exists. interp interp ( points : npt . NDArray | TLine , extrapolate : bool = False ) -> Sig Interpolate signal to points. resample resample ( sample_to : TLine , n_win : int = None , n_ord : int = None , gap_fraction : float = None , interp_gaps = False ) -> Sig Resample with Savitzky Golay filter. Parameters: sample_to ( TLine ) \u2013 TLine to resample to n_win ( int , default: None ) \u2013 window size, should be odd. Is relative to the sample_to index n_ord ( int , default: None ) \u2013 order of the fit gap_fraction ( float , default: None ) \u2013 size of a gap relative to the window size to interpolate between Returns: New resampled Sig \u2013 dot dot ( n_dot : int = 1 , n_win : int = 5 , n_ord : int = 3 ) Calculate Derivative of signal. Returns new sig. valid valid ( gatecoll : GateColl , frame : Frame = None ) Return new signal with invalid data replaced with nan's __len__ __len__ () -> int __repr__ __repr__ () -> str Return string representation. __str__ __str__ () -> str Return readable string. __add__ __add__ ( other ) add, resamples to parent.math_tline if exists. returns Sig. __sub__ __sub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig. __radd__ __radd__ ( other ) add, resamples to parent.math_tline if exists. returns Sig. __rsub__ __rsub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig. __mul__ __mul__ ( other ) multiply(elementwise), resamples to parent.math_tline if exists. returns Sig. __truediv__ __truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Sig. __pow__ __pow__ ( other ) power, resamples to parent.math_tline if exists. returns Sig. __abs__ __abs__ () abs __neg__ __neg__ () neg __eq__ __eq__ ( other ) -> bool Check equality. __getitem__ __getitem__ ( index : int | list [ int ] | slice | npt . NDArray ) Get item of Sig. __setitem__ __setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray | str ) Set item __iter__ __iter__ () Iterate. __next__ __next__ () Next. __deepcopy__ __deepcopy__ ( memo ) Deepcopy of a CCGSig. Referenced frame is removed. TLine CCG Time Line. Attributes __slots__ class-attribute instance-attribute __slots__ = ( '_iso' , '_sg' , '_datetime' , '_unix' , '_idn' , '_dt' , '_period' , '_is_monoton' , 'parent' , '_shape' , '_unix' , '_period' ) parent instance-attribute parent = parent unix property writable unix : NDArray [ float_ ] tline in unix idn property idn return id number. tstart property tstart : float Start time. tend property tend : float End time. tstart_iso property tstart_iso : datetime64 Start time. tend_iso property tend_iso : datetime64 End time. iso property iso : NDArray [ datetime64 ] Array of iso formatted strings. Naive, but in local tz. datetime property datetime : NDArray [ object_ ] Array of datetime.datetime. appx_bytes property appx_bytes Estimated size of data [bytes]. Excludes tline. dt property dt delta t period property period : float apprx period. nsamples property nsamples nsamples is_monotonic_increasing property is_monotonic_increasing Return true if monotonic increasing. Functions __init__ __init__ ( data : TLine | npt . NDArray [ np . object_ ] | npt . NDArray [ np . number ] | npt . NDArray [ np . datetime64 ] | datetime | list = None , tstart : float | datetime = None , tend : float | datetime = None , nsamples : int | tuple [ int ] = None , period : float = None , sg_coef : SgCoef = None , parent : TLineCollection = None ) calc_idn calc_idn () Calculate hash for IDN. __getitem__ __getitem__ ( ind : int | npt . NDArray [ np . int_ | np . bool_ ] | slice ) Index tline. __len__ __len__ () -> int Length of timeline. __repr__ __repr__ () -> str Return string representation. __str__ __str__ () -> str Return readable string. __eq__ __eq__ ( other ) -> bool Check equality. append_to_new append_to_new ( sig : Sig ) Append timeline from sig to tline. Returns new timeline. append_inplace append_inplace ( sig : Sig ) Append to tline in place. Dangerous if shared in a Frame. index_at_time index_at_time ( time : float | datetime ) -> int Get the index of the first tstamp >= time. sort sort () Sort tline. clear_cache clear_cache () Clear the cached values. savgol_coef savgol_coef ( sample_to_index : TLine , n_ord : int , n_win_orig : int , n_dot : int = 0 ) Calculate Savitzky Golay coeficients. TLineCollection Collection of timelines for Frame. Parameters: frame ( Frame ) \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( str | list [ str ] , default: None ) \u2013 required with tlines. If tlines is a list, must be equal length. If single tlines, can be a list. Attributes tlines instance-attribute tlines : dict [ int , TLine ] = {} idns instance-attribute idns : dict [ str , int ] = {} sigs instance-attribute sigs : dict [ int , list [ str ]] = {} frame instance-attribute frame = frame tstart property tstart Earliest tstart in collection. tend property tend Latest tend in collection. tstart_iso property tstart_iso Earliest start time in iso. tend_iso property tend_iso Latest end time in iso. n_tlines property n_tlines Number of tlines in collection. nsamples property nsamples Number of samples in collection. Functions __init__ __init__ ( frame : Frame , tlines : TLine | list [ TLine ] = None , signames : str | list [ str ] = None ) -> None append append ( frameorsig : Sig | Frame = None , tlines : TLine | list [ TLine ] = None , signames : list [ str ] | list [ list [ str ]] = None ) -> TLine Append tline to collection. Parameters: frame \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( list [ str ] | list [ list [ str ]] , default: None ) \u2013 required with tlines. Must be equal length list of lists of signames. Returns: CCGTimeline \u2013 check_sg check_sg ( tline : TLine ) Check for existing _sg coef. get_fastest get_fastest () Return the approximate fastest tline from coll. remove remove ( signame ) Remove timeline for signame from collection. If other signals still use it, it will simply remove the reference. replace replace ( old_tline : int | TLine , new_tline : TLine ) Replace the old_tline with new_tline in place. add_to_sigs add_to_sigs ( tline_idn : int , signame : str | list [ str ]) Add signal name to list. get_apprx_bytes get_apprx_bytes ( tline : TLine ) Gets the approximate size of the tline and its associated signals. Parameters: tline ( TLine ) \u2013 tline to get size for. Returns: Cumulative Bytes of tline and the signals associated with it. \u2013 __getitem__ __getitem__ ( index : str | int ) -> TLine __repr__ __repr__ () -> str Return string repr. __str__ __str__ () String rep. __eq__ __eq__ ( other ) -> bool Check equality. __contains__ __contains__ ( other ) -> bool SigEnum Enumeration definition for CCGSig. Parameters: definition ( dict ) \u2013 Dictionary of conversion values. \"\" is a special key, default for unmatched values if missing, np.nan will be used. Example enumdef = {'v1':1,'v2':2,'':0,} data = np.array(['v1','v2','v3']) testenum = SigEnum(definition=enumdef) testenum.data_to_enum(data) Attributes definition instance-attribute definition = definition Functions __init__ __init__ ( definition : dict ) data_to_enum data_to_enum ( data : npt . NDArray ) Convert base data to enumerated type. enum_to_data enum_to_data ( enum : npt . NDArray ) Convert enumerated data back to base data. SgCoef Store Savitzky Golay coeficients. Attributes __slots__ class-attribute instance-attribute __slots__ = ( 'orig_index' , 'sample_to_index' , 'n_win_orig' , 'n_ord' , 'conv' , 'uniqinvs' , 'n_uniq' , 'inds' ) orig_index instance-attribute orig_index = orig_index sample_to_index instance-attribute sample_to_index = sample_to_index n_win_orig instance-attribute n_win_orig = n_win_orig n_ord instance-attribute n_ord = n_ord conv instance-attribute conv = conv uniqinvs instance-attribute uniqinvs = uniqinvs n_uniq instance-attribute n_uniq = n_uniq inds instance-attribute inds = inds Functions __init__ __init__ ( orig_index : int = None , sample_to_index : int = None , n_win_orig : int = None , n_ord : int = None , conv : npt . NDArray = None , uniqinvs : npt . NDArray = None , n_uniq : int = None , inds : npt . NDArray = None ) clear clear () Clear SgCoef. Functions get_math_tline get_math_tline ( sig1 : Sig , sig2 : Sig | npt . NDArray | float | int ) returns timeline for math. sig1.parent.math_tline if it exits, or fastest. check_overlap check_overlap ( sig1 : Sig | TLine , sig2 : Sig | TLine , interweave_tlines : bool )","title":"tsdata"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SIG_ATTRS","text":"SIG_ATTRS = { 'data' , 'unit' , 'interp_method' , 'parent' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'data_range' }","title":"SIG_ATTRS"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata-classes","text":"","title":"Classes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame","text":"Collection of Time Series data. Parameters: data ( Sig | list [ Sig ] | None , default: None ) \u2013 TS Data, by default None. References to Sig will be broken. name ( str | None , default: None ) \u2013 Frame name, by default None math_tline ( TLine | None , default: None ) \u2013 TLine for Frame wide math, by default None Attributes: sigs ( dict [ str , Sig ] ) \u2013 dictionary of Sigs tlines ( TLineCollection ) \u2013 Collection of timelines, referenced by Sigs name ( str ) \u2013 Frame Name nsigs ( int ) \u2013 nsamples ( int ) \u2013 tend ( float | None ) \u2013 tstart ( float | None ) \u2013 tline ( TLine | None ) \u2013","title":"Frame"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.CUTOFF","text":"CUTOFF = 0.5","title":"CUTOFF"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.sigs","text":"sigs : dict [ str , Sig ] = {}","title":"sigs"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tlines","text":"tlines = TLineCollection ( self )","title":"tlines"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.name","text":"name = name","title":"name"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.math_tline","text":"math_tline = math_tline","title":"math_tline"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.nsigs","text":"nsigs : int Number of Sigs in collection.","title":"nsigs"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.nsamples","text":"nsamples : int Cumulative samples (counting unique timelines as well).","title":"nsamples"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tend","text":"tend : float | None Latest end time from TLine collection. Returns: float \u2013 Time in unix.","title":"tend"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tstart","text":"tstart : float | None Earliest start time from TLine collection. Returns: float \u2013 Time in unix.","title":"tstart"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tend_iso","text":"tend_iso : NDArray [ datetime64 ] Latest end time from TLine collection. Returns: float \u2013 Time in iso.","title":"tend_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tstart_iso","text":"tstart_iso Earliest start time from TLine collection. Returns: float \u2013 Time in iso.","title":"tstart_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.tline","text":"tline : TLine | None If frame has only one tline, return it.","title":"tline"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__init__","text":"__init__ ( data : Sig | list [ Sig ] | None = None , name : str | None = None , math_tline : TLine | None = None ) -> None","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.resample","text":"resample ( sample_to : TLine , sigs : str | list [ str ] | None = None , inplace : bool | None = False , prefix : str | None = None , suffix : str | None = None , ** kwargs ) Resample Frame to a sample_to TLine. Parameters: sample_to ( TLine ) \u2013 TLine to resample to sigs ( str | list [ str ] | None , default: None ) \u2013 list of sigs to resample, full frame if None, by default None inplace ( bool | None , default: False ) \u2013 if True, will resample signals and append (id prefix or suffix is not None) or replace inplace. By default False prefix ( str | None , default: None ) \u2013 prefix to signame, by default None suffix ( str | None , default: None ) \u2013 suffix to signame, by default None **kwargs \u2013 Additional arguments passed to Sig.resample() Returns: Frame \u2013 Returns Self if inplace, else a new Frame","title":"resample"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.append","text":"append ( item : Sig | Frame | list [ Sig ], append_existing_signals : bool = False , interweave_tlines : bool = False ) Append to CCG Frame in place.","title":"append"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.sort","text":"sort ( remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signals by timeline for monoton increasing.","title":"sort"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.clear","text":"clear () Clears frame in place.","title":"clear"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.clean_names","text":"clean_names () Cleans signal names.","title":"clean_names"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.remove","text":"remove ( signames : str | list [ str ]) Removes sigs from frame.","title":"remove"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.plot","text":"plot () Plot data frame.","title":"plot"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.valid","text":"valid ( gatecoll : GateColl , tline : TLine | None = None ) -> Frame Returns a new Frame, invalid data replaced with nan. calc'd on tline or combined TLine if None Parameters: gatecoll ( GateColl ) \u2013 Collection of gating conditions tline ( TLine | None , default: None ) \u2013 TLine to calculate validity on, by default None Returns: Frame \u2013 New instance of Frame","title":"valid"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.from_excel","text":"from_excel ( filename : str | Path , tline_col : int | str = None , signame_row : int = None , signame_regex : str = None , filedata : BytesIO | StringIO | bytes = None , sigunit_row : int = None , sigdata_row : int = None ) -> Frame Generate frame from excel file. Parameters: filename ( str | Path ) \u2013 tline_col ( int | str , default: None ) \u2013 Column to use for an index signame_row ( int , default: None ) \u2013 Row with names to parse with _regex signame_regex ( str , default: None ) \u2013 regex string to parse signal names. Use named groups for parameters to pass into Sig instatiation, for example name, units, etc. example here: https://regex101.com/r/bfBrdf/6 filedata ( BytesIO | StringIO | bytes , default: None ) \u2013 string or bytes io. filename will only be used for ext, name, etc.","title":"from_excel"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.read_filedata","text":"read_filedata ( filename : Path , filedata : BytesIO | StringIO | bytes | None = None ) Reads file data for building frame from file","title":"read_filedata"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__getattr__","text":"__getattr__ ( signame : str ) -> Sig Provides dot notation access to Sigs if their names conform to dot notation. Parameters: signame ( str ) \u2013 Must conform to dot notation (no spaces or special characters, starts with non numeric char, etc.) Returns: Sig \u2013 Reference to Sig in Self","title":"__getattr__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__getitem__","text":"__getitem__ ( index : Frame | list [ str ] | set [ str ] | tuple [ str ] | str | slice ) -> Frame | Sig Frame item getter. Parameters: index ( Frame | list [ str ] | slice | set [ str ] | str ) \u2013 Frame, list of Sig names, slice of Returns: Frame | Sig \u2013 New instance of Frame if index is Frame, list[str], slice. Reference to the Sig if str is a sig name. Examples: >>>TEST_LIST = [1.0, 2.0, 3.0] >>>TEST_ARR = np.array(TEST_LIST) >>>TEST_TIME = [0.0, 1.0, 2.0] >>>TEST_TLINE = TLine(TEST_TIME) >>>TEST_SIG = Sig(data=TEST_ARR, tline=TEST_TLINE, name=\"TestSig\") >>>assert frm[\"TestSig\"] == TEST_SIG # The reference to TEST_SIG was broken when appended to frm >>>assert frm[\"TestSig\"] is frm.sigs[\"TestSig\"] # The reference is preserved to the Sig in frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] is not frm # The reference is broken to frm >>>assert frm[[\"TestSig\", \"TestSig2\"]] == frm >>>slicedfrm = frm[0:1.1] # sliced in time, with no step there is no resample >>>assert slicedfrm.tstart == 0.0 >>>assert slicedfrm.tend == 1.0 >>>assert slicedfrm.TestSig.nsamples == 2 # note 2 samples since no step was defined in slice >>>sliced_w_resample = frm[0:1.1:0.1] # Sliced in time, resamples to slice since step was defined. >>>assert sliced_w_resample.tstart == 0.0 >>>assert sliced_w_resample.tend == 1.0 >>>assert sliced_w_resample.TestSig.nsamples == 11 # note 2 samples since no step was defined in slice","title":"__getitem__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.check_for_alt","text":"check_for_alt ( index ) Check for alternate name in case of missing dot notation","title":"check_for_alt"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__contains__","text":"__contains__ ( key ) Checks if key is a signame in frame","title":"__contains__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.subset","text":"subset ( index : slice , sigs : list [ str ] = None ) Get a subset of frame. Allows slicing by signals and in timeline.","title":"subset"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__iter__","text":"__iter__ () Iterate.","title":"__iter__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__repr__","text":"__repr__ () -> str Return repr string.","title":"__repr__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Frame.__eq__","text":"__eq__ ( other : Self ) -> bool Check equality.","title":"__eq__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig","text":"CCG Sig class. Contains signal data and timeline. Parameters: data ( Sig | NDArray | list | None , default: None ) \u2013 Data source for the signal. tline ( TLine | None , default: None ) \u2013 Timeline instance for signal. Must be same length as data. name ( str | None , default: None ) \u2013 Signal name, must be unique in a Frame . unit ( str | None , default: None ) \u2013 Optional unit. interp_method ( InterpMethod | None , default: None ) \u2013 interpolation method for signal. parent ( Frame | None , default: None ) \u2013 Reference to the 'Frame' if this is in a frame. connect_gaps ( bool | None , default: None ) \u2013 Option for plotting using Plot data_enum ( SigEnum | None , default: None ) \u2013 Enumeration definition to alias values, used for plotting string data. data_range ( list [ float ] | None , default: None ) \u2013 Used for plot scaling. **kwargs \u2013 Argument for inserting unknown attributes.","title":"Sig"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.parent","text":"parent = parent","title":"parent"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.connect_gaps","text":"connect_gaps = connect_gaps","title":"connect_gaps"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.data_enum","text":"data_enum = data_enum","title":"data_enum"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.base_data","text":"base_data = None","title":"base_data"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.interp_method","text":"interp_method = None","title":"interp_method"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.tline","text":"tline = tline","title":"tline"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.unit","text":"unit = unit","title":"unit"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.data_range","text":"data_range = data_range","title":"data_range"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.name","text":"name : str Return signal name.","title":"name"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.data","text":"data : NDArray data getter","title":"data"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.max","text":"max : NBitBase | None Max value.","title":"max"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.min","text":"min : NBitBase | None Min value.","title":"min"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.nsamples","text":"nsamples","title":"nsamples"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.appx_bytes","text":"appx_bytes Estimated size of data [bytes]. Excludes tline.","title":"appx_bytes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.tstart","text":"tstart Start if tline.","title":"tstart"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.tend","text":"tend End of tline.","title":"tend"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.tstart_iso","text":"tstart_iso Start if tline.","title":"tstart_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.tend_iso","text":"tend_iso End of tline.","title":"tend_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.period","text":"period apprx period.","title":"period"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__init__","text":"__init__ ( data : Sig | npt . NDArray | list | None = None , tline : TLine | None = None , name : str | None = None , unit : str | None = None , interp_method : InterpMethod | None = None , parent : Frame | None = None , connect_gaps : bool | None = None , data_enum : SigEnum | None = None , nsamples : int | None = None , dtype : npt . DTypeLike = None , data_range : list [ float ] | None = None , ** kwargs ) -> None","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.calc_idn","text":"calc_idn () Calculate hash for IDN.","title":"calc_idn"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.append","text":"append ( sig : Sig , interweave_tlines = False , remove_duplicates = False ) Append sig to signal.","title":"append"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.convert_units","text":"convert_units ( unit : str ) -> Sig Convert units in place","title":"convert_units"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.as_unit","text":"as_unit ( unit : str ) -> Sig return new sig converted to unit","title":"as_unit"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.sort_tline","text":"sort_tline ( inplace = True , remove_safe_duplicates = False , remove_all_duplicates = False ) Sort signal by timeline. Parameters: inplace \u2013 Sorts signal in place, returns None. remove_duplicates \u2013 Will remove duplicate timestamps if signal is also duplicated. Returns: Sig \u2013 self if inplace=True .","title":"sort_tline"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.plot_prep","text":"plot_prep () -> Sig Prepare for plotting. Sorts tline and removes duplicates. Inserts NaNs in gaps if connect_gaps=False | None . Applies enum if it exists.","title":"plot_prep"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.interp","text":"interp ( points : npt . NDArray | TLine , extrapolate : bool = False ) -> Sig Interpolate signal to points.","title":"interp"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.resample","text":"resample ( sample_to : TLine , n_win : int = None , n_ord : int = None , gap_fraction : float = None , interp_gaps = False ) -> Sig Resample with Savitzky Golay filter. Parameters: sample_to ( TLine ) \u2013 TLine to resample to n_win ( int , default: None ) \u2013 window size, should be odd. Is relative to the sample_to index n_ord ( int , default: None ) \u2013 order of the fit gap_fraction ( float , default: None ) \u2013 size of a gap relative to the window size to interpolate between Returns: New resampled Sig \u2013","title":"resample"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.dot","text":"dot ( n_dot : int = 1 , n_win : int = 5 , n_ord : int = 3 ) Calculate Derivative of signal. Returns new sig.","title":"dot"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.valid","text":"valid ( gatecoll : GateColl , frame : Frame = None ) Return new signal with invalid data replaced with nan's","title":"valid"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__len__","text":"__len__ () -> int","title":"__len__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__repr__","text":"__repr__ () -> str Return string representation.","title":"__repr__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__str__","text":"__str__ () -> str Return readable string.","title":"__str__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__add__","text":"__add__ ( other ) add, resamples to parent.math_tline if exists. returns Sig.","title":"__add__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__sub__","text":"__sub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig.","title":"__sub__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__radd__","text":"__radd__ ( other ) add, resamples to parent.math_tline if exists. returns Sig.","title":"__radd__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__rsub__","text":"__rsub__ ( other ) subtract, resamples to parent.math_tline if exists. returns Sig.","title":"__rsub__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__mul__","text":"__mul__ ( other ) multiply(elementwise), resamples to parent.math_tline if exists. returns Sig.","title":"__mul__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__truediv__","text":"__truediv__ ( other ) divide(elementwise), resamples to parent.math_tline if exists. returns Sig.","title":"__truediv__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__pow__","text":"__pow__ ( other ) power, resamples to parent.math_tline if exists. returns Sig.","title":"__pow__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__abs__","text":"__abs__ () abs","title":"__abs__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__neg__","text":"__neg__ () neg","title":"__neg__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__getitem__","text":"__getitem__ ( index : int | list [ int ] | slice | npt . NDArray ) Get item of Sig.","title":"__getitem__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__setitem__","text":"__setitem__ ( index : tuple [ slice | list | int | npt . NDArray ] | slice , value : list | npt . NDArray | str ) Set item","title":"__setitem__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__iter__","text":"__iter__ () Iterate.","title":"__iter__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__next__","text":"__next__ () Next.","title":"__next__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.Sig.__deepcopy__","text":"__deepcopy__ ( memo ) Deepcopy of a CCGSig. Referenced frame is removed.","title":"__deepcopy__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine","text":"CCG Time Line.","title":"TLine"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__slots__","text":"__slots__ = ( '_iso' , '_sg' , '_datetime' , '_unix' , '_idn' , '_dt' , '_period' , '_is_monoton' , 'parent' , '_shape' , '_unix' , '_period' )","title":"__slots__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.parent","text":"parent = parent","title":"parent"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.unix","text":"unix : NDArray [ float_ ] tline in unix","title":"unix"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.idn","text":"idn return id number.","title":"idn"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.tstart","text":"tstart : float Start time.","title":"tstart"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.tend","text":"tend : float End time.","title":"tend"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.tstart_iso","text":"tstart_iso : datetime64 Start time.","title":"tstart_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.tend_iso","text":"tend_iso : datetime64 End time.","title":"tend_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.iso","text":"iso : NDArray [ datetime64 ] Array of iso formatted strings. Naive, but in local tz.","title":"iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.datetime","text":"datetime : NDArray [ object_ ] Array of datetime.datetime.","title":"datetime"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.appx_bytes","text":"appx_bytes Estimated size of data [bytes]. Excludes tline.","title":"appx_bytes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.dt","text":"dt delta t","title":"dt"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.period","text":"period : float apprx period.","title":"period"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.nsamples","text":"nsamples nsamples","title":"nsamples"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.is_monotonic_increasing","text":"is_monotonic_increasing Return true if monotonic increasing.","title":"is_monotonic_increasing"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__init__","text":"__init__ ( data : TLine | npt . NDArray [ np . object_ ] | npt . NDArray [ np . number ] | npt . NDArray [ np . datetime64 ] | datetime | list = None , tstart : float | datetime = None , tend : float | datetime = None , nsamples : int | tuple [ int ] = None , period : float = None , sg_coef : SgCoef = None , parent : TLineCollection = None )","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.calc_idn","text":"calc_idn () Calculate hash for IDN.","title":"calc_idn"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__getitem__","text":"__getitem__ ( ind : int | npt . NDArray [ np . int_ | np . bool_ ] | slice ) Index tline.","title":"__getitem__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__len__","text":"__len__ () -> int Length of timeline.","title":"__len__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__repr__","text":"__repr__ () -> str Return string representation.","title":"__repr__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__str__","text":"__str__ () -> str Return readable string.","title":"__str__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.append_to_new","text":"append_to_new ( sig : Sig ) Append timeline from sig to tline. Returns new timeline.","title":"append_to_new"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.append_inplace","text":"append_inplace ( sig : Sig ) Append to tline in place. Dangerous if shared in a Frame.","title":"append_inplace"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.index_at_time","text":"index_at_time ( time : float | datetime ) -> int Get the index of the first tstamp >= time.","title":"index_at_time"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.sort","text":"sort () Sort tline.","title":"sort"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.clear_cache","text":"clear_cache () Clear the cached values.","title":"clear_cache"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLine.savgol_coef","text":"savgol_coef ( sample_to_index : TLine , n_ord : int , n_win_orig : int , n_dot : int = 0 ) Calculate Savitzky Golay coeficients.","title":"savgol_coef"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection","text":"Collection of timelines for Frame. Parameters: frame ( Frame ) \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( str | list [ str ] , default: None ) \u2013 required with tlines. If tlines is a list, must be equal length. If single tlines, can be a list.","title":"TLineCollection"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.tlines","text":"tlines : dict [ int , TLine ] = {}","title":"tlines"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.idns","text":"idns : dict [ str , int ] = {}","title":"idns"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.sigs","text":"sigs : dict [ int , list [ str ]] = {}","title":"sigs"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.frame","text":"frame = frame","title":"frame"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.tstart","text":"tstart Earliest tstart in collection.","title":"tstart"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.tend","text":"tend Latest tend in collection.","title":"tend"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.tstart_iso","text":"tstart_iso Earliest start time in iso.","title":"tstart_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.tend_iso","text":"tend_iso Latest end time in iso.","title":"tend_iso"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.n_tlines","text":"n_tlines Number of tlines in collection.","title":"n_tlines"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.nsamples","text":"nsamples Number of samples in collection.","title":"nsamples"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__init__","text":"__init__ ( frame : Frame , tlines : TLine | list [ TLine ] = None , signames : str | list [ str ] = None ) -> None","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.append","text":"append ( frameorsig : Sig | Frame = None , tlines : TLine | list [ TLine ] = None , signames : list [ str ] | list [ list [ str ]] = None ) -> TLine Append tline to collection. Parameters: frame \u2013 optional Frame to get timelines from. tlines ( TLine | list [ TLine ] , default: None ) \u2013 optional CCGTline or list of CCGTline. If used, signames is required. signames ( list [ str ] | list [ list [ str ]] , default: None ) \u2013 required with tlines. Must be equal length list of lists of signames. Returns: CCGTimeline \u2013","title":"append"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.check_sg","text":"check_sg ( tline : TLine ) Check for existing _sg coef.","title":"check_sg"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.get_fastest","text":"get_fastest () Return the approximate fastest tline from coll.","title":"get_fastest"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.remove","text":"remove ( signame ) Remove timeline for signame from collection. If other signals still use it, it will simply remove the reference.","title":"remove"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.replace","text":"replace ( old_tline : int | TLine , new_tline : TLine ) Replace the old_tline with new_tline in place.","title":"replace"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.add_to_sigs","text":"add_to_sigs ( tline_idn : int , signame : str | list [ str ]) Add signal name to list.","title":"add_to_sigs"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.get_apprx_bytes","text":"get_apprx_bytes ( tline : TLine ) Gets the approximate size of the tline and its associated signals. Parameters: tline ( TLine ) \u2013 tline to get size for. Returns: Cumulative Bytes of tline and the signals associated with it. \u2013","title":"get_apprx_bytes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__getitem__","text":"__getitem__ ( index : str | int ) -> TLine","title":"__getitem__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__repr__","text":"__repr__ () -> str Return string repr.","title":"__repr__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__str__","text":"__str__ () String rep.","title":"__str__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__eq__","text":"__eq__ ( other ) -> bool Check equality.","title":"__eq__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.TLineCollection.__contains__","text":"__contains__ ( other ) -> bool","title":"__contains__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum","text":"Enumeration definition for CCGSig. Parameters: definition ( dict ) \u2013 Dictionary of conversion values. \"\" is a special key, default for unmatched values if missing, np.nan will be used. Example enumdef = {'v1':1,'v2':2,'':0,} data = np.array(['v1','v2','v3']) testenum = SigEnum(definition=enumdef) testenum.data_to_enum(data)","title":"SigEnum"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum.definition","text":"definition = definition","title":"definition"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum.__init__","text":"__init__ ( definition : dict )","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum.data_to_enum","text":"data_to_enum ( data : npt . NDArray ) Convert base data to enumerated type.","title":"data_to_enum"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SigEnum.enum_to_data","text":"enum_to_data ( enum : npt . NDArray ) Convert enumerated data back to base data.","title":"enum_to_data"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef","text":"Store Savitzky Golay coeficients.","title":"SgCoef"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.__slots__","text":"__slots__ = ( 'orig_index' , 'sample_to_index' , 'n_win_orig' , 'n_ord' , 'conv' , 'uniqinvs' , 'n_uniq' , 'inds' )","title":"__slots__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.orig_index","text":"orig_index = orig_index","title":"orig_index"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.sample_to_index","text":"sample_to_index = sample_to_index","title":"sample_to_index"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.n_win_orig","text":"n_win_orig = n_win_orig","title":"n_win_orig"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.n_ord","text":"n_ord = n_ord","title":"n_ord"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.conv","text":"conv = conv","title":"conv"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.uniqinvs","text":"uniqinvs = uniqinvs","title":"uniqinvs"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.n_uniq","text":"n_uniq = n_uniq","title":"n_uniq"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.inds","text":"inds = inds","title":"inds"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.__init__","text":"__init__ ( orig_index : int = None , sample_to_index : int = None , n_win_orig : int = None , n_ord : int = None , conv : npt . NDArray = None , uniqinvs : npt . NDArray = None , n_uniq : int = None , inds : npt . NDArray = None )","title":"__init__"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.SgCoef.clear","text":"clear () Clear SgCoef.","title":"clear"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata-functions","text":"","title":"Functions"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.get_math_tline","text":"get_math_tline ( sig1 : Sig , sig2 : Sig | npt . NDArray | float | int ) returns timeline for math. sig1.parent.math_tline if it exits, or fastest.","title":"get_math_tline"},{"location":"reference/ccg/data/tsdata/#ccg.data.tsdata.check_overlap","text":"check_overlap ( sig1 : Sig | TLine , sig2 : Sig | TLine , interweave_tlines : bool )","title":"check_overlap"},{"location":"reference/ccg/db/","text":"","title":"db"},{"location":"reference/ccg/db/mongo/","text":"CCG Database driver for MongoDB. Attributes DOC_MAXSIZE module-attribute DOC_MAXSIZE = 12000000 F_SPLIT_GUESS module-attribute F_SPLIT_GUESS = 0.8 CUR_BIN_VER module-attribute CUR_BIN_VER = 3 IDN module-attribute IDN = '_id' TSTART module-attribute TSTART = 'ts' TEND module-attribute TEND = 'te' TYPE module-attribute TYPE = 't' DATA module-attribute DATA = 'd' UNIT module-attribute UNIT = 'u' NAME module-attribute NAME = 'n' SIGS module-attribute SIGS = 's' SIG_LIST module-attribute SIG_LIST = 'sl' NSAMPLES module-attribute NSAMPLES = 'ns' TLINE module-attribute TLINE = 'tl' INTERP_METHOD module-attribute INTERP_METHOD = 'im' DATA_ENUM module-attribute DATA_ENUM = 'de' FRAME_NAME module-attribute FRAME_NAME = 'fn' CONNECT_GAPS module-attribute CONNECT_GAPS = 'cg' UNK_KEYS module-attribute UNK_KEYS = 'unk' BIN_VER module-attribute BIN_VER = 'bv' SIG_ATTRS module-attribute SIG_ATTRS = { 0 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' }, 1 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' }, 2 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' }, 3 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'parent' }} Classes Client MongoDB connection client. Manages connection to MongoDB. Parameters: dbpass ( str , default: None ) \u2013 user level password for database auth. dbuser ( str , default: None ) \u2013 user level username for database auth. dbadmin \u2013 Admin level username. Only required for changing permissions, new databases, etc. dbadminpass \u2013 Admin level password. dbloc ( str , default: 'localhost' ) \u2013 DB location or connection string. dbauthsrc ( str , default: 'admin' ) \u2013 DB for authentication, usually \"admin\" . dbrepset ( str , default: None ) \u2013 Replica set name. Attributes client instance-attribute client = MongoClient ( connstr ) Functions __init__ __init__ ( dbpass : str = None , dbuser : str = None , dbloc : str = 'localhost' , dbauthsrc : str = 'admin' , dbrepset : str = None ) -> None list_dbs list_dbs () List data bases __getattr__ __getattr__ ( db_name : str ) Get a database from client. __getitem__ __getitem__ ( db_name : str ) Get a database from client. DB Database instance. Functions __init__ __init__ ( db : Database ) list_colls list_colls () List collections in DB is_coll is_coll ( coll_name : str ) Returns True if coll in DB collections. __getattr__ __getattr__ ( coll_name : str ) Get a collection from database. __getitem__ __getitem__ ( coll_name : str ) Get a collection from database. __iter__ __iter__ () Define to avoid accidentally creating collection. Coll Database collection. Attributes indexes class-attribute instance-attribute indexes = [ IndexModel ([( SIG_LIST , ASCENDING ), ( TEND , ASCENDING ), ( TSTART , ASCENDING )]), IndexModel ([( SIGS + '.' + NAME , ASCENDING ), ( TEND , ASCENDING ), ( TSTART , ASCENDING )]), IndexModel ([( TEND , ASCENDING )])] coll instance-attribute coll = coll Functions __init__ __init__ ( coll : Collection ) check_index check_index () Create indexes if they dont exist. get_details get_details () Get collection details. drop drop () Drop collection. list_sigs list_sigs () list signals in collection write write ( data : Frame | Sig , allow_overlapping = False , replace_ids : list [ ObjectId ] = None ) Write data to collection. Parameters: data ( Frame | Sig ) \u2013 data frame or sig to write to collection. allow_overlapping \u2013 If True, this will read documents with overlapping timelines, append and interweave the data, then write to the collection. replace_ids ( list [ ObjectId ] , default: None ) \u2013 List of ObjectIds to replace in the write op. Assumes that req'd manipulations have already been performed on data . read read ( sigs : list [ str ] = None , tstart : datetime | float = None , tend : datetime | float = None ) -> Frame Read data from collection. Parameters: sigs ( list [ str ] , default: None ) \u2013 List of signal names to read. Reads all if sigs=None . tstart ( datetime | float , default: None ) \u2013 Start time in unix to read from. Reads all if tstart=None . tend ( datetime | float , default: None ) \u2013 End time in unix. Reads all if tend=None . Returns: CCGFrame \u2013 CCGFrame read from collection. read_full_docs read_full_docs ( sigs : list [ str ] = None , tstart : datetime | float = None , tend : datetime | float = None , exclude_ids : list [ ObjectId ] = None ) -> tuple [ Frame , list [ ObjectId ]] Read documents from collection. Parameters: sigs ( list [ str ] , default: None ) \u2013 List of signal names to read. Reads all if sigs=None . tstart ( datetime | float , default: None ) \u2013 Start time in unix to read from. Reads all if tstart=None . tend ( datetime | float , default: None ) \u2013 End time in unix. Reads all if tend=None . exclude_ids ( list [ ObjectId ] , default: None ) \u2013 Will not read docs with _id in exclude_ids , Returns: CCGFrame \u2013 CCGFrame read from collection. list [ ObjectId ] \u2013 document id's read from DB. check_overlapping check_overlapping ( frame : Frame , exclude_ids : list [ ObjectId ] = None ) Check collection for tline overlap for this frame. Parameters: frame ( Frame ) \u2013 Data to compare to db for signal and timeline overlap. exclude_ids ( list [ ObjectId ] , default: None ) \u2013 List of document ids to exclude from the comparison. Useful when modifying docs. get_tstart get_tstart ( signame : str ) -> float Get start time of sig in collection. get_tend get_tend ( signame : str ) -> float Get end time of sig in collection. get_overlapping get_overlapping ( frame : Frame , exclude_ids : list [ ObjectId ] = None ) -> tuple [ Frame , list [ ObjectId ]] Read overlapping data and append to frame. __getattr__ __getattr__ ( coll_name : str ) Get a sub collection from this collection. __getitem__ __getitem__ ( coll_name : str ) Get a sub collection from this collection. __iter__ __iter__ () DBErr Bases: Exception CCGDB Error. OverlappingData Bases: DBErr Overlapping data in collection. DeletionError Bases: DBErr Issue deleting docs in collection. Functions to_docs to_docs ( data : Frame ) -> list [ dict ] Bin CCGFrame data to a list of dicts. Docs for MongoDB. to_doc to_doc ( data : Frame , tline : TLine , ensure_encodable = False ) Build doc for MongoDB. Parameters: data ( Frame ) \u2013 CCGFrame to get data from. tline ( TLine ) \u2013 Tline for this document, will get the signal data corresponding to this tline from data. Returns: Dict for MongoDB. \u2013 docs_to_frame docs_to_frame ( docs : Cursor , sig_details : dict [ str , dict [ str , Any ]] = None ) -> tuple [ Frame , list [ ObjectId ]] Build CCGFrame from DB docs. Parameters: docs ( Cursor ) \u2013 pymongo cursor to documents. sigs \u2013 dict of {signame:{nsamples:int, dtype:str}} for pre-allocation. Returns: Frame of data \u2013 list[ObjectId] of document id's \u2013","title":"mongo"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DOC_MAXSIZE","text":"DOC_MAXSIZE = 12000000","title":"DOC_MAXSIZE"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.F_SPLIT_GUESS","text":"F_SPLIT_GUESS = 0.8","title":"F_SPLIT_GUESS"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.CUR_BIN_VER","text":"CUR_BIN_VER = 3","title":"CUR_BIN_VER"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.IDN","text":"IDN = '_id'","title":"IDN"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.TSTART","text":"TSTART = 'ts'","title":"TSTART"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.TEND","text":"TEND = 'te'","title":"TEND"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.TYPE","text":"TYPE = 't'","title":"TYPE"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DATA","text":"DATA = 'd'","title":"DATA"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.UNIT","text":"UNIT = 'u'","title":"UNIT"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.NAME","text":"NAME = 'n'","title":"NAME"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.SIGS","text":"SIGS = 's'","title":"SIGS"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.SIG_LIST","text":"SIG_LIST = 'sl'","title":"SIG_LIST"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.NSAMPLES","text":"NSAMPLES = 'ns'","title":"NSAMPLES"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.TLINE","text":"TLINE = 'tl'","title":"TLINE"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.INTERP_METHOD","text":"INTERP_METHOD = 'im'","title":"INTERP_METHOD"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DATA_ENUM","text":"DATA_ENUM = 'de'","title":"DATA_ENUM"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.FRAME_NAME","text":"FRAME_NAME = 'fn'","title":"FRAME_NAME"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.CONNECT_GAPS","text":"CONNECT_GAPS = 'cg'","title":"CONNECT_GAPS"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.UNK_KEYS","text":"UNK_KEYS = 'unk'","title":"UNK_KEYS"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.BIN_VER","text":"BIN_VER = 'bv'","title":"BIN_VER"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.SIG_ATTRS","text":"SIG_ATTRS = { 0 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' }, 1 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' }, 2 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' }, 3 : { 'data' , 'unit' , 'interp_method' , 'frame' , 'name' , 'tline' , 'appx_bytes' , 'max' , 'min' , 'nsamples' , 'tend' , 'tstart' , 'data_enum' , 'connect_gaps' , 'base_data' , 'tstart_iso' , 'tend_iso' , 'parent' }}","title":"SIG_ATTRS"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo-classes","text":"","title":"Classes"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client","text":"MongoDB connection client. Manages connection to MongoDB. Parameters: dbpass ( str , default: None ) \u2013 user level password for database auth. dbuser ( str , default: None ) \u2013 user level username for database auth. dbadmin \u2013 Admin level username. Only required for changing permissions, new databases, etc. dbadminpass \u2013 Admin level password. dbloc ( str , default: 'localhost' ) \u2013 DB location or connection string. dbauthsrc ( str , default: 'admin' ) \u2013 DB for authentication, usually \"admin\" . dbrepset ( str , default: None ) \u2013 Replica set name.","title":"Client"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client.client","text":"client = MongoClient ( connstr )","title":"client"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client-functions","text":"","title":"Functions"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client.__init__","text":"__init__ ( dbpass : str = None , dbuser : str = None , dbloc : str = 'localhost' , dbauthsrc : str = 'admin' , dbrepset : str = None ) -> None","title":"__init__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client.list_dbs","text":"list_dbs () List data bases","title":"list_dbs"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client.__getattr__","text":"__getattr__ ( db_name : str ) Get a database from client.","title":"__getattr__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Client.__getitem__","text":"__getitem__ ( db_name : str ) Get a database from client.","title":"__getitem__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB","text":"Database instance.","title":"DB"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB-functions","text":"","title":"Functions"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.__init__","text":"__init__ ( db : Database )","title":"__init__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.list_colls","text":"list_colls () List collections in DB","title":"list_colls"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.is_coll","text":"is_coll ( coll_name : str ) Returns True if coll in DB collections.","title":"is_coll"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.__getattr__","text":"__getattr__ ( coll_name : str ) Get a collection from database.","title":"__getattr__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.__getitem__","text":"__getitem__ ( coll_name : str ) Get a collection from database.","title":"__getitem__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DB.__iter__","text":"__iter__ () Define to avoid accidentally creating collection.","title":"__iter__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll","text":"Database collection.","title":"Coll"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.indexes","text":"indexes = [ IndexModel ([( SIG_LIST , ASCENDING ), ( TEND , ASCENDING ), ( TSTART , ASCENDING )]), IndexModel ([( SIGS + '.' + NAME , ASCENDING ), ( TEND , ASCENDING ), ( TSTART , ASCENDING )]), IndexModel ([( TEND , ASCENDING )])]","title":"indexes"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.coll","text":"coll = coll","title":"coll"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll-functions","text":"","title":"Functions"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.__init__","text":"__init__ ( coll : Collection )","title":"__init__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.check_index","text":"check_index () Create indexes if they dont exist.","title":"check_index"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.get_details","text":"get_details () Get collection details.","title":"get_details"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.drop","text":"drop () Drop collection.","title":"drop"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.list_sigs","text":"list_sigs () list signals in collection","title":"list_sigs"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.write","text":"write ( data : Frame | Sig , allow_overlapping = False , replace_ids : list [ ObjectId ] = None ) Write data to collection. Parameters: data ( Frame | Sig ) \u2013 data frame or sig to write to collection. allow_overlapping \u2013 If True, this will read documents with overlapping timelines, append and interweave the data, then write to the collection. replace_ids ( list [ ObjectId ] , default: None ) \u2013 List of ObjectIds to replace in the write op. Assumes that req'd manipulations have already been performed on data .","title":"write"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.read","text":"read ( sigs : list [ str ] = None , tstart : datetime | float = None , tend : datetime | float = None ) -> Frame Read data from collection. Parameters: sigs ( list [ str ] , default: None ) \u2013 List of signal names to read. Reads all if sigs=None . tstart ( datetime | float , default: None ) \u2013 Start time in unix to read from. Reads all if tstart=None . tend ( datetime | float , default: None ) \u2013 End time in unix. Reads all if tend=None . Returns: CCGFrame \u2013 CCGFrame read from collection.","title":"read"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.read_full_docs","text":"read_full_docs ( sigs : list [ str ] = None , tstart : datetime | float = None , tend : datetime | float = None , exclude_ids : list [ ObjectId ] = None ) -> tuple [ Frame , list [ ObjectId ]] Read documents from collection. Parameters: sigs ( list [ str ] , default: None ) \u2013 List of signal names to read. Reads all if sigs=None . tstart ( datetime | float , default: None ) \u2013 Start time in unix to read from. Reads all if tstart=None . tend ( datetime | float , default: None ) \u2013 End time in unix. Reads all if tend=None . exclude_ids ( list [ ObjectId ] , default: None ) \u2013 Will not read docs with _id in exclude_ids , Returns: CCGFrame \u2013 CCGFrame read from collection. list [ ObjectId ] \u2013 document id's read from DB.","title":"read_full_docs"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.check_overlapping","text":"check_overlapping ( frame : Frame , exclude_ids : list [ ObjectId ] = None ) Check collection for tline overlap for this frame. Parameters: frame ( Frame ) \u2013 Data to compare to db for signal and timeline overlap. exclude_ids ( list [ ObjectId ] , default: None ) \u2013 List of document ids to exclude from the comparison. Useful when modifying docs.","title":"check_overlapping"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.get_tstart","text":"get_tstart ( signame : str ) -> float Get start time of sig in collection.","title":"get_tstart"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.get_tend","text":"get_tend ( signame : str ) -> float Get end time of sig in collection.","title":"get_tend"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.get_overlapping","text":"get_overlapping ( frame : Frame , exclude_ids : list [ ObjectId ] = None ) -> tuple [ Frame , list [ ObjectId ]] Read overlapping data and append to frame.","title":"get_overlapping"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.__getattr__","text":"__getattr__ ( coll_name : str ) Get a sub collection from this collection.","title":"__getattr__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.__getitem__","text":"__getitem__ ( coll_name : str ) Get a sub collection from this collection.","title":"__getitem__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.Coll.__iter__","text":"__iter__ ()","title":"__iter__"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DBErr","text":"Bases: Exception CCGDB Error.","title":"DBErr"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.OverlappingData","text":"Bases: DBErr Overlapping data in collection.","title":"OverlappingData"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.DeletionError","text":"Bases: DBErr Issue deleting docs in collection.","title":"DeletionError"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo-functions","text":"","title":"Functions"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.to_docs","text":"to_docs ( data : Frame ) -> list [ dict ] Bin CCGFrame data to a list of dicts. Docs for MongoDB.","title":"to_docs"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.to_doc","text":"to_doc ( data : Frame , tline : TLine , ensure_encodable = False ) Build doc for MongoDB. Parameters: data ( Frame ) \u2013 CCGFrame to get data from. tline ( TLine ) \u2013 Tline for this document, will get the signal data corresponding to this tline from data. Returns: Dict for MongoDB. \u2013","title":"to_doc"},{"location":"reference/ccg/db/mongo/#ccg.db.mongo.docs_to_frame","text":"docs_to_frame ( docs : Cursor , sig_details : dict [ str , dict [ str , Any ]] = None ) -> tuple [ Frame , list [ ObjectId ]] Build CCGFrame from DB docs. Parameters: docs ( Cursor ) \u2013 pymongo cursor to documents. sigs \u2013 dict of {signame:{nsamples:int, dtype:str}} for pre-allocation. Returns: Frame of data \u2013 list[ObjectId] of document id's \u2013","title":"docs_to_frame"},{"location":"reference/ccg/ui/","text":"","title":"ui"},{"location":"reference/ccg/ui/panel/","text":"Panel app driver. Attributes CSS module-attribute CSS = ' \\n table { \\n text-align: center; \\n border-collapse: collapse; \\n table-layout: fixed; \\n } \\n td[contenteditable=\"False\"]{ \\n user-select: none; \\n } \\n td { \\n padding: 2px 5px; \\n cursor: pointer; \\n border: 1px solid; \\n } \\n th { \\n border: 1px solid; \\n } \\n tr { \\n border-top: 1px solid; \\n } \\n\\n .cal-data { \\n background-color:#7c7e85; \\n } \\n .cal-data-name { \\n background-color:#656b72; \\n } \\n\\n .cal-data-axis0name, .cal-data-axis0{ \\n background-color:#656b72; \\n } \\n\\n .cal-data-axis1name, .cal-data-axis1{ \\n background-color:#656b72; \\n } \\n\\n .active-cell{ \\n box-shadow: inset 2000px 0 0 0 #b3b3b3b3; \\n padding: 0px 5px; \\n } \\n\\n .locked { \\n text-decoration:underline overline 3px; \\n } \\n\\n .bk.tabs-left > div:not(.bk-tabs-header){ \\n border-left: 2px solid var(--accent-foreground-active); \\n } \\n .bk-root .bk-tabs-header.bk-left .bk-headers{ \\n -webkit-align-items: flex-end; \\n } \\n .bk.plot{ \\n left:0; \\n margin:5px; \\n width: calc(100% - 10px); \\n } \\n .svg-container { \\n border-radius:3px; \\n overflow:hidden; \\n width:90%; \\n margin:auto; \\n } \\n .bk-root .choices__item.choices__item--choice.choices__item--selectable.is-highlighted { \\n background: var(--neutral-fill-hover) \\n } \\n .bk-root .choices__input { \\n color:var(--neutral-foreground-rest); \\n } \\n div.choices__list.choices__list--dropdown.is-active > div { \\n background: var(--background-color); \\n } \\n\\n .bk-panel-models-tabs-Tabs { \\n padding: 20px; \\n } \\n ' ASSETSPATH module-attribute ASSETSPATH = joinpath ( 'assets' ) Classes CalDataTbl Bases: ReactiveHTML Base class for custom table data control. Attributes table_name class-attribute instance-attribute table_name = String ( doc = 'Param Name.' ) axis_names class-attribute instance-attribute axis_names = List ( doc = 'Axis Names.' , default = []) axis_breakpoints class-attribute instance-attribute axis_breakpoints = List ( doc = 'Axis Breakpoints.' , default = []) axis_precisions class-attribute instance-attribute axis_precisions = List ( doc = 'Axis Precisions.' , default = []) data class-attribute instance-attribute data = List ( doc = 'Param Data.' ) data_precision class-attribute instance-attribute data_precision = Integer ( default = 1 , doc = 'Data Precision' ) n_data class-attribute instance-attribute n_data = Integer ( default = 0 , doc = 'Flag to indicate update from python.' ) n_color class-attribute instance-attribute n_color = Integer ( default = 0 , doc = 'Flag to indicate update from python.' ) active_cell class-attribute instance-attribute active_cell = Dict ( doc = 'Active Cell' ) n_cell class-attribute instance-attribute n_cell = Integer ( default = 0 , doc = 'Flag to indicate update from python.' ) selected_cells class-attribute instance-attribute selected_cells = List ( doc = 'Selected Cells' , default = []) locked class-attribute instance-attribute locked = List ( doc = 'Locked Cells' ) idn class-attribute instance-attribute idn = String ( default = '' , doc = 'table id' ) undo class-attribute instance-attribute undo = Boolean ( default = False , doc = 'flag for python undo' ) reset class-attribute instance-attribute reset = Boolean ( default = False , doc = 'flag for python reset of selected cells' ) editable class-attribute instance-attribute editable = Boolean ( default = True , doc = 'flag for if table is editable' ) colorscale class-attribute instance-attribute colorscale = String ( default = 'Turbo' , doc = 'Colorscale for table cell colors' ) colorscale_center class-attribute instance-attribute colorscale_center = Number ( default = None , doc = 'Center colorscale around this value' ) light_font class-attribute instance-attribute light_font = String ( default = '#e5e5e5' , doc = 'Colorscale for table cell colors' ) dark_font class-attribute instance-attribute dark_font = String ( default = '#434343' , doc = 'Colorscale for table cell colors' ) colors class-attribute instance-attribute colors = List ( doc = 'Cell colors.' ) font_colors class-attribute instance-attribute font_colors = List ( doc = 'Font colors.' ) colors_bind instance-attribute colors_bind = bind ( calc_colors , data = data , colorscale = colorscale , colorscale_center = colorscale_center , light_font = light_font , dark_font = dark_font , watch = True ) Functions __init__ __init__ ( ** kwargs ) Initiate and Update Colors calc_colors calc_colors ( data , colorscale , colorscale_center , light_font , dark_font ) CalData Class to contain cal data and its handlers. Attributes table_data instance-attribute table_data = data widget instance-attribute widget = Column ( sizing_mode = 'stretch_width' , css_classes = [ 'cdata' ], name = name ) additional_gate instance-attribute additional_gate : GateColl | None = None row_off property row_off : int | None Row offset for cal data table col_off property col_off : int | None Column offset for cal data table Functions __init__ __init__ ( data : Tbl | None = None ) build_panel_widget build_panel_widget () -> pn . Column Build CalData widget for param. build_prec_args build_prec_args () Build the prec_args dictionary for CalDataTbl. load_additional_gate load_additional_gate ( event : param . parameterized . Event | None = None ) Load a table specific gate config undo undo ( event : param . parameterized . Event ) Undo last change to table. reset reset ( event : param . parameterized . Event ) Reset selected cells to orig. changed_tabs changed_tabs ( event : param . parameterized . Event ) update_axes update_axes ( event : param . parameterized . Event ) handle updates to axes update_table_plot update_table_plot ( _ : param . parameterized . Event = None ) Update table traces in plot. update_plot update_plot ( _ : param . parameterized . Event = None ) Updates the whole plot plot_click plot_click ( event : param . parameterized . Event ) Plot Clicked highlight_selected highlight_selected ( event : param . parameterized . Event ) This will updated the plt trace to highlight the selected cells from event.obj.selected_cells find_highlight_inds find_highlight_inds ( event : param . parameterized . Event ) Finds indices for highlighting func build_selction_update build_selction_update ( old_selected : list | npt . NDArray = None , selected : list | npt . NDArray = None , trace_num : int = 0 ) Build update for selection update_all_tables update_all_tables () Update all the tables. update_delta_table update_delta_table () Update all the tables. update_table_data update_table_data ( event : param . parameterized . Event ) Update the table data if changes from client. fit_data fit_data ( _ : param . parameterized . Event , block_update = False ) fit param to scatter data. commit_fit commit_fit ( _ : param . parameterized . Event | None = None ) commit current value to orig CalDataTabs A class to manage tabbed widgets of CalDatas. Attributes: tabs ( dict [ str , CalData ] ) \u2013 A dictionary mapping tab names to CalData objects. widget ( Tabs ) \u2013 A Panel Tabs object that contains the tabbed widgets. Methods: __init__ \u2013 Initializes the CalDataTabs object. update_tabs \u2013 Updates the tabs with a new set of Tbls objects. _set_no_cal_loaded \u2013 Sets the widget to display a \"No Cal Loaded\" message. Attributes tabs instance-attribute tabs : dict [ str , CalData ] = {} widget instance-attribute widget = Tabs ( dynamic = True , tabs_location = 'left' , css_classes = [ 'tabs-left' ], align = 'center' , sizing_mode = 'stretch_width' ) Functions __init__ __init__ ( tbls : Tbls | None = None ) update_tabs update_tabs ( tbls : Tbls ) Updates the tabs with a new set of Tbls objects. Parameters: tbls ( Tbls ) \u2013 A Tbls object containing the new tabs to add. update_active_tabs update_active_tabs ( event : param . parameterized . Event | None = None ) hack to update table on active __getitem__ __getitem__ ( key ) getitem __len__ __len__ () len DummyEvent dataclass Attributes old instance-attribute old : list new instance-attribute new : list Functions __init__ __init__ ( old : list , new : list ) -> None Functions text_to_scripts text_to_scripts ( filename : Path ) -> dict Returns a _scripts dictionary for ReactiveHTML based on a string Args: filename (str): The js script Returns: Dict: The output _scripts Example: txt=''' ... render=()=>{ ... console.log(data) ... } ... value=()=>{ ... my_func(value) ... } ... ''' text_to_scripts(txt) {'render': 'console.log(data)', 'value': 'my_func(value)'} Note: The script must be in the following format: Based on MarcSkovMarksen's suggestions for ReactiveHTML Scripts.","title":"panel"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CSS","text":"CSS = ' \\n table { \\n text-align: center; \\n border-collapse: collapse; \\n table-layout: fixed; \\n } \\n td[contenteditable=\"False\"]{ \\n user-select: none; \\n } \\n td { \\n padding: 2px 5px; \\n cursor: pointer; \\n border: 1px solid; \\n } \\n th { \\n border: 1px solid; \\n } \\n tr { \\n border-top: 1px solid; \\n } \\n\\n .cal-data { \\n background-color:#7c7e85; \\n } \\n .cal-data-name { \\n background-color:#656b72; \\n } \\n\\n .cal-data-axis0name, .cal-data-axis0{ \\n background-color:#656b72; \\n } \\n\\n .cal-data-axis1name, .cal-data-axis1{ \\n background-color:#656b72; \\n } \\n\\n .active-cell{ \\n box-shadow: inset 2000px 0 0 0 #b3b3b3b3; \\n padding: 0px 5px; \\n } \\n\\n .locked { \\n text-decoration:underline overline 3px; \\n } \\n\\n .bk.tabs-left > div:not(.bk-tabs-header){ \\n border-left: 2px solid var(--accent-foreground-active); \\n } \\n .bk-root .bk-tabs-header.bk-left .bk-headers{ \\n -webkit-align-items: flex-end; \\n } \\n .bk.plot{ \\n left:0; \\n margin:5px; \\n width: calc(100% - 10px); \\n } \\n .svg-container { \\n border-radius:3px; \\n overflow:hidden; \\n width:90%; \\n margin:auto; \\n } \\n .bk-root .choices__item.choices__item--choice.choices__item--selectable.is-highlighted { \\n background: var(--neutral-fill-hover) \\n } \\n .bk-root .choices__input { \\n color:var(--neutral-foreground-rest); \\n } \\n div.choices__list.choices__list--dropdown.is-active > div { \\n background: var(--background-color); \\n } \\n\\n .bk-panel-models-tabs-Tabs { \\n padding: 20px; \\n } \\n '","title":"CSS"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.ASSETSPATH","text":"ASSETSPATH = joinpath ( 'assets' )","title":"ASSETSPATH"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel-classes","text":"","title":"Classes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl","text":"Bases: ReactiveHTML Base class for custom table data control.","title":"CalDataTbl"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.table_name","text":"table_name = String ( doc = 'Param Name.' )","title":"table_name"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.axis_names","text":"axis_names = List ( doc = 'Axis Names.' , default = [])","title":"axis_names"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.axis_breakpoints","text":"axis_breakpoints = List ( doc = 'Axis Breakpoints.' , default = [])","title":"axis_breakpoints"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.axis_precisions","text":"axis_precisions = List ( doc = 'Axis Precisions.' , default = [])","title":"axis_precisions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.data","text":"data = List ( doc = 'Param Data.' )","title":"data"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.data_precision","text":"data_precision = Integer ( default = 1 , doc = 'Data Precision' )","title":"data_precision"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.n_data","text":"n_data = Integer ( default = 0 , doc = 'Flag to indicate update from python.' )","title":"n_data"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.n_color","text":"n_color = Integer ( default = 0 , doc = 'Flag to indicate update from python.' )","title":"n_color"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.active_cell","text":"active_cell = Dict ( doc = 'Active Cell' )","title":"active_cell"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.n_cell","text":"n_cell = Integer ( default = 0 , doc = 'Flag to indicate update from python.' )","title":"n_cell"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.selected_cells","text":"selected_cells = List ( doc = 'Selected Cells' , default = [])","title":"selected_cells"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.locked","text":"locked = List ( doc = 'Locked Cells' )","title":"locked"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.idn","text":"idn = String ( default = '' , doc = 'table id' )","title":"idn"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.undo","text":"undo = Boolean ( default = False , doc = 'flag for python undo' )","title":"undo"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.reset","text":"reset = Boolean ( default = False , doc = 'flag for python reset of selected cells' )","title":"reset"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.editable","text":"editable = Boolean ( default = True , doc = 'flag for if table is editable' )","title":"editable"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.colorscale","text":"colorscale = String ( default = 'Turbo' , doc = 'Colorscale for table cell colors' )","title":"colorscale"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.colorscale_center","text":"colorscale_center = Number ( default = None , doc = 'Center colorscale around this value' )","title":"colorscale_center"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.light_font","text":"light_font = String ( default = '#e5e5e5' , doc = 'Colorscale for table cell colors' )","title":"light_font"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.dark_font","text":"dark_font = String ( default = '#434343' , doc = 'Colorscale for table cell colors' )","title":"dark_font"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.colors","text":"colors = List ( doc = 'Cell colors.' )","title":"colors"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.font_colors","text":"font_colors = List ( doc = 'Font colors.' )","title":"font_colors"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.colors_bind","text":"colors_bind = bind ( calc_colors , data = data , colorscale = colorscale , colorscale_center = colorscale_center , light_font = light_font , dark_font = dark_font , watch = True )","title":"colors_bind"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.__init__","text":"__init__ ( ** kwargs ) Initiate and Update Colors","title":"__init__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTbl.calc_colors","text":"calc_colors ( data , colorscale , colorscale_center , light_font , dark_font )","title":"calc_colors"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData","text":"Class to contain cal data and its handlers.","title":"CalData"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.table_data","text":"table_data = data","title":"table_data"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.widget","text":"widget = Column ( sizing_mode = 'stretch_width' , css_classes = [ 'cdata' ], name = name )","title":"widget"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.additional_gate","text":"additional_gate : GateColl | None = None","title":"additional_gate"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.row_off","text":"row_off : int | None Row offset for cal data table","title":"row_off"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.col_off","text":"col_off : int | None Column offset for cal data table","title":"col_off"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.__init__","text":"__init__ ( data : Tbl | None = None )","title":"__init__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.build_panel_widget","text":"build_panel_widget () -> pn . Column Build CalData widget for param.","title":"build_panel_widget"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.build_prec_args","text":"build_prec_args () Build the prec_args dictionary for CalDataTbl.","title":"build_prec_args"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.load_additional_gate","text":"load_additional_gate ( event : param . parameterized . Event | None = None ) Load a table specific gate config","title":"load_additional_gate"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.undo","text":"undo ( event : param . parameterized . Event ) Undo last change to table.","title":"undo"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.reset","text":"reset ( event : param . parameterized . Event ) Reset selected cells to orig.","title":"reset"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.changed_tabs","text":"changed_tabs ( event : param . parameterized . Event )","title":"changed_tabs"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_axes","text":"update_axes ( event : param . parameterized . Event ) handle updates to axes","title":"update_axes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_table_plot","text":"update_table_plot ( _ : param . parameterized . Event = None ) Update table traces in plot.","title":"update_table_plot"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_plot","text":"update_plot ( _ : param . parameterized . Event = None ) Updates the whole plot","title":"update_plot"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.plot_click","text":"plot_click ( event : param . parameterized . Event ) Plot Clicked","title":"plot_click"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.highlight_selected","text":"highlight_selected ( event : param . parameterized . Event ) This will updated the plt trace to highlight the selected cells from event.obj.selected_cells","title":"highlight_selected"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.find_highlight_inds","text":"find_highlight_inds ( event : param . parameterized . Event ) Finds indices for highlighting func","title":"find_highlight_inds"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.build_selction_update","text":"build_selction_update ( old_selected : list | npt . NDArray = None , selected : list | npt . NDArray = None , trace_num : int = 0 ) Build update for selection","title":"build_selction_update"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_all_tables","text":"update_all_tables () Update all the tables.","title":"update_all_tables"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_delta_table","text":"update_delta_table () Update all the tables.","title":"update_delta_table"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.update_table_data","text":"update_table_data ( event : param . parameterized . Event ) Update the table data if changes from client.","title":"update_table_data"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.fit_data","text":"fit_data ( _ : param . parameterized . Event , block_update = False ) fit param to scatter data.","title":"fit_data"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalData.commit_fit","text":"commit_fit ( _ : param . parameterized . Event | None = None ) commit current value to orig","title":"commit_fit"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs","text":"A class to manage tabbed widgets of CalDatas. Attributes: tabs ( dict [ str , CalData ] ) \u2013 A dictionary mapping tab names to CalData objects. widget ( Tabs ) \u2013 A Panel Tabs object that contains the tabbed widgets. Methods: __init__ \u2013 Initializes the CalDataTabs object. update_tabs \u2013 Updates the tabs with a new set of Tbls objects. _set_no_cal_loaded \u2013 Sets the widget to display a \"No Cal Loaded\" message.","title":"CalDataTabs"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.tabs","text":"tabs : dict [ str , CalData ] = {}","title":"tabs"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.widget","text":"widget = Tabs ( dynamic = True , tabs_location = 'left' , css_classes = [ 'tabs-left' ], align = 'center' , sizing_mode = 'stretch_width' )","title":"widget"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.__init__","text":"__init__ ( tbls : Tbls | None = None )","title":"__init__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.update_tabs","text":"update_tabs ( tbls : Tbls ) Updates the tabs with a new set of Tbls objects. Parameters: tbls ( Tbls ) \u2013 A Tbls object containing the new tabs to add.","title":"update_tabs"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.update_active_tabs","text":"update_active_tabs ( event : param . parameterized . Event | None = None ) hack to update table on active","title":"update_active_tabs"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.__getitem__","text":"__getitem__ ( key ) getitem","title":"__getitem__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.CalDataTabs.__len__","text":"__len__ () len","title":"__len__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent","text":"","title":"DummyEvent"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent.old","text":"old : list","title":"old"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent.new","text":"new : list","title":"new"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.DummyEvent.__init__","text":"__init__ ( old : list , new : list ) -> None","title":"__init__"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/panel/#ccg.ui.panel.text_to_scripts","text":"text_to_scripts ( filename : Path ) -> dict Returns a _scripts dictionary for ReactiveHTML based on a string Args: filename (str): The js script Returns: Dict: The output _scripts Example: txt=''' ... render=()=>{ ... console.log(data) ... } ... value=()=>{ ... my_func(value) ... } ... ''' text_to_scripts(txt) {'render': 'console.log(data)', 'value': 'my_func(value)'} Note: The script must be in the following format: Based on MarcSkovMarksen's suggestions for ReactiveHTML Scripts.","title":"text_to_scripts"},{"location":"reference/ccg/ui/plot/","text":"Classes PlotConfig Plot configuration. Attributes name instance-attribute name = name traces instance-attribute traces = traces layout instance-attribute layout = layout Functions __init__ __init__ ( name : str = None , traces : list [ dict ] = None , layout : dict = None ) to_dict to_dict () Returns a dictionary __repr__ __repr__ () repr. PlotConfigColl Collection of plot configurations. Attributes plot_configs instance-attribute plot_configs = plot_configs Functions __init__ __init__ ( plot_configs : list [ PlotConfig ] = None ) append append ( plot : PlotConfig | list [ PlotConfig ]) append plot to collection. build_plot build_plot ( frames : Frame | list [ Frame ]) build plot from plot config collection to_dict to_dict () -> list [ dict ] To dictionary. to_file to_file ( filename : str | Path ) Save to file. from_file from_file ( filename : str | Path ) -> PlotConfigColl Read from file. __iter__ __iter__ () iter. __repr__ __repr__ () repr. Plot Class to generate Plotly plots. Attributes THEME1 class-attribute instance-attribute THEME1 = '#011726' THEME2 class-attribute instance-attribute THEME2 = '#353837' THEME3 class-attribute instance-attribute THEME3 = '#656b72' THEME4 class-attribute instance-attribute THEME4 = '#8f979e' THEME5 class-attribute instance-attribute THEME5 = '#6B734F' WHITE class-attribute instance-attribute WHITE = '#e3ecff' BLACK class-attribute instance-attribute BLACK = '#111c24' GREY1 class-attribute instance-attribute GREY1 = '#333533' TRACES class-attribute instance-attribute TRACES = [ '#4ea7fa' , '#bcfa35' , '#FA2341' , '#923df3' , '#315dee' , '#0fbd26' , '#ff90a8' , '#ee31ee' , '#bdccdd' , '#22f31a' , '#fffc43' , '#ff8615' ] n_colors class-attribute instance-attribute n_colors = len ( TRACES ) TURBO class-attribute instance-attribute TURBO = [[ 0.0 , '#30123b' ], [ 0.071 , '#4145ab' ], [ 0.143 , '#4675ed' ], [ 0.214 , '#39a2fc' ], [ 0.286 , '#1bcfd4' ], [ 0.357 , '#24eca6' ], [ 0.429 , '#61fc6c' ], [ 0.5 , '#a4fc3b' ], [ 0.571 , '#d1e834' ], [ 0.643 , '#f3c63a' ], [ 0.714 , '#fe9b2d' ], [ 0.786 , '#f36315' ], [ 0.857 , '#d93806' ], [ 0.929 , '#b11901' ], [ 1.0 , '#7a0402' ]] LINESHAPE class-attribute instance-attribute LINESHAPE = { None : 'linear' , LINEAR : 'linear' , ZOH : 'hv' , NEAREST : 'hvh' } frange class-attribute instance-attribute frange = 4 fpos class-attribute instance-attribute fpos = 0.06 compat_types class-attribute instance-attribute compat_types = [( 'i' , 'f' , 'u' ), ( 'U' , 'S' ), ( 'b' ), ( 'O' )] config class-attribute instance-attribute config = { 'scrollZoom' : True , 'edits' : { 'legendPosition' : True }, 'displaylogo' : False , 'modeBarButtons' : [[ _copy_button , 'toImage' , 'zoom2d' , 'pan2d' , 'resetScale2d' ]]} traces instance-attribute traces : list [ dict ] = [] nyaxes instance-attribute nyaxes = 0 ntrace instance-attribute ntrace = - 1 n_cond instance-attribute n_cond = 0 n_col instance-attribute n_col = 0 yaxes instance-attribute yaxes : dict [ str , dict ] = {} plt_layout instance-attribute plt_layout = deepcopy ( _plt_layout ) plot_prep instance-attribute plot_prep = plot_prep Functions __init__ __init__ ( data : Frame | Sig | Tbl = None , name : str = None , plot_prep = True ) update_axis update_axis ( axis : str = 'xaxis1' , title : str = None , unit : str = None , min_range : float = None , max_range : float = None ) Update axis info. build_trace build_trace ( x : npt . NDArray , y : npt . NDArray , signame : str = None , sigunit : str = None , connect_gaps : bool = None , yaxis : str = None , color : int = None ) Build Trace for plotly. build_trace_from_sig build_trace_from_sig ( sig : Sig , color : int = None , yaxis : str = None ) Build Trace for plotly from a Sig. build_traces_from_tbl build_traces_from_tbl ( tbl : Tbl , color : int = None ) -> list [ dict ] build trace from table. build_traces_from_scatter build_traces_from_scatter ( scatter : ScatterData ) Builds scatter data traces build_0d_traces build_0d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) Build traces for 0d param build_1d_traces build_1d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) Build traces for 1d param build_2d_traces build_2d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) build traces from 2d param build_scatter_trace build_scatter_trace ( scatter : ScatterData , param : Tbl = None , ntrace : int = 1 , nscatter : int = 1 ) Builds a scatter trace. ntrace and nscatter are counters for color increments build_surf_traces build_surf_traces ( param : Tbl , color : int , ntrace : int , unit : str , visible : bool = True ) Build 2d surface trace find_yaxis find_yaxis ( sig : Sig , yaxis : str = None ) Check for matching y axes. build_yaxes build_yaxes () Build yaxes element for layout. append_trace_from_sig append_trace_from_sig ( sig : Sig , yaxis : str = None , color : int = None ) Build trace from sig and append to traces. append_trace_from_tbl append_trace_from_tbl ( tbl : Tbl ) build trace from table and append append_trace_from_scatter append_trace_from_scatter ( scatter : ScatterData ) build trace from Scatter and append append_trace append_trace ( trace : dict | list [ dict ]) Append trace to traces. to_html to_html () -> str Generate the HTML string for plot. to_file to_file ( filename : Path | str = None ) -> Path to_fig to_fig () -> tuple [ go . Figure , dict ] Return the plotly figure and config dict. to_dict to_dict () -> dict Return dictionary of plot plot plot () Plot. save save ( filename : str , open_after : bool = False ) Save HTML. to_image to_image ( img_format : str = 'svg' , width : int = None , height : int = None , as_b64 : bool = False ) -> bytes Return image bytes. export2pdf export2pdf ( filename : str | Path , width : int = None , height : int = None ) Export plot to PDF. Functions build_gate_plot build_gate_plot ( gate : GateColl | GateCond , frame : Frame , tline : TLine = None , def_plot : Plot = None ) -> Plot Plot validity and timer signals. build_collection_traces build_collection_traces ( gate : GateColl , frameorsig : Frame | Sig , tline : TLine = None , plot_def : Plot = None , andor : str = 'n/a' ) Build traces for gate collection.","title":"plot"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot-classes","text":"","title":"Classes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig","text":"Plot configuration.","title":"PlotConfig"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.name","text":"name = name","title":"name"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.traces","text":"traces = traces","title":"traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.layout","text":"layout = layout","title":"layout"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.__init__","text":"__init__ ( name : str = None , traces : list [ dict ] = None , layout : dict = None )","title":"__init__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.to_dict","text":"to_dict () Returns a dictionary","title":"to_dict"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfig.__repr__","text":"__repr__ () repr.","title":"__repr__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl","text":"Collection of plot configurations.","title":"PlotConfigColl"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.plot_configs","text":"plot_configs = plot_configs","title":"plot_configs"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.__init__","text":"__init__ ( plot_configs : list [ PlotConfig ] = None )","title":"__init__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.append","text":"append ( plot : PlotConfig | list [ PlotConfig ]) append plot to collection.","title":"append"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.build_plot","text":"build_plot ( frames : Frame | list [ Frame ]) build plot from plot config collection","title":"build_plot"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.to_dict","text":"to_dict () -> list [ dict ] To dictionary.","title":"to_dict"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.to_file","text":"to_file ( filename : str | Path ) Save to file.","title":"to_file"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.from_file","text":"from_file ( filename : str | Path ) -> PlotConfigColl Read from file.","title":"from_file"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.__iter__","text":"__iter__ () iter.","title":"__iter__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.PlotConfigColl.__repr__","text":"__repr__ () repr.","title":"__repr__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot","text":"Class to generate Plotly plots.","title":"Plot"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.THEME1","text":"THEME1 = '#011726'","title":"THEME1"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.THEME2","text":"THEME2 = '#353837'","title":"THEME2"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.THEME3","text":"THEME3 = '#656b72'","title":"THEME3"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.THEME4","text":"THEME4 = '#8f979e'","title":"THEME4"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.THEME5","text":"THEME5 = '#6B734F'","title":"THEME5"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.WHITE","text":"WHITE = '#e3ecff'","title":"WHITE"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.BLACK","text":"BLACK = '#111c24'","title":"BLACK"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.GREY1","text":"GREY1 = '#333533'","title":"GREY1"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.TRACES","text":"TRACES = [ '#4ea7fa' , '#bcfa35' , '#FA2341' , '#923df3' , '#315dee' , '#0fbd26' , '#ff90a8' , '#ee31ee' , '#bdccdd' , '#22f31a' , '#fffc43' , '#ff8615' ]","title":"TRACES"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.n_colors","text":"n_colors = len ( TRACES )","title":"n_colors"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.TURBO","text":"TURBO = [[ 0.0 , '#30123b' ], [ 0.071 , '#4145ab' ], [ 0.143 , '#4675ed' ], [ 0.214 , '#39a2fc' ], [ 0.286 , '#1bcfd4' ], [ 0.357 , '#24eca6' ], [ 0.429 , '#61fc6c' ], [ 0.5 , '#a4fc3b' ], [ 0.571 , '#d1e834' ], [ 0.643 , '#f3c63a' ], [ 0.714 , '#fe9b2d' ], [ 0.786 , '#f36315' ], [ 0.857 , '#d93806' ], [ 0.929 , '#b11901' ], [ 1.0 , '#7a0402' ]]","title":"TURBO"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.LINESHAPE","text":"LINESHAPE = { None : 'linear' , LINEAR : 'linear' , ZOH : 'hv' , NEAREST : 'hvh' }","title":"LINESHAPE"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.frange","text":"frange = 4","title":"frange"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.fpos","text":"fpos = 0.06","title":"fpos"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.compat_types","text":"compat_types = [( 'i' , 'f' , 'u' ), ( 'U' , 'S' ), ( 'b' ), ( 'O' )]","title":"compat_types"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.config","text":"config = { 'scrollZoom' : True , 'edits' : { 'legendPosition' : True }, 'displaylogo' : False , 'modeBarButtons' : [[ _copy_button , 'toImage' , 'zoom2d' , 'pan2d' , 'resetScale2d' ]]}","title":"config"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.traces","text":"traces : list [ dict ] = []","title":"traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.nyaxes","text":"nyaxes = 0","title":"nyaxes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.ntrace","text":"ntrace = - 1","title":"ntrace"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.n_cond","text":"n_cond = 0","title":"n_cond"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.n_col","text":"n_col = 0","title":"n_col"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.yaxes","text":"yaxes : dict [ str , dict ] = {}","title":"yaxes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.plt_layout","text":"plt_layout = deepcopy ( _plt_layout )","title":"plt_layout"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.plot_prep","text":"plot_prep = plot_prep","title":"plot_prep"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.__init__","text":"__init__ ( data : Frame | Sig | Tbl = None , name : str = None , plot_prep = True )","title":"__init__"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.update_axis","text":"update_axis ( axis : str = 'xaxis1' , title : str = None , unit : str = None , min_range : float = None , max_range : float = None ) Update axis info.","title":"update_axis"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_trace","text":"build_trace ( x : npt . NDArray , y : npt . NDArray , signame : str = None , sigunit : str = None , connect_gaps : bool = None , yaxis : str = None , color : int = None ) Build Trace for plotly.","title":"build_trace"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_trace_from_sig","text":"build_trace_from_sig ( sig : Sig , color : int = None , yaxis : str = None ) Build Trace for plotly from a Sig.","title":"build_trace_from_sig"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_traces_from_tbl","text":"build_traces_from_tbl ( tbl : Tbl , color : int = None ) -> list [ dict ] build trace from table.","title":"build_traces_from_tbl"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_traces_from_scatter","text":"build_traces_from_scatter ( scatter : ScatterData ) Builds scatter data traces","title":"build_traces_from_scatter"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_0d_traces","text":"build_0d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) Build traces for 0d param","title":"build_0d_traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_1d_traces","text":"build_1d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) Build traces for 1d param","title":"build_1d_traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_2d_traces","text":"build_2d_traces ( param : Tbl , color : int , ntrace : int , unit : str ) build traces from 2d param","title":"build_2d_traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_scatter_trace","text":"build_scatter_trace ( scatter : ScatterData , param : Tbl = None , ntrace : int = 1 , nscatter : int = 1 ) Builds a scatter trace. ntrace and nscatter are counters for color increments","title":"build_scatter_trace"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_surf_traces","text":"build_surf_traces ( param : Tbl , color : int , ntrace : int , unit : str , visible : bool = True ) Build 2d surface trace","title":"build_surf_traces"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.find_yaxis","text":"find_yaxis ( sig : Sig , yaxis : str = None ) Check for matching y axes.","title":"find_yaxis"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.build_yaxes","text":"build_yaxes () Build yaxes element for layout.","title":"build_yaxes"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.append_trace_from_sig","text":"append_trace_from_sig ( sig : Sig , yaxis : str = None , color : int = None ) Build trace from sig and append to traces.","title":"append_trace_from_sig"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.append_trace_from_tbl","text":"append_trace_from_tbl ( tbl : Tbl ) build trace from table and append","title":"append_trace_from_tbl"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.append_trace_from_scatter","text":"append_trace_from_scatter ( scatter : ScatterData ) build trace from Scatter and append","title":"append_trace_from_scatter"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.append_trace","text":"append_trace ( trace : dict | list [ dict ]) Append trace to traces.","title":"append_trace"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.to_html","text":"to_html () -> str Generate the HTML string for plot.","title":"to_html"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.to_file","text":"to_file ( filename : Path | str = None ) -> Path","title":"to_file"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.to_fig","text":"to_fig () -> tuple [ go . Figure , dict ] Return the plotly figure and config dict.","title":"to_fig"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.to_dict","text":"to_dict () -> dict Return dictionary of plot","title":"to_dict"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.plot","text":"plot () Plot.","title":"plot"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.save","text":"save ( filename : str , open_after : bool = False ) Save HTML.","title":"save"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.to_image","text":"to_image ( img_format : str = 'svg' , width : int = None , height : int = None , as_b64 : bool = False ) -> bytes Return image bytes.","title":"to_image"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.Plot.export2pdf","text":"export2pdf ( filename : str | Path , width : int = None , height : int = None ) Export plot to PDF.","title":"export2pdf"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.build_gate_plot","text":"build_gate_plot ( gate : GateColl | GateCond , frame : Frame , tline : TLine = None , def_plot : Plot = None ) -> Plot Plot validity and timer signals.","title":"build_gate_plot"},{"location":"reference/ccg/ui/plot/#ccg.ui.plot.build_collection_traces","text":"build_collection_traces ( gate : GateColl , frameorsig : Frame | Sig , tline : TLine = None , plot_def : Plot = None , andor : str = 'n/a' ) Build traces for gate collection.","title":"build_collection_traces"},{"location":"reference/ccg/ui/plot_themes/","text":"Attributes THEME1 module-attribute THEME1 = '#011726' THEME2 module-attribute THEME2 = '#353837' THEME3 module-attribute THEME3 = '#656b72' THEME4 module-attribute THEME4 = '#8f979e' THEME5 module-attribute THEME5 = '#6B734F' WHITE module-attribute WHITE = '#e3ecff' BLACK module-attribute BLACK = '#111c24' GREY1 module-attribute GREY1 = '#333533' TRACES module-attribute TRACES = [ '#4ea7fa' , '#bcfa35' , '#FA2341' , '#923df3' , '#315dee' , '#0fbd26' , '#ff90a8' , '#ee31ee' , '#bdccdd' , '#22f31a' , '#fffc43' , '#ff8615' ] N_COLORS module-attribute N_COLORS = len ( TRACES ) TURBO module-attribute TURBO = [[ 0.0 , '#30123b' ], [ 0.071 , '#4145ab' ], [ 0.143 , '#4675ed' ], [ 0.214 , '#39a2fc' ], [ 0.286 , '#1bcfd4' ], [ 0.357 , '#24eca6' ], [ 0.429 , '#61fc6c' ], [ 0.5 , '#a4fc3b' ], [ 0.571 , '#d1e834' ], [ 0.643 , '#f3c63a' ], [ 0.714 , '#fe9b2d' ], [ 0.786 , '#f36315' ], [ 0.857 , '#d93806' ], [ 0.929 , '#b11901' ], [ 1.0 , '#7a0402' ]] LINESHAPE module-attribute LINESHAPE = { None : 'linear' , LINEAR : 'linear' , ZOH : 'hv' , NEAREST : 'hvh' } FRANGE module-attribute FRANGE = 4 FPOS module-attribute FPOS = 0.06 SCENE_AXIS module-attribute SCENE_AXIS = { 'backgroundcolor' : THEME4 , 'color' : WHITE , 'gridcolor' : THEME3 , 'showline' : True , 'showgrid' : True , 'ticks' : 'outside' , 'mirror' : True } COMPAT_TYPES module-attribute COMPAT_TYPES = [( 'i' , 'f' , 'u' ), ( 'U' , 'S' ), ( 'b' ), ( 'O' )] COPY_BUTTON module-attribute COPY_BUTTON = { 'name' : 'toClipboard' , 'title' : 'Copy to clipboard' , 'icon' : { 'path' : 'M102.17,29.66A3,3,0,0,0,100,26.79L73.62,1.1A3,3,0,0,0,71.31,0h-46a5.36,5.36,0,0,0-5.36,5.36V20.41H5.36A5.36,5.36,0,0,0,0,25.77v91.75a5.36,5.36,0,0,0,5.36,5.36H76.9a5.36,5.36,0,0,0,5.33-5.36v-15H96.82a5.36,5.36,0,0,0,5.33-5.36q0-33.73,0-67.45ZM25.91,20.41V6h42.4V30.24a3,3,0,0,0,3,3H96.18q0,31.62,0,63.24h-14l0-46.42a3,3,0,0,0-2.17-2.87L53.69,21.51a2.93,2.93,0,0,0-2.3-1.1ZM54.37,30.89,72.28,47.67H54.37V30.89ZM6,116.89V26.37h42.4V50.65a3,3,0,0,0,3,3H76.26q0,31.64,0,63.24ZM17.33,69.68a2.12,2.12,0,0,1,1.59-.74H54.07a2.14,2.14,0,0,1,1.6.73,2.54,2.54,0,0,1,.63,1.7,2.57,2.57,0,0,1-.64,1.7,2.16,2.16,0,0,1-1.59.74H18.92a2.15,2.15,0,0,1-1.6-.73,2.59,2.59,0,0,1,0-3.4Zm0,28.94a2.1,2.1,0,0,1,1.58-.74H63.87a2.12,2.12,0,0,1,1.59.74,2.57,2.57,0,0,1,.64,1.7,2.54,2.54,0,0,1-.63,1.7,2.14,2.14,0,0,1-1.6.73H18.94a2.13,2.13,0,0,1-1.59-.73,2.56,2.56,0,0,1,0-3.4ZM63.87,83.41a2.12,2.12,0,0,1,1.59.74,2.59,2.59,0,0,1,0,3.4,2.13,2.13,0,0,1-1.6.72H18.94a2.12,2.12,0,0,1-1.59-.72,2.55,2.55,0,0,1-.64-1.71,2.5,2.5,0,0,1,.65-1.69,2.1,2.1,0,0,1,1.58-.74ZM17.33,55.2a2.15,2.15,0,0,1,1.59-.73H39.71a2.13,2.13,0,0,1,1.6.72,2.61,2.61,0,0,1,0,3.41,2.15,2.15,0,0,1-1.59.73H18.92a2.14,2.14,0,0,1-1.6-.72,2.61,2.61,0,0,1,0-3.41Zm0-14.47A2.13,2.13,0,0,1,18.94,40H30.37a2.12,2.12,0,0,1,1.59.72,2.61,2.61,0,0,1,0,3.41,2.13,2.13,0,0,1-1.58.73H18.94a2.16,2.16,0,0,1-1.59-.72,2.57,2.57,0,0,1-.64-1.71,2.54,2.54,0,0,1,.65-1.7ZM74.3,10.48,92.21,27.26H74.3V10.48Z' , 'transform' : 'scale(0.12)' }, 'click' : 'plotly_clip' } COPY_FUNC module-attribute COPY_FUNC = \"function plotly_clip(gd) {Plotly.toImage(gd, { format: 'png', width: 2100, height: 900 }).then(async function (url) {try {const data = await fetch(url);const blob = await data.blob();await navigator.clipboard.write([new ClipboardItem({[blob.type]: blob})]);console.log('Image copied.');} catch (err) {console.error(err.name, err.message);}});}\" CONFIG module-attribute CONFIG = { 'scrollZoom' : True , 'edits' : { 'legendPosition' : True }, 'displaylogo' : False , 'modeBarButtons' : [[ COPY_BUTTON , 'toImage' , 'zoom2d' , 'pan2d' , 'resetScale2d' ]]} ccg_tbl module-attribute ccg_tbl = Template ( data = {}, layout = { 'title' : { 'text' : 'CCG Data' , 'font' : { 'size' : 24 }, 'x' : 0.5 , 'xanchor' : 'center' }, 'legend' : { 'bgcolor' : THEME3 , 'bordercolor' : THEME4 , 'borderwidth' : 1 , 'xanchor' : 'left' , 'yanchor' : 'top' , 'x' : 1.02 , 'y' : 1 }, 'showlegend' : True , 'hovermode' : 'closest' , 'margin' : { 'autoexpand' : True , 'b' : 80 , 'l' : 80 , 'r' : 80 , 't' : 80 , 'pad' : 0 }, 'xaxis1' : { 'color' : WHITE , 'gridcolor' : THEME4 , 'showline' : True , 'spikesnap' : 'hovered data' , 'spikemode' : 'across+marker' , 'spikedash' : 'solid' , 'spikethickness' : 1 , 'ticks' : 'outside' , 'zerolinecolor' : THEME4 , 'zerolinewidth' : 2 , 'mirror' : True }, 'paper_bgcolor' : THEME2 , 'plot_bgcolor' : GREY1 , 'font' : { 'color' : WHITE , 'family' : 'Consolas, \"Courier New\", monospace' }, 'clickmode' : 'event+select' , 'colorway' : TRACES , 'selectdirection' : 'any' , 'autosize' : True , 'uirevision' : True , 'scene' : { 'xaxis' : deepcopy ( SCENE_AXIS ), 'yaxis' : deepcopy ( SCENE_AXIS ), 'zaxis' : deepcopy ( SCENE_AXIS ), 'camera' : { 'eye' : { 'x' : - 1.25 , 'y' : - 1.25 , 'z' : 1.1 }}}})","title":"plot_themes"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.THEME1","text":"THEME1 = '#011726'","title":"THEME1"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.THEME2","text":"THEME2 = '#353837'","title":"THEME2"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.THEME3","text":"THEME3 = '#656b72'","title":"THEME3"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.THEME4","text":"THEME4 = '#8f979e'","title":"THEME4"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.THEME5","text":"THEME5 = '#6B734F'","title":"THEME5"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.WHITE","text":"WHITE = '#e3ecff'","title":"WHITE"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.BLACK","text":"BLACK = '#111c24'","title":"BLACK"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.GREY1","text":"GREY1 = '#333533'","title":"GREY1"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.TRACES","text":"TRACES = [ '#4ea7fa' , '#bcfa35' , '#FA2341' , '#923df3' , '#315dee' , '#0fbd26' , '#ff90a8' , '#ee31ee' , '#bdccdd' , '#22f31a' , '#fffc43' , '#ff8615' ]","title":"TRACES"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.N_COLORS","text":"N_COLORS = len ( TRACES )","title":"N_COLORS"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.TURBO","text":"TURBO = [[ 0.0 , '#30123b' ], [ 0.071 , '#4145ab' ], [ 0.143 , '#4675ed' ], [ 0.214 , '#39a2fc' ], [ 0.286 , '#1bcfd4' ], [ 0.357 , '#24eca6' ], [ 0.429 , '#61fc6c' ], [ 0.5 , '#a4fc3b' ], [ 0.571 , '#d1e834' ], [ 0.643 , '#f3c63a' ], [ 0.714 , '#fe9b2d' ], [ 0.786 , '#f36315' ], [ 0.857 , '#d93806' ], [ 0.929 , '#b11901' ], [ 1.0 , '#7a0402' ]]","title":"TURBO"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.LINESHAPE","text":"LINESHAPE = { None : 'linear' , LINEAR : 'linear' , ZOH : 'hv' , NEAREST : 'hvh' }","title":"LINESHAPE"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.FRANGE","text":"FRANGE = 4","title":"FRANGE"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.FPOS","text":"FPOS = 0.06","title":"FPOS"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.SCENE_AXIS","text":"SCENE_AXIS = { 'backgroundcolor' : THEME4 , 'color' : WHITE , 'gridcolor' : THEME3 , 'showline' : True , 'showgrid' : True , 'ticks' : 'outside' , 'mirror' : True }","title":"SCENE_AXIS"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.COMPAT_TYPES","text":"COMPAT_TYPES = [( 'i' , 'f' , 'u' ), ( 'U' , 'S' ), ( 'b' ), ( 'O' )]","title":"COMPAT_TYPES"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.COPY_BUTTON","text":"COPY_BUTTON = { 'name' : 'toClipboard' , 'title' : 'Copy to clipboard' , 'icon' : { 'path' : 'M102.17,29.66A3,3,0,0,0,100,26.79L73.62,1.1A3,3,0,0,0,71.31,0h-46a5.36,5.36,0,0,0-5.36,5.36V20.41H5.36A5.36,5.36,0,0,0,0,25.77v91.75a5.36,5.36,0,0,0,5.36,5.36H76.9a5.36,5.36,0,0,0,5.33-5.36v-15H96.82a5.36,5.36,0,0,0,5.33-5.36q0-33.73,0-67.45ZM25.91,20.41V6h42.4V30.24a3,3,0,0,0,3,3H96.18q0,31.62,0,63.24h-14l0-46.42a3,3,0,0,0-2.17-2.87L53.69,21.51a2.93,2.93,0,0,0-2.3-1.1ZM54.37,30.89,72.28,47.67H54.37V30.89ZM6,116.89V26.37h42.4V50.65a3,3,0,0,0,3,3H76.26q0,31.64,0,63.24ZM17.33,69.68a2.12,2.12,0,0,1,1.59-.74H54.07a2.14,2.14,0,0,1,1.6.73,2.54,2.54,0,0,1,.63,1.7,2.57,2.57,0,0,1-.64,1.7,2.16,2.16,0,0,1-1.59.74H18.92a2.15,2.15,0,0,1-1.6-.73,2.59,2.59,0,0,1,0-3.4Zm0,28.94a2.1,2.1,0,0,1,1.58-.74H63.87a2.12,2.12,0,0,1,1.59.74,2.57,2.57,0,0,1,.64,1.7,2.54,2.54,0,0,1-.63,1.7,2.14,2.14,0,0,1-1.6.73H18.94a2.13,2.13,0,0,1-1.59-.73,2.56,2.56,0,0,1,0-3.4ZM63.87,83.41a2.12,2.12,0,0,1,1.59.74,2.59,2.59,0,0,1,0,3.4,2.13,2.13,0,0,1-1.6.72H18.94a2.12,2.12,0,0,1-1.59-.72,2.55,2.55,0,0,1-.64-1.71,2.5,2.5,0,0,1,.65-1.69,2.1,2.1,0,0,1,1.58-.74ZM17.33,55.2a2.15,2.15,0,0,1,1.59-.73H39.71a2.13,2.13,0,0,1,1.6.72,2.61,2.61,0,0,1,0,3.41,2.15,2.15,0,0,1-1.59.73H18.92a2.14,2.14,0,0,1-1.6-.72,2.61,2.61,0,0,1,0-3.41Zm0-14.47A2.13,2.13,0,0,1,18.94,40H30.37a2.12,2.12,0,0,1,1.59.72,2.61,2.61,0,0,1,0,3.41,2.13,2.13,0,0,1-1.58.73H18.94a2.16,2.16,0,0,1-1.59-.72,2.57,2.57,0,0,1-.64-1.71,2.54,2.54,0,0,1,.65-1.7ZM74.3,10.48,92.21,27.26H74.3V10.48Z' , 'transform' : 'scale(0.12)' }, 'click' : 'plotly_clip' }","title":"COPY_BUTTON"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.COPY_FUNC","text":"COPY_FUNC = \"function plotly_clip(gd) {Plotly.toImage(gd, { format: 'png', width: 2100, height: 900 }).then(async function (url) {try {const data = await fetch(url);const blob = await data.blob();await navigator.clipboard.write([new ClipboardItem({[blob.type]: blob})]);console.log('Image copied.');} catch (err) {console.error(err.name, err.message);}});}\"","title":"COPY_FUNC"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.CONFIG","text":"CONFIG = { 'scrollZoom' : True , 'edits' : { 'legendPosition' : True }, 'displaylogo' : False , 'modeBarButtons' : [[ COPY_BUTTON , 'toImage' , 'zoom2d' , 'pan2d' , 'resetScale2d' ]]}","title":"CONFIG"},{"location":"reference/ccg/ui/plot_themes/#ccg.ui.plot_themes.ccg_tbl","text":"ccg_tbl = Template ( data = {}, layout = { 'title' : { 'text' : 'CCG Data' , 'font' : { 'size' : 24 }, 'x' : 0.5 , 'xanchor' : 'center' }, 'legend' : { 'bgcolor' : THEME3 , 'bordercolor' : THEME4 , 'borderwidth' : 1 , 'xanchor' : 'left' , 'yanchor' : 'top' , 'x' : 1.02 , 'y' : 1 }, 'showlegend' : True , 'hovermode' : 'closest' , 'margin' : { 'autoexpand' : True , 'b' : 80 , 'l' : 80 , 'r' : 80 , 't' : 80 , 'pad' : 0 }, 'xaxis1' : { 'color' : WHITE , 'gridcolor' : THEME4 , 'showline' : True , 'spikesnap' : 'hovered data' , 'spikemode' : 'across+marker' , 'spikedash' : 'solid' , 'spikethickness' : 1 , 'ticks' : 'outside' , 'zerolinecolor' : THEME4 , 'zerolinewidth' : 2 , 'mirror' : True }, 'paper_bgcolor' : THEME2 , 'plot_bgcolor' : GREY1 , 'font' : { 'color' : WHITE , 'family' : 'Consolas, \"Courier New\", monospace' }, 'clickmode' : 'event+select' , 'colorway' : TRACES , 'selectdirection' : 'any' , 'autosize' : True , 'uirevision' : True , 'scene' : { 'xaxis' : deepcopy ( SCENE_AXIS ), 'yaxis' : deepcopy ( SCENE_AXIS ), 'zaxis' : deepcopy ( SCENE_AXIS ), 'camera' : { 'eye' : { 'x' : - 1.25 , 'y' : - 1.25 , 'z' : 1.1 }}}})","title":"ccg_tbl"},{"location":"reference/ccg/ui/plotgo/","text":"New Plotly Driver Classes Plot New plot class, uses go.Figure() Attributes nyaxes instance-attribute nyaxes = 0 ntrace instance-attribute ntrace = - 1 n_cond instance-attribute n_cond = 0 n_col instance-attribute n_col = 0 yaxes instance-attribute yaxes : dict = {} fig instance-attribute fig = Figure () Functions __init__ __init__ ( data : ccg . Frame | ccg . Sig | ccg . Tbl | ccg . ScatterData = None , name : str = None ) build_traces_from_tbl build_traces_from_tbl ( tbl : ccg . Tbl , color : int = None ) -> list [ dict ] build traces from table. append_trace append_trace ( trace : dict | list [ dict ]) Append trace to traces. build_0d_traces build_0d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) Build traces for 0d param build_1d_traces build_1d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) Build traces for 1d param build_2d_traces build_2d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) build traces from 2d param build_scatter_trace build_scatter_trace ( scatter : ccg . ScatterData , param : ccg . Tbl = None , ntrace : int = 1 , nscatter : int = 1 ) Builds a scatter trace. ntrace and nscatter are counters for color increments build_surf_traces build_surf_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str , visible : bool = True ) Build 2d surface trace build_trace_from_sig build_trace_from_sig ( sig : ccg . Sig , color : int = None , yaxis : str = None ) Build Trace for plotly from a Sig. find_yaxis find_yaxis ( sig : ccg . Sig , yaxis : str = None ) Check for matching y axes. build_yaxes build_yaxes () Build yaxes element for layout. Functions","title":"plotgo"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo-classes","text":"","title":"Classes"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot","text":"New plot class, uses go.Figure()","title":"Plot"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.nyaxes","text":"nyaxes = 0","title":"nyaxes"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.ntrace","text":"ntrace = - 1","title":"ntrace"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.n_cond","text":"n_cond = 0","title":"n_cond"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.n_col","text":"n_col = 0","title":"n_col"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.yaxes","text":"yaxes : dict = {}","title":"yaxes"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.fig","text":"fig = Figure ()","title":"fig"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.__init__","text":"__init__ ( data : ccg . Frame | ccg . Sig | ccg . Tbl | ccg . ScatterData = None , name : str = None )","title":"__init__"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_traces_from_tbl","text":"build_traces_from_tbl ( tbl : ccg . Tbl , color : int = None ) -> list [ dict ] build traces from table.","title":"build_traces_from_tbl"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.append_trace","text":"append_trace ( trace : dict | list [ dict ]) Append trace to traces.","title":"append_trace"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_0d_traces","text":"build_0d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) Build traces for 0d param","title":"build_0d_traces"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_1d_traces","text":"build_1d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) Build traces for 1d param","title":"build_1d_traces"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_2d_traces","text":"build_2d_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str ) build traces from 2d param","title":"build_2d_traces"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_scatter_trace","text":"build_scatter_trace ( scatter : ccg . ScatterData , param : ccg . Tbl = None , ntrace : int = 1 , nscatter : int = 1 ) Builds a scatter trace. ntrace and nscatter are counters for color increments","title":"build_scatter_trace"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_surf_traces","text":"build_surf_traces ( param : ccg . Tbl , color : int , ntrace : int , unit : str , visible : bool = True ) Build 2d surface trace","title":"build_surf_traces"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_trace_from_sig","text":"build_trace_from_sig ( sig : ccg . Sig , color : int = None , yaxis : str = None ) Build Trace for plotly from a Sig.","title":"build_trace_from_sig"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.find_yaxis","text":"find_yaxis ( sig : ccg . Sig , yaxis : str = None ) Check for matching y axes.","title":"find_yaxis"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo.Plot.build_yaxes","text":"build_yaxes () Build yaxes element for layout.","title":"build_yaxes"},{"location":"reference/ccg/ui/plotgo/#ccg.ui.plotgo-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/web/","text":"Simple util to open browser in app mode. Inspired by https://github.com/python-eel/Eel/tree/main Attributes BROWSERS module-attribute BROWSERS = [ 'SOFTWARE \\\\ Microsoft \\\\ Windows \\\\ CurrentVersion \\\\ App Paths \\\\ msedge.exe' , 'SOFTWARE \\\\ Microsoft \\\\ Windows \\\\ CurrentVersion \\\\ App Paths \\\\ chrome.exe' ] Functions launch_browser launch_browser ( start_url : str ) -> sps . Popen | None Launches a browser window in app mode. Requires Chrome or MS Edge. Parameters: start_url ( str ) \u2013 URL to launch. Returns: Popen \u2013 The subprocess object representing the launched browser. launch_browser_async async launch_browser_async ( start_url : str ) -> None Launches a browser window in app mode asynchronously. Requires Chrome or MS Edge. Parameters: start_url ( str ) \u2013 URL to launch.","title":"web"},{"location":"reference/ccg/ui/web/#ccg.ui.web-attributes","text":"","title":"Attributes"},{"location":"reference/ccg/ui/web/#ccg.ui.web.BROWSERS","text":"BROWSERS = [ 'SOFTWARE \\\\ Microsoft \\\\ Windows \\\\ CurrentVersion \\\\ App Paths \\\\ msedge.exe' , 'SOFTWARE \\\\ Microsoft \\\\ Windows \\\\ CurrentVersion \\\\ App Paths \\\\ chrome.exe' ]","title":"BROWSERS"},{"location":"reference/ccg/ui/web/#ccg.ui.web-functions","text":"","title":"Functions"},{"location":"reference/ccg/ui/web/#ccg.ui.web.launch_browser","text":"launch_browser ( start_url : str ) -> sps . Popen | None Launches a browser window in app mode. Requires Chrome or MS Edge. Parameters: start_url ( str ) \u2013 URL to launch. Returns: Popen \u2013 The subprocess object representing the launched browser.","title":"launch_browser"},{"location":"reference/ccg/ui/web/#ccg.ui.web.launch_browser_async","text":"launch_browser_async ( start_url : str ) -> None Launches a browser window in app mode asynchronously. Requires Chrome or MS Edge. Parameters: start_url ( str ) \u2013 URL to launch.","title":"launch_browser_async"}]}